import {
  index_esm_exports
} from "./chunk-BZYHGTYI.js";
import {
  require_react_dom
} from "./chunk-G5QNMKBJ.js";
import {
  require_jsx_dev_runtime
} from "./chunk-2DA65X2N.js";
import {
  require_jsx_runtime
} from "./chunk-RLIK6ROT.js";
import {
  require_react
} from "./chunk-6JVJAL25.js";
import {
  __export,
  __toESM,
  init_buffer,
  init_process
} from "./chunk-5AFJP5ZI.js";

// node_modules/@plasmicapp/host/dist/host.esm.js
var host_esm_exports = {};
__export(host_esm_exports, {
  DataContext: () => DataContext,
  DataCtxReader: () => DataCtxReader,
  DataProvider: () => DataProvider,
  GlobalActionsContext: () => GlobalActionsContext,
  GlobalActionsProvider: () => GlobalActionsProvider,
  PageParamsProvider: () => PageParamsProvider,
  PlasmicCanvasContext: () => PlasmicCanvasContext,
  PlasmicCanvasHost: () => PlasmicCanvasHost,
  PlasmicLinkProvider: () => PlasmicLinkProvider,
  PlasmicTranslatorContext: () => PlasmicTranslatorContext,
  applySelector: () => applySelector,
  mkMetaName: () => mkMetaName,
  mkMetaValue: () => mkMetaValue,
  registerComponent: () => registerComponent,
  registerFunction: () => registerFunction,
  registerGlobalContext: () => registerGlobalContext,
  registerToken: () => registerToken,
  registerTrait: () => registerTrait,
  repeatedElement: () => repeatedElement,
  stateHelpersKeys: () => stateHelpersKeys,
  unstable_registerFetcher: () => registerFetcher,
  useDataEnv: () => useDataEnv,
  useGlobalActions: () => useGlobalActions,
  usePlasmicCanvasComponentInfo: () => usePlasmicCanvasComponentInfo,
  usePlasmicCanvasContext: () => usePlasmicCanvasContext,
  usePlasmicLink: () => usePlasmicLink,
  usePlasmicLinkMaybe: () => usePlasmicLinkMaybe,
  usePlasmicTranslator: () => usePlasmicTranslator,
  useSelector: () => useSelector,
  useSelectors: () => useSelectors
});
init_process();
init_buffer();
var React = __toESM(require_react());
var import_react = __toESM(require_react());
var ReactDOM = __toESM(require_react_dom());
var jsxDevRuntime = __toESM(require_jsx_dev_runtime());
var jsxRuntime = __toESM(require_jsx_runtime());
var extendStatics = function(d, b) {
  extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
  };
  return extendStatics(d, b);
};
function __extends(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
  __assign = Object.assign || function __assign2(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
function isString(x) {
  return typeof x === "string";
}
function ensure(x, msg) {
  if (msg === void 0) {
    msg = "";
  }
  if (x === null || x === void 0) {
    debugger;
    msg = (isString(msg) ? msg : msg()) || "";
    throw new Error("Value must not be undefined or null".concat(msg ? "- ".concat(msg) : ""));
  } else {
    return x;
  }
}
function useForceUpdate() {
  var _a2 = (0, import_react.useState)(0), setTick = _a2[1];
  var update = (0, import_react.useCallback)(function() {
    setTick(function(tick) {
      return tick + 1;
    });
  }, []);
  return update;
}
if (globalThis.__PlasmicHostVersion == null) {
  globalThis.__PlasmicHostVersion = "3";
}
var rootChangeListeners = [];
var PlasmicRootNodeWrapper = (
  /** @class */
  /* @__PURE__ */ function() {
    function PlasmicRootNodeWrapper2(value) {
      var _this = this;
      this.value = value;
      this.set = function(val) {
        _this.value = val;
        rootChangeListeners.forEach(function(f) {
          return f();
        });
      };
      this.get = function() {
        return _this.value;
      };
    }
    return PlasmicRootNodeWrapper2;
  }()
);
var plasmicRootNode = new PlasmicRootNodeWrapper(null);
function getHashParams() {
  return new URLSearchParams(location.hash.replace(/^#/, "?"));
}
function getPlasmicOrigin() {
  var params = getHashParams();
  return ensure(params.get("origin"), "Missing information from Plasmic window.");
}
function getStudioHash() {
  var hashParams = getHashParams();
  if (hashParams.has("studioHash")) {
    return hashParams.get("studioHash");
  }
  var urlParams = new URL(location.href).searchParams;
  return urlParams.get("studio-hash");
}
function renderStudioIntoIframe() {
  var script = document.createElement("script");
  var plasmicOrigin = getPlasmicOrigin();
  var hash = getStudioHash();
  script.src = "".concat(plasmicOrigin, "/static/js/studio").concat(hash ? ".".concat(hash, ".js") : ".js");
  document.body.appendChild(script);
}
var renderCount = 0;
function setPlasmicRootNode(node) {
  renderCount++;
  plasmicRootNode.set(node);
}
var PlasmicCanvasContext = React.createContext(false);
var usePlasmicCanvasContext = function() {
  return React.useContext(PlasmicCanvasContext);
};
function _PlasmicCanvasHost() {
  var _a2, _b2;
  var isFrameAttached = !!window.parent;
  var isCanvas = !!((_a2 = location.hash) === null || _a2 === void 0 ? void 0 : _a2.match(/\bcanvas=true\b/));
  var isLive = !!((_b2 = location.hash) === null || _b2 === void 0 ? void 0 : _b2.match(/\blive=true\b/)) || !isFrameAttached;
  var shouldRenderStudio = isFrameAttached && !document.querySelector("#plasmic-studio-tag") && !isCanvas && !isLive;
  var forceUpdate = useForceUpdate();
  React.useLayoutEffect(function() {
    rootChangeListeners.push(forceUpdate);
    return function() {
      var index = rootChangeListeners.indexOf(forceUpdate);
      if (index >= 0) {
        rootChangeListeners.splice(index, 1);
      }
    };
  }, [forceUpdate]);
  React.useEffect(function() {
    if (shouldRenderStudio && isFrameAttached && window.parent !== window) {
      renderStudioIntoIframe();
    }
  }, [shouldRenderStudio, isFrameAttached]);
  React.useEffect(function() {
    if (!shouldRenderStudio && !document.querySelector("#getlibs") && isLive) {
      var scriptElt = document.createElement("script");
      scriptElt.id = "getlibs";
      scriptElt.src = getPlasmicOrigin() + "/static/js/getlibs.js";
      scriptElt.async = false;
      scriptElt.onload = function() {
        var _a3, _b3;
        (_b3 = (_a3 = window).__GetlibsReadyResolver) === null || _b3 === void 0 ? void 0 : _b3.call(_a3);
      };
      document.head.append(scriptElt);
    }
  }, [shouldRenderStudio]);
  var _c = React.useState(function() {
    return deriveCanvasContextValue();
  }), canvasContextValue = _c[0], setCanvasContextValue = _c[1];
  React.useEffect(function() {
    if (isCanvas) {
      var listener_1 = function() {
        setCanvasContextValue(deriveCanvasContextValue());
      };
      window.addEventListener("hashchange", listener_1);
      return function() {
        return window.removeEventListener("hashchange", listener_1);
      };
    }
    return void 0;
  }, [isCanvas]);
  if (!isFrameAttached) {
    return null;
  }
  if (isCanvas || isLive) {
    var appDiv = document.querySelector("#plasmic-app.__wab_user-body");
    if (!appDiv) {
      appDiv = document.createElement("div");
      appDiv.id = "plasmic-app";
      appDiv.classList.add("__wab_user-body");
      document.body.prepend(appDiv);
    }
    return ReactDOM.createPortal(React.createElement(
      ErrorBoundary,
      { key: "".concat(renderCount) },
      React.createElement(PlasmicCanvasContext.Provider, { value: canvasContextValue }, plasmicRootNode.get())
    ), appDiv, "plasmic-app");
  }
  if (shouldRenderStudio && window.parent === window) {
    return React.createElement("iframe", { src: "https://docs.plasmic.app/app-content/app-host-ready#appHostUrl=".concat(encodeURIComponent(location.href)), style: {
      width: "100vw",
      height: "100vh",
      border: "none",
      position: "fixed",
      top: 0,
      left: 0,
      zIndex: 99999999
    } });
  }
  return null;
}
var PlasmicCanvasHost = function(props) {
  var enableWebpackHmr = props.enableWebpackHmr;
  var _a2 = React.useState(null), node = _a2[0], setNode = _a2[1];
  React.useEffect(function() {
    setNode(React.createElement(_PlasmicCanvasHost, null));
  }, []);
  return React.createElement(
    React.Fragment,
    null,
    !enableWebpackHmr && React.createElement(DisableWebpackHmr, null),
    node
  );
};
var renderErrorListeners = [];
function registerRenderErrorListener(listener) {
  renderErrorListeners.push(listener);
  return function() {
    var index = renderErrorListeners.indexOf(listener);
    if (index >= 0) {
      renderErrorListeners.splice(index, 1);
    }
  };
}
var ErrorBoundary = (
  /** @class */
  function(_super) {
    __extends(ErrorBoundary2, _super);
    function ErrorBoundary2(props) {
      var _this = _super.call(this, props) || this;
      _this.state = {};
      return _this;
    }
    ErrorBoundary2.getDerivedStateFromError = function(error) {
      return { error };
    };
    ErrorBoundary2.prototype.componentDidCatch = function(error) {
      renderErrorListeners.forEach(function(listener) {
        return listener(error);
      });
    };
    ErrorBoundary2.prototype.render = function() {
      if (this.state.error) {
        return React.createElement(
          "div",
          null,
          "Error: ",
          "".concat(this.state.error.message)
        );
      } else {
        return React.createElement(React.Fragment, null, this.props.children);
      }
    };
    return ErrorBoundary2;
  }(React.Component)
);
function DisableWebpackHmr() {
  if (false) {
    return null;
  }
  return React.createElement("script", { type: "text/javascript", dangerouslySetInnerHTML: {
    __html: '\n      if (typeof window !== "undefined") {\n        const RealEventSource = window.EventSource;\n        window.EventSource = function(url, config) {\n          if (/[^a-zA-Z]hmr($|[^a-zA-Z])/.test(url)) {\n            console.warn("Plasmic: disabled EventSource request for", url);\n            return {\n              onerror() {}, onmessage() {}, onopen() {}, close() {}\n            };\n          } else {\n            return new RealEventSource(url, config);\n          }\n        }\n      }\n      '
  } });
}
function deriveCanvasContextValue() {
  var _a2;
  var hash = window.location.hash;
  if (hash && hash.length > 0) {
    var params = new URLSearchParams(hash.substring(1));
    if (params.get("canvas") === "true") {
      var globalVariants = params.get("globalVariants");
      return {
        componentName: (_a2 = params.get("componentName")) !== null && _a2 !== void 0 ? _a2 : null,
        globalVariants: globalVariants ? JSON.parse(globalVariants) : {},
        interactive: params.get("interactive") === "true"
      };
    }
  }
  return false;
}
var INTERNAL_CC_CANVAS_SELECTION_PROP = "__plasmic_selection_prop__";
function usePlasmicCanvasComponentInfo(props) {
  return React.useMemo(function() {
    var selectionInfo = props === null || props === void 0 ? void 0 : props[INTERNAL_CC_CANVAS_SELECTION_PROP];
    if (selectionInfo) {
      return {
        isSelected: selectionInfo.isSelected,
        selectedSlotName: selectionInfo.selectedSlotName
      };
    }
    return null;
  }, [props]);
}
var tuple = function() {
  var args = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }
  return args;
};
var DataContext = (0, import_react.createContext)(void 0);
function mkMetaName(name) {
  return "__plasmic_meta_".concat(name);
}
function mkMetaValue(meta) {
  return meta;
}
function applySelector(rawData, selector) {
  if (!selector) {
    return void 0;
  }
  var curData = rawData;
  for (var _i = 0, _a2 = selector.split("."); _i < _a2.length; _i++) {
    var key = _a2[_i];
    curData = curData === null || curData === void 0 ? void 0 : curData[key];
  }
  return curData;
}
function useSelector(selector) {
  var rawData = useDataEnv();
  return applySelector(rawData, selector);
}
function useSelectors(selectors) {
  if (selectors === void 0) {
    selectors = {};
  }
  var rawData = useDataEnv();
  return Object.fromEntries(Object.entries(selectors).filter(function(_a2) {
    var key = _a2[0], selector = _a2[1];
    return !!key && !!selector;
  }).map(function(_a2) {
    var key = _a2[0], selector = _a2[1];
    return tuple(key, applySelector(rawData, selector));
  }));
}
function useDataEnv() {
  return (0, import_react.useContext)(DataContext);
}
function DataProvider(_a2) {
  var name = _a2.name, data = _a2.data, hidden = _a2.hidden, advanced = _a2.advanced, label = _a2.label, children = _a2.children;
  var parentContext = useDataEnv();
  var childContext = (0, import_react.useMemo)(function() {
    var _a3;
    if (!name) {
      return null;
    }
    return __assign(__assign({}, parentContext), (_a3 = {}, _a3[name] = data, _a3[mkMetaName(name)] = mkMetaValue({ hidden, advanced, label }), _a3));
  }, [parentContext, name, data, hidden, advanced, label]);
  if (childContext === null) {
    return import_react.default.createElement(import_react.default.Fragment, null, children);
  } else {
    return import_react.default.createElement(DataContext.Provider, { value: childContext }, children);
  }
}
function fixCatchallParams(params) {
  var newParams = {};
  for (var _i = 0, _a2 = Object.entries(params); _i < _a2.length; _i++) {
    var _b2 = _a2[_i], key = _b2[0], value = _b2[1];
    if (!value) {
      continue;
    }
    if (key.startsWith("...")) {
      newParams[key.slice(3)] = typeof value === "string" ? value.replace(/^\/|\/$/g, "").split("/") : value;
    } else {
      newParams[key] = value;
    }
  }
  return newParams;
}
function mkPathFromRouteAndParams(route, params) {
  if (!params) {
    return route;
  }
  var path = route;
  for (var _i = 0, _a2 = Object.entries(params); _i < _a2.length; _i++) {
    var _b2 = _a2[_i], key = _b2[0], value = _b2[1];
    if (typeof value === "string") {
      path = path.replace("[".concat(key, "]"), value);
    } else if (Array.isArray(value)) {
      if (path.includes("[[...".concat(key, "]]"))) {
        path = path.replace("[[...".concat(key, "]]"), value.join("/"));
      } else if (path.includes("[...".concat(key, "]"))) {
        path = path.replace("[...".concat(key, "]"), value.join("/"));
      }
    }
  }
  return path;
}
function PageParamsProvider(_a2) {
  var children = _a2.children, route = _a2.route, deprecatedRoute = _a2.path, _b2 = _a2.params, params = _b2 === void 0 ? {} : _b2, _c = _a2.query, query = _c === void 0 ? {} : _c;
  route = route !== null && route !== void 0 ? route : deprecatedRoute;
  params = fixCatchallParams(params);
  var $ctx = useDataEnv() || {};
  var path = route ? mkPathFromRouteAndParams(route, params) : void 0;
  return import_react.default.createElement(
    DataProvider,
    { name: "pageRoute", data: route, label: "Page route", advanced: true },
    import_react.default.createElement(
      DataProvider,
      { name: "pagePath", data: path, label: "Page path" },
      import_react.default.createElement(
        DataProvider,
        { name: "params", data: __assign(__assign({}, $ctx.params), params), label: "Page URL path params" },
        import_react.default.createElement(DataProvider, { name: "query", data: __assign(__assign({}, $ctx.query), query), label: "Page URL query params" }, children)
      )
    )
  );
}
function DataCtxReader(_a2) {
  var children = _a2.children;
  var $ctx = useDataEnv();
  return children($ctx);
}
var root$7 = globalThis;
root$7.__PlasmicFetcherRegistry = [];
function registerFetcher(fetcher, meta) {
  root$7.__PlasmicFetcherRegistry.push({ fetcher, meta });
}
var GlobalActionsContext = import_react.default.createContext(void 0);
function GlobalActionsProvider(props) {
  var contextName = props.contextName, children = props.children, actions = props.actions;
  var existingActions = useGlobalActions();
  var namespacedActions = import_react.default.useMemo(function() {
    return Object.fromEntries(Object.entries(actions).map(function(_a2) {
      var key = _a2[0], val = _a2[1];
      return [
        "".concat(contextName, ".").concat(key),
        val
      ];
    }));
  }, [contextName, actions]);
  return import_react.default.createElement(GlobalActionsContext.Provider, { value: __assign(__assign({}, existingActions), namespacedActions) }, children);
}
function useGlobalActions() {
  var _a2;
  return (_a2 = import_react.default.useContext(GlobalActionsContext)) !== null && _a2 !== void 0 ? _a2 : {};
}
var PlasmicLinkContext = import_react.default.createContext(void 0);
function usePlasmicLinkMaybe() {
  return import_react.default.useContext(PlasmicLinkContext);
}
var AnchorLink = import_react.default.forwardRef(function AnchorLink2(props, ref) {
  return import_react.default.createElement("a", __assign({}, props, { ref }));
});
function usePlasmicLink() {
  var Link = import_react.default.useContext(PlasmicLinkContext);
  if (Link) {
    return Link;
  } else {
    return AnchorLink;
  }
}
function PlasmicLinkProvider(props) {
  var Link = props.Link, children = props.children;
  return import_react.default.createElement(PlasmicLinkContext.Provider, { value: Link }, children);
}
var root$6 = globalThis;
var stateHelpersKeys = [
  "initFunc",
  "onChangeArgsToValue",
  "onMutate"
];
if (root$6.__PlasmicComponentRegistry == null) {
  root$6.__PlasmicComponentRegistry = [];
}
function registerComponent(component, meta) {
  if (root$6.__PlasmicComponentRegistry.some(function(r) {
    return r.component === component && r.meta.name === meta.name;
  })) {
    return;
  }
  root$6.__PlasmicComponentRegistry.push({ component, meta });
}
var root$5 = globalThis;
if (root$5.__PlasmicFunctionsRegistry == null) {
  root$5.__PlasmicFunctionsRegistry = [];
}
function registerFunction(fn, meta) {
  if (root$5.__PlasmicFunctionsRegistry.some(function(r) {
    return r.function === fn && r.meta.name === meta.name && r.meta.namespace == meta.namespace;
  })) {
    return;
  }
  root$5.__PlasmicFunctionsRegistry.push({ function: fn, meta });
}
var root$4 = globalThis;
if (root$4.__PlasmicContextRegistry == null) {
  root$4.__PlasmicContextRegistry = [];
}
function registerGlobalContext(component, meta) {
  if (root$4.__PlasmicContextRegistry.some(function(r) {
    return r.component === component && r.meta.name === meta.name;
  })) {
    return;
  }
  root$4.__PlasmicContextRegistry.push({ component, meta });
}
var root$3 = globalThis;
if (root$3.__PlasmicTokenRegistry == null) {
  root$3.__PlasmicTokenRegistry = [];
}
function registerToken(token) {
  root$3.__PlasmicTokenRegistry.push(token);
}
var root$2 = globalThis;
if (root$2.__PlasmicTraitRegistry == null) {
  root$2.__PlasmicTraitRegistry = [];
}
function registerTrait(trait, meta) {
  root$2.__PlasmicTraitRegistry.push({
    trait,
    meta
  });
}
var _a$1;
var _b;
function repeatedElement(index, elt) {
  return repeatedElementFn(index, elt);
}
var repeatedElementFn = function(index, elt) {
  if (Array.isArray(elt)) {
    return elt.map(function(v) {
      return repeatedElementFn(index, v);
    });
  }
  if (elt && (0, import_react.isValidElement)(elt) && typeof elt !== "string") {
    return (0, import_react.cloneElement)(elt);
  }
  return elt;
};
var root$1 = globalThis;
var setRepeatedElementFn = (_b = (_a$1 = root$1 === null || root$1 === void 0 ? void 0 : root$1.__Sub) === null || _a$1 === void 0 ? void 0 : _a$1.setRepeatedElementFn) !== null && _b !== void 0 ? _b : function(fn) {
  repeatedElementFn = fn;
};
var PlasmicTranslatorContext = import_react.default.createContext(void 0);
function usePlasmicTranslator() {
  var _t = import_react.default.useContext(PlasmicTranslatorContext);
  var translator = _t ? typeof _t === "function" ? _t : _t.translator : void 0;
  return translator;
}
var hostModule = Object.freeze({
  __proto__: null,
  DataContext,
  DataCtxReader,
  DataProvider,
  GlobalActionsContext,
  GlobalActionsProvider,
  PageParamsProvider,
  PlasmicCanvasContext,
  PlasmicCanvasHost,
  PlasmicLinkProvider,
  PlasmicTranslatorContext,
  applySelector,
  mkMetaName,
  mkMetaValue,
  registerComponent,
  registerFunction,
  registerGlobalContext,
  registerToken,
  registerTrait,
  repeatedElement,
  stateHelpersKeys,
  unstable_registerFetcher: registerFetcher,
  useDataEnv,
  useGlobalActions,
  usePlasmicCanvasComponentInfo,
  usePlasmicCanvasContext,
  usePlasmicLink,
  usePlasmicLinkMaybe,
  usePlasmicTranslator,
  useSelector,
  useSelectors
});
var hostVersion = "1.0.222";
var _a;
var root = globalThis;
if (root.__Sub == null) {
  root.__Sub = __assign({
    React,
    ReactDOM,
    jsxRuntime,
    jsxDevRuntime,
    PlasmicQuery: index_esm_exports,
    hostModule,
    hostVersion,
    hostUtils: {
      setPlasmicRootNode,
      registerRenderErrorListener,
      setRepeatedElementFn
    },
    // For backwards compatibility:
    setPlasmicRootNode,
    registerRenderErrorListener,
    setRepeatedElementFn
  }, hostModule);
} else {
  console.warn("Encountered likely duplicate host version: ".concat(root.__Sub.hostVersion, " vs ").concat(hostVersion));
  root.__Sub.duplicateHostVersions = (_a = root.__Sub.duplicateHostVersions) !== null && _a !== void 0 ? _a : [];
  root.__Sub.duplicateHostVersions.push(hostVersion);
}

export {
  PlasmicCanvasContext,
  usePlasmicCanvasContext,
  PlasmicCanvasHost,
  usePlasmicCanvasComponentInfo,
  DataContext,
  mkMetaName,
  mkMetaValue,
  applySelector,
  useSelector,
  useSelectors,
  useDataEnv,
  DataProvider,
  PageParamsProvider,
  DataCtxReader,
  registerFetcher,
  GlobalActionsContext,
  GlobalActionsProvider,
  useGlobalActions,
  usePlasmicLinkMaybe,
  usePlasmicLink,
  PlasmicLinkProvider,
  stateHelpersKeys,
  registerComponent,
  registerFunction,
  registerGlobalContext,
  registerToken,
  registerTrait,
  repeatedElement,
  PlasmicTranslatorContext,
  usePlasmicTranslator,
  host_esm_exports
};
//# sourceMappingURL=chunk-5TQMQLDD.js.map
