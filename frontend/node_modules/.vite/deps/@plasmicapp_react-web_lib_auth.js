import {
  require_browser
} from "./chunk-Y62ADK3M.js";
import {
  useMutablePlasmicQueryData
} from "./chunk-BZYHGTYI.js";
import "./chunk-6JVJAL25.js";
import {
  __toESM,
  init_buffer,
  init_process
} from "./chunk-5AFJP5ZI.js";

// node_modules/@plasmicapp/react-web/lib/auth/index.js
init_process();
init_buffer();

// node_modules/@plasmicapp/auth-react/dist/index.esm.js
init_process();
init_buffer();

// node_modules/@plasmicapp/auth-api/dist/index.esm.js
init_process();
init_buffer();
var import_isomorphic_unfetch = __toESM(require_browser());
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
var PLASMIC_HOST = "https://data.plasmic.app";
function getPlasmicAppUserFromToken(opts) {
  return __async(this, null, function* () {
    const { host, token } = opts;
    const url = `${host || PLASMIC_HOST}/api/v1/app-auth/userinfo`;
    const result = yield (0, import_isomorphic_unfetch.default)(url, {
      headers: {
        "x-plasmic-data-user-auth-token": token
      }
    });
    const user = yield result.json();
    if (result.status >= 400) {
      return {
        user: null,
        token: null,
        error: new Error("Invalid token")
      };
    }
    return {
      user,
      token
    };
  });
}
function getPlasmicAppUser(opts) {
  return __async(this, null, function* () {
    const { host, appId, codeVerifier, code } = opts;
    const requestParams = new URLSearchParams();
    requestParams.set("grant_type", "authorization_code");
    requestParams.set("code", code);
    requestParams.set("code_verifier", codeVerifier);
    requestParams.set("client_id", appId);
    const url = `${host || PLASMIC_HOST}/api/v1/app-auth/token?${requestParams.toString()}`;
    const result = yield (0, import_isomorphic_unfetch.default)(url);
    const { token, user, error } = yield result.json();
    if (result.status >= 400 || error) {
      return {
        user: null,
        token: null,
        error: error != null ? error : new Error("Internal error")
      };
    }
    return {
      user,
      token
    };
  });
}
function ensurePlasmicAppUser(opts) {
  return __async(this, null, function* () {
    const { host, appSecret, roleId } = opts;
    const email = "email" in opts ? opts.email : void 0;
    const externalId = "externalId" in opts ? opts.externalId : void 0;
    const url = `${host || PLASMIC_HOST}/api/v1/app-auth/user`;
    const result = yield (0, import_isomorphic_unfetch.default)(url, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "x-plasmic-app-auth-api-token": appSecret
      },
      body: JSON.stringify({
        email,
        externalId,
        roleId
      })
    });
    const { user, token, error } = yield result.json();
    if (result.status >= 400 || error) {
      return {
        user: null,
        token: null,
        error: error != null ? error : new Error("Internal error")
      };
    }
    return {
      user,
      token
    };
  });
}
var createPlasmicAppUser = ensurePlasmicAppUser;

// node_modules/@plasmicapp/auth-react/dist/index.esm.js
var __async2 = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
var storageUserKey = (appId) => `$user.${appId}`;
var isBrowser = typeof window !== "undefined";
function getCallbackParams() {
  const params = new URLSearchParams(window.location.search);
  const error = params.get("error");
  const code = params.get("code");
  const state = params.get("state");
  return {
    isCallbackError: !!error,
    isCodeExchange: !!code && !!state,
    error,
    code,
    state
  };
}
function getCodeVerifier() {
  try {
    return localStorage.getItem("code_verifier");
  } catch (err) {
    return null;
  }
}
function removeCallbackParams() {
  try {
    window.history.replaceState({}, "", location.pathname);
  } catch (err) {
    console.error(`Error while removing callback params: ${err}`);
  }
}
function isContinueToSameLocation(continueTo) {
  const pathname = window.location.pathname;
  const origin = window.location.origin;
  return continueTo === pathname || continueTo === origin + pathname;
}
function handleCallback(opts) {
  return __async2(this, null, function* () {
    const { host, appId, code, state, codeVerifier } = opts;
    let continueTo = "/";
    try {
      if (state) {
        const parsedState = JSON.parse(state);
        continueTo = parsedState.continueTo;
      }
    } catch (err) {
      console.error(`Error while parsing state: ${err}`);
    }
    const result = yield getPlasmicAppUser({
      host,
      appId,
      code,
      codeVerifier
    });
    if (result.error) {
      console.log(`Error while performing code exchange: ${result.error}`);
      return void 0;
    }
    localStorage.setItem(storageUserKey(appId), result.token);
    if (!isContinueToSameLocation(continueTo)) {
      window.location.assign(continueTo);
    } else {
      removeCallbackParams();
    }
    return { token: result.token, user: result.user };
  });
}
function checkAlreadyLoggedUser(opts) {
  return __async2(this, null, function* () {
    const { appId, host } = opts;
    const token = localStorage.getItem(storageUserKey(appId));
    if (!token) {
      return { user: null, token: null };
    }
    const { user, error } = yield getPlasmicAppUserFromToken({
      host,
      token
    });
    if (error) {
      localStorage.removeItem(storageUserKey(appId));
      console.log(`Error while checking logged user`);
      return { user: null, token: null };
    }
    return { user, token };
  });
}
function usePlasmicAuth(opts) {
  var _a, _b;
  const { host, appId } = opts;
  const authKey = `$csq$plasmic-auth-${appId}`;
  const { data: userData, isLoading } = useMutablePlasmicQueryData(
    authKey,
    () => __async2(this, null, function* () {
      if (!appId || !isBrowser) {
        return { user: null, token: null };
      }
      try {
        const callbackParams = getCallbackParams();
        if (callbackParams.isCallbackError || callbackParams.isCodeExchange) {
          if (callbackParams.isCallbackError) {
            removeCallbackParams();
            console.error(`Error: ${callbackParams.error}`);
            return { user: null, token: null };
          } else {
            const codeVerifier = getCodeVerifier();
            if (!codeVerifier) {
              removeCallbackParams();
              console.error("No code verifier found");
              return { user: null, token: null };
            } else {
              const result = yield handleCallback({
                host,
                appId,
                code: callbackParams.code,
                state: callbackParams.state,
                codeVerifier
              });
              if (!result) {
                removeCallbackParams();
                return { user: null, token: null };
              }
              return result;
            }
          }
        } else {
          return yield checkAlreadyLoggedUser({
            appId,
            host
          });
        }
      } catch (err) {
        console.error(`Error while handling auth: ${err}`);
      }
      return { user: null, token: null };
    })
  );
  return {
    user: (_a = userData == null ? void 0 : userData.user) != null ? _a : null,
    token: (_b = userData == null ? void 0 : userData.token) != null ? _b : null,
    isUserLoading: isLoading
  };
}
export {
  createPlasmicAppUser,
  ensurePlasmicAppUser,
  getPlasmicAppUser,
  getPlasmicAppUserFromToken,
  usePlasmicAuth
};
//# sourceMappingURL=@plasmicapp_react-web_lib_auth.js.map
