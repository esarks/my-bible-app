type Observer = (ids: string[]) => void;
/** Ensures option item IDs are unique. */
export declare class OptionsItemIdManager {
    private readonly _ids;
    private readonly _observers;
    private generateDuplicateId;
    private generateMissingId;
    register(id?: unknown): string;
    unregister(id: string): void;
    subscribe(observer: Observer): void;
    unsubscribe(observer: Observer): void;
    notify(): void;
    get ids(): string[];
}
/** Gets a unique option item ID. If the requested ID is already taken, returns a unique ID based on the requested ID. */
export declare const useOptionsItemId: (requestedId?: string, idManager?: OptionsItemIdManager) => {
    registeredId: string | undefined;
    idError: string | undefined;
};
/**
 * Hook that creates and returns an OptionsItemIdManager instance to manage unique IDs.
 *
 * This hook is useful for components that need to track and manage a collection of unique IDs,
 * such as select options, radio groups, checkbox groups, etc. It handles the registration and
 * unregistration of IDs, ensuring uniqueness and providing notifications when the collection changes.
 *
 * @param callback - A function that will be called with the current IDs when they change.
 * @param existing - An existing OptionsItemIdManager instance to use. If not provided, a new instance will be created.
 */
export declare function useIdManager(callback: (ids: string[]) => void, existing?: OptionsItemIdManager): OptionsItemIdManager;
export {};
