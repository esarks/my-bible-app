import { type CodeComponentMeta } from "@plasmicapp/host";
import registerComponent from "@plasmicapp/host/registerComponent";
import React from "react";
import { InputProps, TextAreaProps } from "react-aria-components";
export type HasControlContextData<T = BaseControlContextData> = {
    setControlContextData?: (ctxData: T) => void;
};
export declare const isBrowser: boolean;
export declare const useIsomorphicLayoutEffect: typeof React.useLayoutEffect;
export type PlasmicCanvasProps = {
    plasmicNotifyAutoOpenedContent?: () => void;
    __plasmic_selection_prop__?: {
        isSelected: boolean;
        selectedSlotName?: string;
    };
};
export type ControlContextData = {
    isDisabled?: boolean;
    isReadOnly?: boolean;
};
export type BaseControlContextData = {
    parent?: ControlContextData;
};
export type BaseControlContextDataForLists = {
    itemIds: string[];
};
export type Registerable = {
    registerComponent: typeof registerComponent;
};
export type OtherCodeComponentsMeta = {
    text: CodeComponentMeta<any>;
    description: CodeComponentMeta<any>;
};
export type CodeComponentMetaOverrides<T extends React.ComponentType<any>> = Partial<Pick<CodeComponentMeta<React.ComponentProps<T>>, "parentComponentName" | "props" | "displayName" | "name">>;
/**
 * This hook determines whether an overlay should be open or not. Unlike `useAutoOpen`, it does not perform any actions.
 * It takes into account the following:
 * 1. Whether the overlay is in canvas or preview.
 * 2. Whether the overlay is selected on canvas
 * 3. Whether the overlay's trigger slot is selected on canvas
 */
export declare function useIsOpen({ triggerSlotName, isOpen, props, }: {
    triggerSlotName?: string;
    isOpen?: boolean;
    props: PlasmicCanvasProps;
}): boolean | undefined;
/**
 * This hook is used to perform open/close actions on an overlay. It takes into account the following:
 * 1. Whether the overlay is in canvas or preview.
 * 2. Whether the overlay is selected on canvas
 */
export declare function useAutoOpen({ props, open, close, }: {
    props: PlasmicCanvasProps;
    open?: () => void;
    close?: () => void;
}): void;
export declare function registerComponentHelper<T extends React.ComponentType<any>>(loader: Registerable | undefined, component: T, meta: CodeComponentMeta<React.ComponentProps<T>>, overrides?: CodeComponentMetaOverrides<T>): CodeComponentMeta<React.ComponentProps<T>>;
export declare function makeComponentName(name: string): string;
export declare function makeChildComponentName(fullParentName: string | undefined, fullChildName: string): string;
export interface Styleable {
    className?: string;
    style?: React.CSSProperties;
}
export declare function extractPlasmicDataProps(props: Record<string, any>): {
    [k: string]: any;
};
export declare function withoutNils<T>(array: (T | undefined | null)[]): T[];
export declare function isDefined<T>(thing: T | undefined | null): thing is T;
export declare function filterHoverProps<T extends TextAreaProps | InputProps>(props: T): Omit<T, "onHoverStart" | "onHoverChange" | "onHoverEnd">;
