import React from 'react';
import { Radio, RadioGroup } from 'react-aria-components';
import { g as getCommonProps, C as COMMON_STYLES } from './common-3fde23cc.esm.js';
import { e as PlasmicRadioGroupContext } from './contexts-5cb81c2f.esm.js';
import { a as useOptionsItemId } from './OptionsItemIdManager-724ffca2.esm.js';
import { LABEL_COMPONENT_NAME } from './registerLabel.esm.js';
import { r as registerComponentHelper, m as makeComponentName } from './utils-b68e14cf.esm.js';
import { p as pickAriaComponentVariants } from './variant-utils-4405ebb0.esm.js';
import '@plasmicapp/host';
import '@plasmicapp/host/registerComponent';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const RADIO_VARIANTS = [
  "selected",
  "hovered",
  "pressed",
  "focused",
  "focusVisible",
  "disabled",
  "readonly",
  "selected"
];
const { variants, withObservedValues } = pickAriaComponentVariants(RADIO_VARIANTS);
function BaseRadio(props) {
  const _a = props, {
    children,
    setControlContextData,
    plasmicUpdateVariant,
    value
  } = _a, rest = __objRest(_a, [
    "children",
    "setControlContextData",
    "plasmicUpdateVariant",
    "value"
  ]);
  const contextProps = React.useContext(PlasmicRadioGroupContext);
  const isStandalone = !contextProps;
  const { registeredId, idError } = useOptionsItemId(
    value,
    contextProps == null ? void 0 : contextProps.idManager
  );
  setControlContextData == null ? void 0 : setControlContextData({
    parent: contextProps,
    idError
  });
  const radio = /* @__PURE__ */ React.createElement(
    Radio,
    __spreadProps(__spreadValues({}, rest), {
      value: registeredId != null ? registeredId : "",
      key: registeredId,
      style: COMMON_STYLES
    }),
    ({
      isHovered,
      isPressed,
      isFocused,
      isFocusVisible,
      isSelected,
      isDisabled,
      isReadOnly
    }) => withObservedValues(
      children,
      {
        hovered: isHovered,
        pressed: isPressed,
        focused: isFocused,
        focusVisible: isFocusVisible,
        selected: isSelected,
        disabled: isDisabled,
        readonly: isReadOnly
      },
      plasmicUpdateVariant
    )
  );
  if (isStandalone) {
    return /* @__PURE__ */ React.createElement(RadioGroup, null, radio);
  }
  return radio;
}
const makeDefaultRadioChildren = (label) => ({
  type: "hbox",
  styles: {
    display: "flex",
    alignItems: "center",
    gap: "10px",
    padding: 0
  },
  children: [
    {
      type: "box",
      styles: {
        width: "7px",
        height: "7px",
        borderRadius: "100%",
        borderWidth: "1px",
        borderStyle: "solid",
        borderColor: "black"
      }
    },
    {
      type: "component",
      name: LABEL_COMPONENT_NAME,
      props: {
        children: {
          type: "text",
          value: label
        }
      }
    }
  ]
});
function registerRadio(loader, overrides) {
  return registerComponentHelper(
    loader,
    BaseRadio,
    {
      name: makeComponentName("radio"),
      displayName: "Aria Radio",
      importPath: "@plasmicpkgs/react-aria/skinny/registerRadio",
      importName: "BaseRadio",
      variants,
      props: __spreadProps(__spreadValues({}, getCommonProps("radio", [
        "isDisabled",
        "autoFocus",
        "aria-label"
      ])), {
        children: {
          type: "slot",
          mergeWithParent: true,
          defaultValue: makeDefaultRadioChildren("Radio")
        },
        value: {
          type: "string",
          description: "The value of the input element, used when submitting an HTML form.",
          validator: (_value, _props, ctx) => {
            if (ctx == null ? void 0 : ctx.idError) {
              return ctx.idError;
            }
            return true;
          }
        }
      }),
      trapsFocus: true
    },
    overrides
  );
}

export { BaseRadio, makeDefaultRadioChildren, registerRadio };
//# sourceMappingURL=registerRadio.esm.js.map
