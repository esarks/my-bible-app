{"version":3,"file":"utils-88dd1a55.cjs.js","sources":["../src/utils.ts"],"sourcesContent":["import {\n  usePlasmicCanvasComponentInfo,\n  usePlasmicCanvasContext,\n  type CodeComponentMeta,\n} from \"@plasmicapp/host\";\nimport registerComponent from \"@plasmicapp/host/registerComponent\";\nimport React, { useEffect } from \"react\";\nimport { InputProps, TextAreaProps } from \"react-aria-components\";\n\nexport type HasControlContextData<T = BaseControlContextData> = {\n  setControlContextData?: (ctxData: T) => void;\n};\n\nexport const isBrowser = typeof window !== \"undefined\";\n\nexport const useIsomorphicLayoutEffect = isBrowser\n  ? React.useLayoutEffect\n  : React.useEffect;\n\nexport type PlasmicCanvasProps = {\n  plasmicNotifyAutoOpenedContent?: () => void;\n  __plasmic_selection_prop__?: {\n    isSelected: boolean;\n    selectedSlotName?: string;\n  };\n};\n\nexport type ControlContextData = {\n  isDisabled?: boolean;\n  isReadOnly?: boolean;\n};\n\nexport type BaseControlContextData = {\n  parent?: ControlContextData;\n};\n\nexport type BaseControlContextDataForLists = {\n  itemIds: string[];\n};\n\nexport type Registerable = {\n  registerComponent: typeof registerComponent;\n};\n\nexport type OtherCodeComponentsMeta = {\n  text: CodeComponentMeta<any>;\n  description: CodeComponentMeta<any>;\n};\n\nexport type CodeComponentMetaOverrides<T extends React.ComponentType<any>> =\n  Partial<\n    Pick<\n      CodeComponentMeta<React.ComponentProps<T>>,\n      \"parentComponentName\" | \"props\" | \"displayName\" | \"name\"\n    >\n  >;\n\n/**\n * This hook determines whether an overlay should be open or not. Unlike `useAutoOpen`, it does not perform any actions.\n * It takes into account the following:\n * 1. Whether the overlay is in canvas or preview.\n * 2. Whether the overlay is selected on canvas\n * 3. Whether the overlay's trigger slot is selected on canvas\n */\nexport function useIsOpen({\n  triggerSlotName,\n  isOpen,\n  props,\n}: {\n  triggerSlotName?: string;\n  isOpen?: boolean;\n  props: PlasmicCanvasProps;\n}) {\n  const { __plasmic_selection_prop__, plasmicNotifyAutoOpenedContent } = props;\n  const canvasContext = usePlasmicCanvasContext();\n  const { isSelected, selectedSlotName } =\n    usePlasmicCanvasComponentInfo?.({ __plasmic_selection_prop__ }) ?? {};\n\n  // In preview, just use the isOpen prop as is.\n  if (!canvasContext) {\n    return isOpen;\n  }\n\n  // In canvas, override the isOpen prop if the element is selected.\n  const isTriggerSlotSelected =\n    isDefined(selectedSlotName) && selectedSlotName === triggerSlotName;\n\n  const isAutoOpenedBySelection = isSelected && !isTriggerSlotSelected;\n\n  if (isAutoOpenedBySelection && !isOpen) {\n    plasmicNotifyAutoOpenedContent?.();\n  }\n  // Component should always be controlled in canvas\n  return Boolean(isAutoOpenedBySelection || isOpen);\n}\n\n/**\n * This hook is used to perform open/close actions on an overlay. It takes into account the following:\n * 1. Whether the overlay is in canvas or preview.\n * 2. Whether the overlay is selected on canvas\n */\nexport function useAutoOpen({\n  props,\n  open,\n  close,\n}: {\n  props: PlasmicCanvasProps;\n  open?: () => void;\n  close?: () => void;\n}) {\n  const inPlasmicCanvas = !!usePlasmicCanvasContext();\n  const isSelected =\n    usePlasmicCanvasComponentInfo?.(props)?.isSelected ?? false;\n  const { plasmicNotifyAutoOpenedContent } = props;\n\n  useEffect(() => {\n    // selection in outline tab only matters in canvas\n    if (!inPlasmicCanvas) {\n      return;\n    }\n    if (isSelected) {\n      open?.();\n      plasmicNotifyAutoOpenedContent?.();\n    } else {\n      close?.();\n    }\n  }, [\n    isSelected,\n    inPlasmicCanvas,\n    plasmicNotifyAutoOpenedContent,\n    open,\n    close,\n  ]);\n}\n\nexport function registerComponentHelper<T extends React.ComponentType<any>>(\n  loader: Registerable | undefined,\n  component: T,\n  meta: CodeComponentMeta<React.ComponentProps<T>>,\n  overrides?: CodeComponentMetaOverrides<T>\n) {\n  if (overrides) {\n    meta = {\n      ...meta,\n      ...overrides,\n      props: {\n        ...meta.props,\n        ...overrides.props,\n      },\n    };\n    if (overrides.parentComponentName) {\n      meta.name = makeChildComponentName(\n        overrides.parentComponentName,\n        meta.name\n      );\n    }\n  }\n  if (loader) {\n    loader.registerComponent(component, meta);\n  } else {\n    registerComponent(component, meta);\n  }\n  return meta;\n}\n\nexport function makeComponentName(name: string) {\n  return `plasmic-react-aria-${name}`;\n}\n\nexport function makeChildComponentName(\n  fullParentName: string | undefined,\n  fullChildName: string\n) {\n  if (!fullParentName) {\n    return fullChildName;\n  }\n  return `${fullParentName}-${fullChildName.replace(\n    \"plasmic-react-aria-\",\n    \"\"\n  )}`;\n}\n\nexport interface Styleable {\n  className?: string;\n  style?: React.CSSProperties;\n}\n\nexport function extractPlasmicDataProps(props: Record<string, any>) {\n  return Object.fromEntries(\n    Object.entries(props).filter(([key]) => key.startsWith(\"data-plasmic-\"))\n  );\n}\n\nexport function withoutNils<T>(array: (T | undefined | null)[]) {\n  return array.filter((x): x is T => x != null);\n}\n\nexport function isDefined<T>(thing: T | undefined | null): thing is T {\n  return thing !== undefined && thing !== null;\n}\n\nexport function filterHoverProps<T extends TextAreaProps | InputProps>(\n  props: T\n) {\n  const {\n    onHoverStart: _onHoverStart,\n    onHoverChange: _onHoverChange,\n    onHoverEnd: _onHoverEnd,\n    ...otherProps\n  } = props;\n  return otherProps;\n}\n"],"names":["React","usePlasmicCanvasContext","usePlasmicCanvasComponentInfo","useEffect","registerComponent"],"mappings":"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"}