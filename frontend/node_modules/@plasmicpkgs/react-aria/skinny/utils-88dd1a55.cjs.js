'use strict';

var host = require('@plasmicapp/host');
var registerComponent = require('@plasmicapp/host/registerComponent');
var React = require('react');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var registerComponent__default = /*#__PURE__*/_interopDefault(registerComponent);
var React__default = /*#__PURE__*/_interopDefault(React);

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const isBrowser = typeof window !== "undefined";
const useIsomorphicLayoutEffect = isBrowser ? React__default.default.useLayoutEffect : React__default.default.useEffect;
function useIsOpen({
  triggerSlotName,
  isOpen,
  props
}) {
  var _a, _b;
  const { __plasmic_selection_prop__, plasmicNotifyAutoOpenedContent } = props;
  const canvasContext = host.usePlasmicCanvasContext();
  const { isSelected, selectedSlotName } = (_b = (_a = host.usePlasmicCanvasComponentInfo) == null ? void 0 : _a({ __plasmic_selection_prop__ })) != null ? _b : {};
  if (!canvasContext) {
    return isOpen;
  }
  const isTriggerSlotSelected = isDefined(selectedSlotName) && selectedSlotName === triggerSlotName;
  const isAutoOpenedBySelection = isSelected && !isTriggerSlotSelected;
  if (isAutoOpenedBySelection && !isOpen) {
    plasmicNotifyAutoOpenedContent == null ? void 0 : plasmicNotifyAutoOpenedContent();
  }
  return Boolean(isAutoOpenedBySelection || isOpen);
}
function useAutoOpen({
  props,
  open,
  close
}) {
  var _a, _b, _c;
  const inPlasmicCanvas = !!host.usePlasmicCanvasContext();
  const isSelected = (_c = (_b = (_a = host.usePlasmicCanvasComponentInfo) == null ? void 0 : _a(props)) == null ? void 0 : _b.isSelected) != null ? _c : false;
  const { plasmicNotifyAutoOpenedContent } = props;
  React.useEffect(() => {
    if (!inPlasmicCanvas) {
      return;
    }
    if (isSelected) {
      open == null ? void 0 : open();
      plasmicNotifyAutoOpenedContent == null ? void 0 : plasmicNotifyAutoOpenedContent();
    } else {
      close == null ? void 0 : close();
    }
  }, [
    isSelected,
    inPlasmicCanvas,
    plasmicNotifyAutoOpenedContent,
    open,
    close
  ]);
}
function registerComponentHelper(loader, component, meta, overrides) {
  if (overrides) {
    meta = __spreadProps(__spreadValues(__spreadValues({}, meta), overrides), {
      props: __spreadValues(__spreadValues({}, meta.props), overrides.props)
    });
    if (overrides.parentComponentName) {
      meta.name = makeChildComponentName(
        overrides.parentComponentName,
        meta.name
      );
    }
  }
  if (loader) {
    loader.registerComponent(component, meta);
  } else {
    registerComponent__default.default(component, meta);
  }
  return meta;
}
function makeComponentName(name) {
  return `plasmic-react-aria-${name}`;
}
function makeChildComponentName(fullParentName, fullChildName) {
  if (!fullParentName) {
    return fullChildName;
  }
  return `${fullParentName}-${fullChildName.replace(
    "plasmic-react-aria-",
    ""
  )}`;
}
function extractPlasmicDataProps(props) {
  return Object.fromEntries(
    Object.entries(props).filter(([key]) => key.startsWith("data-plasmic-"))
  );
}
function isDefined(thing) {
  return thing !== void 0 && thing !== null;
}
function filterHoverProps(props) {
  const _a = props, otherProps = __objRest(_a, [
    "onHoverStart",
    "onHoverChange",
    "onHoverEnd"
  ]);
  return otherProps;
}

exports.extractPlasmicDataProps = extractPlasmicDataProps;
exports.filterHoverProps = filterHoverProps;
exports.isDefined = isDefined;
exports.makeChildComponentName = makeChildComponentName;
exports.makeComponentName = makeComponentName;
exports.registerComponentHelper = registerComponentHelper;
exports.useAutoOpen = useAutoOpen;
exports.useIsOpen = useIsOpen;
exports.useIsomorphicLayoutEffect = useIsomorphicLayoutEffect;
//# sourceMappingURL=utils-88dd1a55.cjs.js.map
