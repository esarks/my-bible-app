{"version":3,"file":"registerRadio.cjs.js","sources":["../src/registerRadio.tsx"],"sourcesContent":["import { PlasmicElement } from \"@plasmicapp/host\";\nimport React from \"react\";\nimport type { RadioProps } from \"react-aria-components\";\nimport { Radio, RadioGroup } from \"react-aria-components\";\nimport { COMMON_STYLES, getCommonProps } from \"./common\";\nimport { PlasmicRadioGroupContext } from \"./contexts\";\nimport { useOptionsItemId } from \"./OptionsItemIdManager\";\nimport { LABEL_COMPONENT_NAME } from \"./registerLabel\";\nimport {\n  BaseControlContextData,\n  CodeComponentMetaOverrides,\n  HasControlContextData,\n  Registerable,\n  makeComponentName,\n  registerComponentHelper,\n} from \"./utils\";\nimport { WithVariants, pickAriaComponentVariants } from \"./variant-utils\";\n\nconst RADIO_VARIANTS = [\n  \"selected\" as const,\n  \"hovered\" as const,\n  \"pressed\" as const,\n  \"focused\" as const,\n  \"focusVisible\" as const,\n  \"disabled\" as const,\n  \"readonly\" as const,\n  \"selected\" as const,\n];\n\nexport interface BaseRadioControlContextData extends BaseControlContextData {\n  idError?: string;\n}\n\nexport interface BaseRadioProps\n  extends RadioProps,\n    HasControlContextData<BaseRadioControlContextData>,\n    WithVariants<typeof RADIO_VARIANTS> {\n  children: React.ReactNode;\n}\n\nconst { variants, withObservedValues } =\n  pickAriaComponentVariants(RADIO_VARIANTS);\n\nexport function BaseRadio(props: BaseRadioProps) {\n  const {\n    children,\n    setControlContextData,\n    plasmicUpdateVariant,\n    value,\n    ...rest\n  } = props;\n  const contextProps = React.useContext(PlasmicRadioGroupContext);\n  const isStandalone = !contextProps;\n  const { registeredId, idError } = useOptionsItemId(\n    value,\n    contextProps?.idManager\n  );\n\n  setControlContextData?.({\n    parent: contextProps,\n    idError,\n  });\n\n  const radio = (\n    <Radio\n      {...rest}\n      value={registeredId ?? \"\"}\n      key={registeredId}\n      style={COMMON_STYLES}\n    >\n      {({\n        isHovered,\n        isPressed,\n        isFocused,\n        isFocusVisible,\n        isSelected,\n        isDisabled,\n        isReadOnly,\n      }) =>\n        withObservedValues(\n          children,\n          {\n            hovered: isHovered,\n            pressed: isPressed,\n            focused: isFocused,\n            focusVisible: isFocusVisible,\n            selected: isSelected,\n            disabled: isDisabled,\n            readonly: isReadOnly,\n          },\n          plasmicUpdateVariant\n        )\n      }\n    </Radio>\n  );\n\n  if (isStandalone) {\n    return <RadioGroup>{radio}</RadioGroup>;\n  }\n\n  return radio;\n}\n\nexport const makeDefaultRadioChildren = (label: string): PlasmicElement => ({\n  type: \"hbox\",\n  styles: {\n    display: \"flex\",\n    alignItems: \"center\",\n    gap: \"10px\",\n    padding: 0,\n  },\n  children: [\n    {\n      type: \"box\",\n      styles: {\n        width: \"7px\",\n        height: \"7px\",\n        borderRadius: \"100%\",\n        borderWidth: \"1px\",\n        borderStyle: \"solid\",\n        borderColor: \"black\",\n      },\n    },\n    {\n      type: \"component\",\n      name: LABEL_COMPONENT_NAME,\n      props: {\n        children: {\n          type: \"text\",\n          value: label,\n        },\n      },\n    },\n  ],\n});\n\nexport function registerRadio(\n  loader?: Registerable,\n  overrides?: CodeComponentMetaOverrides<typeof BaseRadio>\n) {\n  return registerComponentHelper(\n    loader,\n    BaseRadio,\n    {\n      name: makeComponentName(\"radio\"),\n      displayName: \"Aria Radio\",\n      importPath: \"@plasmicpkgs/react-aria/skinny/registerRadio\",\n      importName: \"BaseRadio\",\n      variants,\n      props: {\n        ...getCommonProps<BaseRadioProps>(\"radio\", [\n          \"isDisabled\",\n          \"autoFocus\",\n          \"aria-label\",\n        ]),\n        children: {\n          type: \"slot\",\n          mergeWithParent: true,\n          defaultValue: makeDefaultRadioChildren(\"Radio\"),\n        },\n        value: {\n          type: \"string\",\n          description:\n            \"The value of the input element, used when submitting an HTML form.\",\n          validator: (_value, _props, ctx) => {\n            if (ctx?.idError) {\n              return ctx.idError;\n            }\n            return true;\n          },\n        },\n      },\n      trapsFocus: true,\n    },\n    overrides\n  );\n}\n"],"names":["pickAriaComponentVariants","React","PlasmicRadioGroupContext","useOptionsItemId","Radio","COMMON_STYLES","RadioGroup","LABEL_COMPONENT_NAME","registerComponentHelper","makeComponentName","getCommonProps"],"mappings":"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"}