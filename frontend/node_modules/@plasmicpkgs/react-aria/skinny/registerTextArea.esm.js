import React, { useEffect } from 'react';
import { useHover, useFocusRing, mergeProps } from 'react-aria';
import { useContextProps, TextAreaContext } from 'react-aria-components';
import { C as COMMON_STYLES, g as getCommonProps } from './common-3fde23cc.esm.js';
import { g as PlasmicTextFieldContext } from './contexts-5cb81c2f.esm.js';
import { f as filterHoverProps, i as isDefined, r as registerComponentHelper, m as makeComponentName } from './utils-b68e14cf.esm.js';
import { p as pickAriaComponentVariants } from './variant-utils-4405ebb0.esm.js';
import '@plasmicapp/host';
import '@plasmicapp/host/registerComponent';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const TEXTAREA_VARIANTS = [
  "focused",
  "focusVisible",
  "hovered",
  "disabled"
];
const { variants } = pickAriaComponentVariants(TEXTAREA_VARIANTS);
const inputHelpers = {
  states: {
    value: {
      onChangeArgsToValue: (e) => {
        return e.target.value;
      }
    }
  }
};
function BaseTextArea_(props, ref) {
  const _a = props, {
    className,
    plasmicUpdateVariant,
    setControlContextData,
    value
  } = _a, restProps = __objRest(_a, [
    "className",
    "plasmicUpdateVariant",
    "setControlContextData",
    "value"
  ]);
  const textFieldContext = React.useContext(PlasmicTextFieldContext);
  const [textAreaContextProps, textAreaRef] = useContextProps(
    restProps,
    ref,
    TextAreaContext
  );
  const { hoverProps, isHovered } = useHover(textAreaContextProps);
  const { isFocused, isFocusVisible, focusProps } = useFocusRing({
    isTextInput: true,
    autoFocus: textAreaContextProps.autoFocus
  });
  const mergedProps = mergeProps(
    filterHoverProps(textAreaContextProps),
    focusProps,
    hoverProps,
    {
      value: isDefined(textFieldContext) ? void 0 : value,
      style: COMMON_STYLES,
      className
    }
  );
  const isDisabled = mergedProps.disabled || false;
  const isInvalid = !!mergedProps["aria-invalid"] && mergedProps["aria-invalid"] !== "false";
  setControlContextData == null ? void 0 : setControlContextData({
    parent: textFieldContext
  });
  useEffect(() => {
    if (plasmicUpdateVariant) {
      plasmicUpdateVariant({
        disabled: isDisabled,
        focused: isFocused,
        focusVisible: isFocusVisible,
        hovered: isHovered
      });
    }
  }, [isFocused, isFocusVisible, isHovered, isDisabled, plasmicUpdateVariant]);
  return /* @__PURE__ */ React.createElement(
    "textarea",
    __spreadProps(__spreadValues({}, mergedProps), {
      ref: textAreaRef,
      "data-focused": isFocused || void 0,
      "data-disabled": isDisabled || void 0,
      "data-hovered": isHovered || void 0,
      "data-focus-visible": isFocusVisible || void 0,
      "data-invalid": isInvalid || void 0
    })
  );
}
const BaseTextArea = React.forwardRef(BaseTextArea_);
function registerTextArea(loader, overrides) {
  registerComponentHelper(
    loader,
    BaseTextArea,
    {
      name: makeComponentName("textarea"),
      displayName: "Aria TextArea",
      importPath: "@plasmicpkgs/react-aria/skinny/registerTextArea",
      importName: "BaseTextArea",
      variants,
      props: __spreadValues({}, getCommonProps("Text Area", [
        "name",
        "disabled",
        "readOnly",
        "autoFocus",
        "aria-label",
        "required",
        "placeholder",
        "value",
        "maxLength",
        "minLength",
        "inputMode",
        "onChange",
        "onFocus",
        "onBlur",
        "onKeyDown",
        "onKeyUp",
        "onCopy",
        "onCut",
        "onPaste",
        "onCompositionStart",
        "onCompositionEnd",
        "onCompositionUpdate",
        "onSelect",
        "onBeforeInput",
        "onInput"
      ])),
      states: {
        value: __spreadValues({
          type: "writable",
          valueProp: "value",
          onChangeProp: "onChange",
          variableType: "text"
        }, inputHelpers.states.value)
      },
      componentHelpers: {
        helpers: inputHelpers,
        importName: "inputHelpers",
        importPath: "@plasmicpkgs/react-aria/skinny/registerTextArea"
      }
    },
    overrides
  );
}

export { BaseTextArea, inputHelpers, registerTextArea };
//# sourceMappingURL=registerTextArea.esm.js.map
