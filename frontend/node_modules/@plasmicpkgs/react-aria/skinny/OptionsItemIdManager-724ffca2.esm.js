import { useState, useMemo, useEffect } from 'react';
import { c as useIsomorphicLayoutEffect } from './utils-b68e14cf.esm.js';

class OptionsItemIdManager {
  constructor() {
    this._ids = /* @__PURE__ */ new Set();
    this._observers = /* @__PURE__ */ new Set();
  }
  generateDuplicateId(id, count = 1) {
    const dupId = `${id} duplicate(${count})`;
    if (this._ids.has(dupId)) {
      return this.generateDuplicateId(id, count + 1);
    } else {
      return dupId;
    }
  }
  generateMissingId(count = 1) {
    const missingId = `missing(${count})`;
    if (this._ids.has(missingId)) {
      return this.generateMissingId(count + 1);
    } else {
      return missingId;
    }
  }
  register(id) {
    const idStr = id === void 0 ? void 0 : String(id).trim();
    let newId;
    if (!idStr) {
      newId = this.generateMissingId();
    } else if (this._ids.has(idStr)) {
      newId = this.generateDuplicateId(idStr);
    } else {
      newId = idStr;
    }
    this._ids.add(newId);
    this.notify();
    return newId;
  }
  unregister(id) {
    this._ids.delete(id);
    this.notify();
  }
  subscribe(observer) {
    this._observers.add(observer);
    observer(this.ids);
  }
  unsubscribe(observer) {
    this._observers.delete(observer);
  }
  // Notify all observers about an event.
  notify() {
    this._observers.forEach((observer) => observer(this.ids));
  }
  get ids() {
    return Array.from(this._ids);
  }
}
const useOptionsItemId = (requestedId, idManager) => {
  const [registeredId, setRegisteredId] = useState();
  useIsomorphicLayoutEffect(() => {
    if (!idManager) {
      return;
    }
    const localId = idManager.register(requestedId);
    setRegisteredId(localId);
    return () => {
      if (localId) {
        idManager.unregister(localId);
      }
    };
  }, [requestedId, idManager]);
  return {
    registeredId,
    idError: (() => {
      if (requestedId === void 0) {
        return "Value must be defined";
      }
      if (typeof requestedId !== "string") {
        return "Value must be a string";
      }
      if (!requestedId.trim()) {
        return "Value must be defined";
      }
      if (idManager && requestedId != registeredId) {
        return "Value must be unique";
      }
      return void 0;
    })()
  };
};
function useIdManager(callback, existing) {
  const idManager = useMemo(
    () => existing != null ? existing : new OptionsItemIdManager(),
    [existing]
  );
  useEffect(() => {
    idManager.subscribe(callback);
    return () => {
      idManager.unsubscribe(callback);
    };
  }, [idManager, callback]);
  return idManager;
}

export { useOptionsItemId as a, useIdManager as u };
//# sourceMappingURL=OptionsItemIdManager-724ffca2.esm.js.map
