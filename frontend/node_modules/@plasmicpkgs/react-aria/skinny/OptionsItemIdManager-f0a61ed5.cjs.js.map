{"version":3,"file":"OptionsItemIdManager-f0a61ed5.cjs.js","sources":["../src/OptionsItemIdManager.ts"],"sourcesContent":["import { useEffect, useMemo, useState } from \"react\";\nimport { useIsomorphicLayoutEffect } from \"./utils\";\n\ntype Observer = (ids: string[]) => void;\n\n/** Ensures option item IDs are unique. */\nexport class OptionsItemIdManager {\n  private readonly _ids: Set<string> = new Set();\n  private readonly _observers: Set<Observer> = new Set();\n\n  private generateDuplicateId(id: string, count = 1): string {\n    const dupId = `${id} duplicate(${count})`;\n    if (this._ids.has(dupId)) {\n      return this.generateDuplicateId(id, count + 1);\n    } else {\n      return dupId;\n    }\n  }\n\n  private generateMissingId(count = 1): string {\n    const missingId = `missing(${count})`;\n    if (this._ids.has(missingId)) {\n      return this.generateMissingId(count + 1);\n    } else {\n      return missingId;\n    }\n  }\n\n  register(id?: unknown): string {\n    const idStr = id === undefined ? undefined : String(id).trim();\n    let newId: string;\n\n    if (!idStr) {\n      // No id is provided, so generate one\n      newId = this.generateMissingId();\n    } else if (this._ids.has(idStr)) {\n      // The provided id is already registered with another uuid (i.e. it's not unique), so just generate a new one\n      newId = this.generateDuplicateId(idStr);\n    } else {\n      // The provided id is not already registered, so use it\n      newId = idStr;\n    }\n\n    this._ids.add(newId);\n    this.notify();\n    return newId;\n  }\n\n  unregister(id: string) {\n    this._ids.delete(id);\n    this.notify();\n  }\n\n  subscribe(observer: Observer) {\n    this._observers.add(observer);\n    observer(this.ids);\n  }\n\n  unsubscribe(observer: Observer) {\n    this._observers.delete(observer);\n  }\n\n  // Notify all observers about an event.\n  notify() {\n    this._observers.forEach((observer) => observer(this.ids));\n  }\n\n  get ids(): string[] {\n    return Array.from(this._ids);\n  }\n}\n\n/** Gets a unique option item ID. If the requested ID is already taken, returns a unique ID based on the requested ID. */\nexport const useOptionsItemId = (\n  requestedId?: string,\n  idManager?: OptionsItemIdManager\n) => {\n  const [registeredId, setRegisteredId] = useState<string | undefined>();\n\n  useIsomorphicLayoutEffect(() => {\n    if (!idManager) {\n      return;\n    }\n\n    const localId = idManager.register(requestedId);\n    setRegisteredId(localId);\n    return () => {\n      if (localId) {\n        idManager.unregister(localId);\n      }\n    };\n  }, [requestedId, idManager]);\n\n  return {\n    registeredId,\n    idError: (() => {\n      if (requestedId === undefined) {\n        return \"Value must be defined\";\n      }\n      if (typeof requestedId !== \"string\") {\n        return \"Value must be a string\";\n      }\n      if (!requestedId.trim()) {\n        return \"Value must be defined\";\n      }\n      if (idManager && requestedId != registeredId) {\n        return \"Value must be unique\";\n      }\n      return undefined;\n    })(),\n  };\n};\n\n/**\n * Hook that creates and returns an OptionsItemIdManager instance to manage unique IDs.\n *\n * This hook is useful for components that need to track and manage a collection of unique IDs,\n * such as select options, radio groups, checkbox groups, etc. It handles the registration and\n * unregistration of IDs, ensuring uniqueness and providing notifications when the collection changes.\n *\n * @param callback - A function that will be called with the current IDs when they change.\n * @param existing - An existing OptionsItemIdManager instance to use. If not provided, a new instance will be created.\n */\nexport function useIdManager(\n  callback: (ids: string[]) => void,\n  existing?: OptionsItemIdManager\n) {\n  const idManager = useMemo(\n    () => existing ?? new OptionsItemIdManager(),\n    [existing]\n  );\n\n  useEffect(() => {\n    idManager.subscribe(callback);\n\n    return () => {\n      idManager.unsubscribe(callback);\n    };\n  }, [idManager, callback]);\n\n  return idManager;\n}\n"],"names":["useState","useIsomorphicLayoutEffect","useMemo","useEffect"],"mappings":"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"}