import type { DataOp, TableSchema } from "@plasmicapp/data-sources";
import { CodeComponentMode, ComponentHelpers } from "@plasmicapp/host";
import { CanvasComponentProps } from "@plasmicapp/host/registerComponent";
import type { FormInstance, FormProps } from "antd/es/form";
import React from "react";
import { CommonFormControlContextData } from "./contexts";
import { InternalFormItemProps } from "./FormItem";
export declare enum InputType {
    Text = "Text",
    TextArea = "Text Area",
    Password = "Password",
    Number = "Number",
    Select = "Select",
    Option = "Option",
    OptionGroup = "Option Group",
    Radio = "Radio",
    RadioGroup = "Radio Group",
    Checkbox = "Checkbox",
    DatePicker = "DatePicker",
    Unknown = "Unkown"
}
export declare const SchemaFormContext: React.Context<{
    schema?: TableSchema | undefined;
    minimalFullLengthFields?: Partial<SimplifiedFormItemsProp>[] | undefined;
    mergedFields?: SimplifiedFormItemsProp[] | undefined;
} | undefined>;
export interface SimplifiedFormItemsProp extends InternalFormItemProps {
    inputType: InputType;
    options?: {
        label: string;
        value: string;
    }[];
    optionType?: "default" | "button";
    showTime?: boolean;
    key?: string;
}
export interface FormWrapperControlContextData extends CommonFormControlContextData {
    formInstance?: FormInstance<any>;
    schema?: TableSchema;
    minimalFullLengthFields?: Partial<SimplifiedFormItemsProp>[];
    mergedFields?: SimplifiedFormItemsProp[];
}
export declare enum FormType {
    NewEntry = 0,
    UpdateEntry = 1
}
export interface FormWrapperProps extends FormProps, CanvasComponentProps<FormWrapperControlContextData> {
    /**
     * https://ant.design/components/form#setfieldsvalue-do-not-trigger-onfieldschange-or-onvalueschange
     * Because setFieldsValue doesn't trigger onValuesChange, we need to create our own onChange function.
     * This will allow us to trigger the onChange function and keep the value state updated in canvas.
     * We also don't invoke onValuesChange to avoid changing the standard behavior, since users may have
     * overridden this function in their codebase
     **/
    extendedOnValuesChange?: (values: Parameters<NonNullable<FormProps["onValuesChange"]>>[1]) => void;
    formItems?: SimplifiedFormItemsProp[];
    dataFormItems?: SimplifiedFormItemsProp[];
    mode?: CodeComponentMode;
    formType?: "new-entry" | "update-entry";
    submitSlot?: React.ReactNode;
    data?: DataOp;
    autoDisableWhileSubmitting?: boolean;
    onIsSubmittingChange?: (isSubmitting: boolean) => void;
}
export interface FormRefActions extends Pick<FormInstance<any>, "setFieldsValue" | "resetFields" | "setFieldValue" | "validateFields"> {
    clearFields: () => void;
    formInstance: FormInstance<any>;
}
export declare const FormWrapper: React.ForwardRefExoticComponent<FormWrapperProps & React.RefAttributes<FormRefActions>>;
export declare const formHelpers: ComponentHelpers<FormWrapperProps>;
export declare const OPTIMIZED_FORM_IMPORT: {
    name: string;
    path: string;
};
