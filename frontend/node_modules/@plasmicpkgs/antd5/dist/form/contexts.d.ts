import { Form, type FormInstance, type FormItemProps } from "antd";
import React from "react";
export declare const PathContext: React.Context<{
    relativePath: (string | number)[];
    fullPath: (string | number)[];
}>;
export declare const useFormItemRelativeName: (name: FormItemProps["name"]) => any[] | undefined;
export declare const useFormItemFullName: (name: FormItemProps["name"]) => any[] | undefined;
export declare function useFormInstanceMaybe(): FormInstance<any> | undefined;
export interface FieldEntity {
    fullPath: (string | number)[];
    name: string | number | undefined;
    preserve: boolean;
}
/**
 * - registeredFields: current mounted form fields
 * - preservedRegisteredFields: all fields that were registered and were marked as NOT preserve
 */
export interface InternalFieldCtx {
    registeredFields: FieldEntity[];
    preservedRegisteredFields: FieldEntity[];
}
export interface CommonFormControlContextData {
    formInstance?: FormInstance<any>;
    layout?: FormLayoutContextValue;
    internalFieldCtx?: InternalFieldCtx;
}
export interface InternalFormInstanceContext extends CommonFormControlContextData {
    fireOnValuesChange: () => void;
    forceRemount: () => void;
    registerField: (fieldEntity: FieldEntity) => () => void;
    internalFieldCtx: InternalFieldCtx;
    initialValues: Record<string, any>;
}
export declare const InternalFormInstanceContext: React.Context<InternalFormInstanceContext | undefined>;
export interface FormLayoutContextValue {
    layout: React.ComponentProps<typeof Form>["layout"];
    labelSpan?: number;
}
export declare const FormLayoutContext: React.Context<FormLayoutContextValue | undefined>;
