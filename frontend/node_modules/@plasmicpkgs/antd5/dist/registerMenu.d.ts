/// <reference types="react" />
import { Menu as AntdMenu } from "antd";
import { Registerable } from "./utils";
export { AntdMenu };
export declare const AntdMenuDivider: import("react").FC<import("antd/es/menu").MenuDividerProps>;
export declare const AntdMenuItem: Omit<import("react").FunctionComponent<import("antd").MenuItemProps>, ""> & (<T extends import("antd").MenuItemProps>(props: T extends infer U extends import("antd").MenuItemProps ? unknown extends U ? import("antd").MenuItemProps : U : import("antd").MenuItemProps, context?: any) => import("react").ReactNode);
export declare const AntdMenuItemGroup: typeof AntdMenu.ItemGroup;
export declare const AntdSubMenu: import("react").FC<import("antd").SubMenuProps>;
export declare const MENU_ITEM_TYPE: {
    type: string;
    nameFunc: (item: any) => any;
    fields: {
        type: {
            type: string;
            options: {
                value: string;
                label: string;
            }[];
            defaultValue: string;
        };
        key: {
            type: string;
            displayName: string;
            description: string;
            hidden: (ps: any, ctx: any, { item }: any) => boolean;
        };
        label: {
            type: string;
            description: string;
            hidden: (ps: any, ctx: any, { item }: any) => boolean;
        };
        children: {
            type: string;
            displayName: string;
            hidden: (ps: any, ctx: any, { item }: any) => boolean;
        };
        onClick: {
            type: string;
            displayName: string;
            description: string;
            argTypes: {
                name: string;
                type: string;
            }[];
            hidden: (ps: any, ctx: any, { item }: any) => boolean;
        };
    };
};
export declare const UNKEYED_MENU_ITEM_TYPE: {
    fields: {
        [k: string]: {
            type: string;
            options: {
                value: string;
                label: string;
            }[];
            defaultValue: string;
        } | {
            type: string;
            displayName: string;
            description: string;
            hidden: (ps: any, ctx: any, { item }: any) => boolean;
        } | {
            type: string;
            description: string;
            hidden: (ps: any, ctx: any, { item }: any) => boolean;
        } | {
            type: string;
            displayName: string;
            hidden: (ps: any, ctx: any, { item }: any) => boolean;
        } | {
            type: string;
            displayName: string;
            description: string;
            argTypes: {
                name: string;
                type: string;
            }[];
            hidden: (ps: any, ctx: any, { item }: any) => boolean;
        };
    };
    type: string;
    nameFunc: (item: any) => any;
};
/**
 * Note that the Menu component by itself isn't that useful.
 * It is supposed to be a stateful component, but we don't have state yet (for selected, open, etc.).
 *
 * Nor can you make it non-selectable yet and just make it be a list of clickable things.
 *
 * But we also can't get rid of it right now because it's used by Dropdown.
 *
 * Note also that we don't yet support the simpler `items` prop for configuration.
 */
export declare function registerMenu(loader?: Registerable): void;
