{"version":3,"file":"registerTable.esm.js","sources":["../src/registerTable.tsx"],"sourcesContent":["import { Table } from \"antd\";\nimport type { TableRowSelection } from \"antd/es/table/interface\";\nimport React from \"react\";\nimport { asArray, Registerable, registerComponentHelper } from \"./utils\";\n\nexport interface TableRef {\n  selectRowByKey: (key: string) => void;\n  selectRowByIndex: (index: number) => void;\n  selectRowsByKeys: (keys: string[]) => void;\n  selectRowsByIndexes: (indexs: number[]) => void;\n  clearSelection: () => void;\n}\n\nexport const AntdTable = React.forwardRef(function AntdTable(\n  props: React.ComponentProps<typeof Table> & {\n    data: any;\n    rowKey?: string;\n    isSelectable?: undefined | \"single\" | \"multiple\";\n    selectedRowKeys?: string[];\n    defaultSelectedRowKeys?: string[];\n    onSelectedRowKeysChange?: (keys: string[]) => void;\n    onSelectedRowsChange?: (rows: any[]) => void;\n    setControlContextData?: (ctx: any) => void;\n  },\n  ref: React.Ref<TableRef>\n) {\n  const {\n    data,\n    onSelectedRowKeysChange,\n    onSelectedRowsChange,\n    isSelectable,\n    rowKey,\n    setControlContextData,\n    selectedRowKeys,\n    defaultSelectedRowKeys,\n    ...rest\n  } = props;\n  setControlContextData?.(data);\n\n  const isControlled = !!selectedRowKeys;\n  const [uncontrolledSelectedRowKeys, setUncontrolledSelectedRowKeys] =\n    React.useState<string[]>(defaultSelectedRowKeys ?? []);\n  const selection: TableRowSelection<any> | undefined =\n    isSelectable && rowKey\n      ? {\n          onChange: (rowKeys, rows) => {\n            onSelectedRowsChange?.(rows);\n            onSelectedRowKeysChange?.(rowKeys as string[]);\n          },\n          type: isSelectable === \"single\" ? \"radio\" : \"checkbox\",\n          selectedRowKeys: isControlled\n            ? asArray(selectedRowKeys)\n            : uncontrolledSelectedRowKeys,\n        }\n      : undefined;\n\n  React.useImperativeHandle(\n    ref,\n    () => ({\n      selectRowByIndex(index: number) {\n        if (data.data && rowKey) {\n          const row = data.data[index];\n          const rows = row ? [row] : [];\n          this._setSelectedRows(rows);\n        }\n      },\n      selectRowsByIndexes(indexes: number[]) {\n        if (data.data && rowKey) {\n          const rows = indexes.map((x) => data.data[x]).filter((x) => !!x);\n          this._setSelectedRows(rows);\n        }\n      },\n      selectRowByKey(key: string) {\n        if (data.data && rowKey) {\n          const rows = data.data.filter((r: any) => r[rowKey] === key);\n          this._setSelectedRows(rows);\n        }\n      },\n      selectRowsByKeys(keys: string[]) {\n        if (data.data && rowKey) {\n          const rows = data.data.filter((r: any) => keys.includes(r[rowKey]));\n          this._setSelectedRows(rows);\n        }\n      },\n      clearSelection() {\n        this._setSelectedRows([]);\n      },\n      _setSelectedRows(rows: any[]) {\n        onSelectedRowsChange?.(rows);\n        if (rowKey) {\n          onSelectedRowKeysChange?.(rows.map((r) => r[rowKey]));\n        }\n        if (!isControlled) {\n          setUncontrolledSelectedRowKeys(rows.map((r) => r[rowKey!]));\n        }\n      },\n    }),\n    [data, onSelectedRowKeysChange, onSelectedRowsChange, isSelectable, rowKey]\n  );\n  return (\n    <Table\n      loading={data?.isLoading}\n      dataSource={data?.data}\n      rowSelection={selection}\n      rowKey={rowKey}\n      {...rest}\n    />\n  );\n});\n\nexport const AntdColumnGroup = Table.ColumnGroup;\nexport const AntdColumn = Table.Column;\n\n/** @deprecated Use the Table component from plasmic-rich-components instead */\nexport function registerTable(loader?: Registerable) {\n  registerComponentHelper(loader, AntdTable, {\n    name: \"plasmic-antd5-table\",\n    displayName: \"Table (deprecated)\",\n    props: {\n      data: {\n        type: \"dataSourceOpData\" as any,\n        displayName: \"Data\",\n      },\n      children: {\n        type: \"slot\",\n        allowedComponents: [\n          \"plasmic-antd5-table-column\",\n          \"plasmic-antd5-table-column-group\",\n        ],\n      },\n      bordered: {\n        type: \"boolean\",\n        defaultValueHint: false,\n        advanced: true,\n      },\n      isSelectable: {\n        type: \"choice\",\n        options: [\"single\", \"multiple\"],\n        displayName: \"Select rows?\",\n      },\n      rowKey: {\n        type: \"choice\",\n        options: (ps, ctx: any) => {\n          if (ctx.schema) {\n            return ctx.schema.fields.map((f: any) => ({\n              value: f.id,\n              label: f.label || f.id,\n            }));\n          }\n          return [];\n        },\n        hidden: (ps) => !ps.isSelectable,\n      },\n      selectedRowKeys: {\n        type: \"choice\",\n        multiSelect: (ps) => ps.isSelectable === \"multiple\",\n        options: (ps, ctx: any) => {\n          const key = ps.rowKey;\n          if (key && ctx.data) {\n            return ctx.data.map((r: any) => r[key]);\n          }\n          return [];\n        },\n        hidden: (ps) => !ps.rowKey,\n      },\n      onSelectedRowKeysChange: {\n        type: \"eventHandler\",\n        argTypes: [{ name: \"keys\", type: \"object\" }],\n        hidden: (ps) => !ps.isSelectable,\n      },\n      onSelectedRowsChange: {\n        type: \"eventHandler\",\n        argTypes: [{ name: \"rows\", type: \"object\" }],\n        hidden: (ps) => !ps.isSelectable,\n      },\n    },\n    importPath: \"@plasmicpkgs/antd5/skinny/registerTable\",\n    importName: \"AntdTable\",\n    states: {\n      selectedRowKeys: {\n        type: \"writable\",\n        valueProp: \"selectedRowKeys\",\n        onChangeProp: \"onSelectedRowKeysChange\",\n        variableType: \"array\",\n      },\n      // selectedRows: {\n      //   type: \"readonly\",\n      //   onChangeProp: \"onSelectedRowsChange\",\n      // },\n    },\n    refActions: {\n      selectRowByIndex: {\n        displayName: \"Select row by index\",\n        argTypes: [\n          {\n            name: \"index\",\n            displayName: \"Index\",\n            type: \"number\",\n          },\n        ],\n      },\n      selectRowByKey: {\n        displayName: \"Select row by key\",\n        argTypes: [\n          {\n            name: \"key\",\n            displayName: \"Row key\",\n            type: \"string\",\n          },\n        ],\n      },\n    },\n  });\n\n  registerComponentHelper(loader, AntdColumn, {\n    name: \"plasmic-antd5-table-column\",\n    displayName: \"Column\",\n    parentComponentName: \"plasmic-antd5-table\",\n    props: {\n      title: {\n        type: \"slot\",\n        defaultValue: \"Column Name\",\n      },\n      dataIndex: {\n        type: \"string\",\n        displayName: \"Column key\",\n      },\n      render: {\n        type: \"slot\",\n        renderPropParams: [\"cell\", \"row\", \"index\"],\n        hidePlaceholder: true,\n        displayName: \"Custom render\",\n      },\n      align: {\n        type: \"choice\",\n        options: [\"left\", \"right\", \"center\"],\n        defaultValueHint: \"left\",\n      },\n      fixed: {\n        type: \"choice\",\n        options: [\"left\", \"right\"],\n        advanced: true,\n      },\n      colSpan: {\n        type: \"number\",\n        advanced: true,\n      },\n    },\n    importPath: \"@plasmicpkgs/antd5/skinny/registerTable\",\n    importName: \"AntdColumn\",\n    ...({ isRenderless: true } as any),\n  });\n\n  registerComponentHelper(loader, AntdColumnGroup, {\n    name: \"plasmic-antd5-table-column-group\",\n    displayName: \"Column Group\",\n    parentComponentName: \"plasmic-antd5-table\",\n    props: {\n      title: {\n        type: \"slot\",\n        defaultValue: \"Column Group Name\",\n      },\n      children: {\n        type: \"slot\",\n        allowedComponents: [\"plasmic-antd5-table-column\"],\n      },\n    },\n    importPath: \"@plasmicpkgs/antd5/skinny/registerTable\",\n    importName: \"AntdColumnGroup\",\n    ...({ isRenderless: true } as any),\n  });\n}\n"],"names":["AntdTable"],"mappings":"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"}