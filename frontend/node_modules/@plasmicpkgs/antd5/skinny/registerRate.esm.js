import React, { useMemo } from 'react';
import { r as registerComponentHelper } from './utils-5ebcaa63.esm.js';
import { Rate } from 'antd';
import '@plasmicapp/host/registerComponent';
import '@plasmicapp/host/registerGlobalContext';

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
function AntdRate(props) {
  const _a = props, { character, count, tooltips, multiCharacter, symbols } = _a, rest = __objRest(_a, ["character", "count", "tooltips", "multiCharacter", "symbols"]);
  const symbolsProp = useMemo(
    () => {
      var _a2, _b, _c;
      return ((_c = Array.isArray((_a2 = symbols == null ? void 0 : symbols.props) == null ? void 0 : _a2.children) ? (_b = symbols == null ? void 0 : symbols.props) == null ? void 0 : _b.children : [symbols]) == null ? void 0 : _c.filter((c) => React.isValidElement(c)).map((c) => /* @__PURE__ */ React.createElement(React.Fragment, null, c))) || [];
    },
    [symbols]
  );
  const countProp = useMemo(() => {
    if (!multiCharacter)
      return count;
    return symbolsProp == null ? void 0 : symbolsProp.length;
  }, [count, multiCharacter, symbolsProp == null ? void 0 : symbolsProp.length]);
  const characterProp = useMemo(() => {
    if (!multiCharacter)
      return character || void 0;
    return (symbolsProp == null ? void 0 : symbolsProp.length) ? ({ index }) => symbolsProp[index] : character || void 0;
  }, [character, multiCharacter, symbolsProp]);
  return /* @__PURE__ */ React.createElement(
    Rate,
    __spreadValues({
      tooltips: tooltips == null ? void 0 : tooltips.map((t) => t == null ? void 0 : t.label),
      count: countProp,
      character: characterProp
    }, rest)
  );
}
const rateComponentName = "plasmic-antd5-rate";
function registerRate(loader) {
  registerComponentHelper(loader, AntdRate, {
    name: rateComponentName,
    displayName: "Rate",
    props: {
      allowClear: {
        type: "boolean",
        advanced: true,
        defaultValueHint: true,
        description: "Clear the rating when the user clicks again"
      },
      allowHalf: {
        type: "boolean",
        advanced: true,
        defaultValueHint: false,
        description: "Allow fractional rating."
      },
      autoFocus: {
        type: "boolean",
        description: "Focus when component is rendered",
        defaultValueHint: false,
        advanced: true
      },
      character: {
        type: "slot",
        displayName: "Symbol",
        hidePlaceholder: true,
        hidden: (ps) => Boolean(ps.multiCharacter)
      },
      multiCharacter: {
        type: "boolean",
        displayName: "Multi Symbol",
        description: "Allow different symbols for rating. (You can add these symbols in the component slots if this is enabled)",
        advanced: true
      },
      symbols: {
        type: "slot",
        displayName: "Symbols",
        hidePlaceholder: true,
        defaultValue: ["1", "2", "3", "4", "5"],
        hidden: (ps) => !ps.multiCharacter
      },
      count: {
        type: "number",
        description: "Rating count",
        defaultValueHint: 5,
        advanced: true,
        hidden: (ps) => Boolean(ps.multiCharacter)
      },
      value: {
        type: "number",
        editOnly: true,
        uncontrolledProp: "defaultValue",
        description: "Default rating",
        defaultValueHint: 0
      },
      disabled: {
        type: "boolean",
        description: "Read-only rating",
        defaultValueHint: false
      },
      tooltips: {
        type: "array",
        description: "Rating labels",
        displayName: "Labels",
        advanced: true,
        hidden: (ps) => !ps.count,
        itemType: {
          type: "object",
          fields: {
            label: "string"
          },
          nameFunc: (value) => value.label
        },
        validator: (value, ps) => {
          if (!ps.count)
            return true;
          if (!Array.isArray(value) || value.length === 0)
            return true;
          if (value.length < ps.count)
            return `You need ${ps.count - value.length} more labels`;
          if (value.length > ps.count)
            return "You have too many labels. Some labels will not be used";
          return true;
        }
      },
      onChange: {
        type: "eventHandler",
        advanced: true,
        argTypes: [{ name: "value", type: "number" }]
      },
      onBlur: {
        type: "eventHandler",
        advanced: true,
        argTypes: []
      },
      onFocus: {
        type: "eventHandler",
        advanced: true,
        argTypes: []
      },
      onHoverChange: {
        type: "eventHandler",
        advanced: true,
        description: "Callback when an item is hovered",
        argTypes: []
      },
      onKeyDown: {
        type: "eventHandler",
        advanced: true,
        argTypes: [{ name: "event", type: "object" }]
      }
    },
    states: {
      value: {
        type: "writable",
        valueProp: "value",
        onChangeProp: "onChange",
        variableType: "number"
      }
    },
    importPath: "@plasmicpkgs/antd5/skinny/registerRate",
    importName: "AntdRate"
  });
}

export { AntdRate, rateComponentName, registerRate };
//# sourceMappingURL=registerRate.esm.js.map
