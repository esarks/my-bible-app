import { ColorPicker } from 'antd';
import React from 'react';
import { r as registerComponentHelper } from './utils-5ebcaa63.esm.js';
import '@plasmicapp/host/registerComponent';
import '@plasmicapp/host/registerGlobalContext';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
function AntdColorPicker(_a) {
  var _b = _a, {
    showTextSwitch,
    onChange
  } = _b, props = __objRest(_b, [
    "showTextSwitch",
    "onChange"
  ]);
  return /* @__PURE__ */ React.createElement(
    ColorPicker,
    __spreadProps(__spreadValues({}, props), {
      showText: props.showText || showTextSwitch,
      onChangeComplete: (value) => {
        onChange == null ? void 0 : onChange(typeof value === "string" ? value : value.toHexString());
      }
    })
  );
}
function registerColorPicker(loader) {
  registerComponentHelper(loader, AntdColorPicker, {
    name: "plasmic-antd5-color-picker",
    displayName: "Color Picker",
    props: {
      children: {
        type: "slot",
        hidePlaceholder: true,
        mergeWithParent: true
      },
      value: {
        displayName: "Color value",
        type: "color",
        editOnly: true,
        uncontrolledProp: "defaultValue",
        hidden: (ps) => !!ps.__plasmicFormField
      },
      showTextSwitch: {
        type: "boolean",
        displayName: "Show text"
      },
      showText: {
        type: "slot",
        hidePlaceholder: true
      },
      allowClear: "boolean",
      disabled: {
        type: "boolean",
        advanced: true
      },
      trigger: {
        advanced: true,
        type: "choice",
        options: ["click", "hover"],
        defaultValueHint: "click"
      },
      format: {
        advanced: true,
        type: "choice",
        options: ["hex", "hsb", "rgb"],
        defaultValueHint: "hex"
      },
      onChange: {
        type: "eventHandler",
        argTypes: [
          {
            name: "color",
            type: "string"
          }
        ]
      }
    },
    states: {
      value: {
        type: "writable",
        valueProp: "value",
        onChangeProp: "onChange",
        variableType: "text",
        hidden: (ps) => !!ps.__plasmicFormField
      }
    },
    importPath: "@plasmicpkgs/antd5/skinny/registerColorPicker",
    importName: "AntdColorPicker"
  });
}

export { AntdColorPicker, registerColorPicker };
//# sourceMappingURL=registerColorPicker.esm.js.map
