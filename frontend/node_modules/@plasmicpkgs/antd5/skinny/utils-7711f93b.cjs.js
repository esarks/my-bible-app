'use strict';

var registerComponent = require('@plasmicapp/host/registerComponent');
var registerGlobalContext = require('@plasmicapp/host/registerGlobalContext');
var React = require('react');
var antd = require('antd');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var registerComponent__default = /*#__PURE__*/_interopDefault(registerComponent);
var registerGlobalContext__default = /*#__PURE__*/_interopDefault(registerGlobalContext);
var React__default = /*#__PURE__*/_interopDefault(React);

function makeRegisterGlobalContext(component, meta) {
  return function(loader) {
    if (loader) {
      loader.registerGlobalContext(component, meta);
    } else {
      registerGlobalContext__default.default(component, meta);
    }
  };
}
function registerComponentHelper(loader, component, meta) {
  if (loader) {
    loader.registerComponent(component, meta);
  } else {
    registerComponent__default.default(component, meta);
  }
}
function traverseReactEltTree(children, callback) {
  const rec = (elts) => {
    (Array.isArray(elts) ? elts : [elts]).forEach((elt) => {
      var _a;
      if (elt) {
        callback(elt);
        if (elt.children) {
          rec(elt.children);
        }
        if (((_a = elt.props) == null ? void 0 : _a.children) && elt.props.children !== elt.children) {
          rec(elt.props.children);
        }
      }
    });
  };
  rec(children);
}
function asArray(x) {
  if (Array.isArray(x)) {
    return x;
  } else if (x == null) {
    return [];
  } else {
    return [x];
  }
}
function omit(obj, ...keys) {
  if (Object.keys(obj).length === 0) {
    return obj;
  }
  const res = {};
  for (const key of Object.keys(obj)) {
    if (!keys.includes(key)) {
      res[key] = obj[key];
    }
  }
  return res;
}
function usePrevious(value) {
  const prevValue = React__default.default.useRef(void 0);
  React__default.default.useEffect(() => {
    prevValue.current = value;
    return () => {
      prevValue.current = void 0;
    };
  });
  return prevValue.current;
}
function capitalize(value) {
  return value[0].toUpperCase() + value.slice(1);
}
function ensureArray(x) {
  return Array.isArray(x) ? x : [x];
}
function setFieldsToUndefined(obj) {
  if (typeof obj === "object" && obj !== null) {
    for (const key in obj) {
      if (typeof obj[key] === "object") {
        setFieldsToUndefined(obj[key]);
      }
      obj[key] = void 0;
    }
  }
}
function arrayEq(xs, ys) {
  return xs.length === ys.length && xs.every((x, i) => x === ys[i]);
}
class ErrorBoundary extends React__default.default.Component {
  constructor() {
    super(...arguments);
    this.state = { hasError: false, errorInfo: "" };
  }
  static getDerivedStateFromError(error) {
    return { hasError: true, errorInfo: error.message };
  }
  componentDidCatch(error, errorInfo) {
    console.log(error, errorInfo);
  }
  componentDidUpdate(prevProps, prevState) {
    if (prevProps.canvasEnvId !== this.props.canvasEnvId && prevState.hasError) {
      this.setState({ hasError: false });
    }
  }
  render() {
    var _a;
    if (this.state.hasError) {
      return /* @__PURE__ */ React__default.default.createElement(
        antd.Result,
        {
          status: "error",
          title: (_a = this.props.message) != null ? _a : "Something went wrong.",
          extra: this.state.errorInfo
        }
      );
    }
    return this.props.children;
  }
}
function isUnsafeKey(key) {
  return Array.isArray(key) && key[0] === "__proto__" || key === "__proto__" || key === "constructor" || key === "prototype";
}
function get(obj, path) {
  const keys = Array.isArray(path) ? path : path.split(".");
  let i;
  for (i = 0; i < keys.length; i++) {
    const key = keys[i];
    if (!obj || !Object.hasOwn(obj, key) || isUnsafeKey(key)) {
      obj = void 0;
      break;
    }
    obj = obj[key];
  }
  return obj;
}
function set(obj, path, value) {
  const keys = Array.isArray(path) ? path : path.split(".");
  let i;
  for (i = 0; i < keys.length - 1; i++) {
    const key = keys[i];
    if (isUnsafeKey(key))
      return;
    if (!Object.hasOwn(obj, key)) {
      if (!isNaN(Number(keys[i + 1]))) {
        obj[key] = [];
      } else {
        obj[key] = {};
      }
    }
    obj = obj[key];
  }
  obj[keys[i]] = value;
  return value;
}
function pick(obj, ...paths) {
  if (Object.keys(obj).length === 0) {
    return obj;
  }
  const res = {};
  for (const path of paths) {
    set(res, path, get(obj, path));
  }
  return res;
}

exports.ErrorBoundary = ErrorBoundary;
exports.arrayEq = arrayEq;
exports.asArray = asArray;
exports.capitalize = capitalize;
exports.ensureArray = ensureArray;
exports.get = get;
exports.makeRegisterGlobalContext = makeRegisterGlobalContext;
exports.omit = omit;
exports.pick = pick;
exports.registerComponentHelper = registerComponentHelper;
exports.setFieldsToUndefined = setFieldsToUndefined;
exports.traverseReactEltTree = traverseReactEltTree;
exports.usePrevious = usePrevious;
//# sourceMappingURL=utils-7711f93b.cjs.js.map
