'use strict';

var host = require('@plasmicapp/host');
var antd = require('antd');
var React = require('react');
var contexts = require('./contexts-a2387bed.cjs.js');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var React__default = /*#__PURE__*/_interopDefault(React);

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
const FormList = antd.Form.List;
const FormListWrapper = React__default.default.forwardRef(function FormListWrapper2(props, ref) {
  var _a;
  const relativeFormItemName = contexts.useFormItemRelativeName(props.name);
  const fullFormItemName = contexts.useFormItemFullName(props.name);
  const operationsRef = React__default.default.useRef(
    void 0
  );
  React__default.default.useImperativeHandle(
    ref,
    () => ({
      add(defaultValue, insertIndex) {
        if (operationsRef.current) {
          const { add } = operationsRef.current[1];
          add(defaultValue, insertIndex);
        }
      },
      remove(index) {
        if (operationsRef.current) {
          const { remove } = operationsRef.current[1];
          remove(index);
        }
      },
      move(from, to) {
        if (operationsRef.current) {
          const { move } = operationsRef.current[1];
          move(from, to);
        }
      }
    }),
    [operationsRef]
  );
  const inCanvas = !!host.usePlasmicCanvasContext();
  if (inCanvas) {
    const form = contexts.useFormInstanceMaybe();
    const prevPropValues = React__default.default.useRef({
      initialValue: props.initialValue,
      name: props.name
    });
    const { fireOnValuesChange, forceRemount } = (_a = React__default.default.useContext(contexts.InternalFormInstanceContext)) != null ? _a : {};
    React__default.default.useEffect(() => {
      if (prevPropValues.current.name !== props.name) {
        forceRemount == null ? void 0 : forceRemount();
      }
      if (fullFormItemName) {
        form == null ? void 0 : form.setFieldValue(fullFormItemName, props.initialValue);
        prevPropValues.current.initialValue = props.initialValue;
        fireOnValuesChange == null ? void 0 : fireOnValuesChange();
      }
    }, [JSON.stringify(props.initialValue), JSON.stringify(fullFormItemName)]);
  }
  return /* @__PURE__ */ React__default.default.createElement(FormList, __spreadProps(__spreadValues({}, props), { name: relativeFormItemName != null ? relativeFormItemName : [] }), (...args) => {
    operationsRef.current = args;
    return args[0].map((field, index) => /* @__PURE__ */ React__default.default.createElement(
      contexts.PathContext.Provider,
      {
        value: {
          relativePath: [field.name],
          fullPath: [...fullFormItemName != null ? fullFormItemName : [], field.name]
        }
      },
      /* @__PURE__ */ React__default.default.createElement(host.DataProvider, { name: "currentField", data: field }, /* @__PURE__ */ React__default.default.createElement(host.DataProvider, { name: "currentFieldIndex", data: index }, host.repeatedElement(index, props.children)))
    ));
  });
});

exports.FormListWrapper = FormListWrapper;
//# sourceMappingURL=FormList.cjs.js.map
