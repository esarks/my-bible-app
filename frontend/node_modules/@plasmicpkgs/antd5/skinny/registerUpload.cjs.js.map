{"version":3,"file":"registerUpload.cjs.js","sources":["../src/registerUpload.tsx"],"sourcesContent":["import { Image, Upload } from \"antd\";\nimport type {\n  UploadFile as AntdUploadFile,\n  UploadChangeParam,\n  UploadProps,\n} from \"antd/es/upload\";\nimport React, { useMemo, useRef, useState } from \"react\";\nimport { Registerable, registerComponentHelper } from \"./utils\";\n\ninterface UploadFile {\n  uid: string;\n  name: string;\n  size?: number;\n  type?: string;\n  lastModified?: number;\n  contents?: string;\n  status: AntdUploadFile[\"status\"];\n}\n\ninterface ExtendedUploadProps<T = any> extends UploadProps<T> {\n  files?: Array<UploadFile>;\n  onFilesChange?: (values: Array<UploadFile>) => void;\n  dragAndDropFiles: boolean;\n}\n\nfunction getThumbUrl(file?: UploadFile): string | undefined {\n  if (!file?.type?.startsWith(\"image\")) {\n    return undefined;\n  }\n  return `data:${file.type};base64,${file.contents}`;\n}\n\nexport function UploadWrapper(props: ExtendedUploadProps) {\n  const { files, dragAndDropFiles, onFilesChange, maxCount, ...rest } = props;\n  const filesRef = useRef<Array<UploadFile>>(); // if multiple = true, it facilitates adding multiple files\n\n  filesRef.current = files;\n\n  const [previewFileId, setPreviewFileId] = useState<string>();\n  const [previewOpen, setPreviewOpen] = useState(false);\n\n  const handleChange = (info: UploadChangeParam) => {\n    const { file } = info;\n\n    if (file.status === \"removed\") {\n      return;\n    }\n\n    const metadata = {\n      uid: file.uid,\n      name: file.name,\n      size: file.size,\n      type: file.type,\n      lastModified: file.lastModified,\n    };\n\n    onFilesChange?.([\n      ...(filesRef.current ?? []).slice(0, (maxCount || Infinity) - 1),\n      {\n        ...metadata,\n        status: \"uploading\",\n      },\n    ]);\n\n    const reader = new FileReader();\n\n    reader.onload = () => {\n      if (!filesRef.current?.map((f) => f.uid).includes(metadata.uid)) {\n        return;\n      }\n      onFilesChange?.([\n        ...(filesRef.current ?? []).filter((f) => f.uid !== file.uid),\n        {\n          ...metadata,\n          contents: (reader.result as string).replace(\n            /^data:[^;]+;base64,/,\n            \"\"\n          ),\n          status: \"done\",\n        },\n      ]);\n    };\n\n    reader.onerror = () => {\n      if (!filesRef.current?.map((f) => f.uid).includes(metadata.uid)) {\n        return;\n      }\n      onFilesChange?.([\n        ...(filesRef.current ?? []).filter((f) => f.uid !== file.uid),\n        {\n          ...metadata,\n          status: \"error\",\n        },\n      ]);\n    };\n\n    reader.readAsDataURL(info.file as any);\n  };\n\n  const handleRemove = (file: UploadFile) => {\n    onFilesChange?.((files ?? []).filter((f) => f.uid !== file.uid));\n  };\n\n  const handlePreview = async (file: AntdUploadFile) => {\n    setPreviewFileId(files?.filter((f) => file.uid === f.uid)[0]?.uid);\n    setPreviewOpen(true);\n  };\n\n  const handleCancel = () => setPreviewFileId(undefined);\n\n  const previewFile = useMemo(\n    () => files?.filter((f) => previewFileId === f.uid)[0],\n    [files, previewFileId]\n  );\n\n  const UploadComponent = useMemo(\n    () => (dragAndDropFiles ? Upload.Dragger : Upload),\n    [dragAndDropFiles]\n  );\n\n  return (\n    <>\n      <UploadComponent\n        {...rest}\n        fileList={files?.map((f) => ({\n          ...f,\n          thumbUrl: getThumbUrl(f),\n        }))}\n        onPreview={handlePreview}\n        beforeUpload={() => {\n          return false;\n        }}\n        onChange={(info) => {\n          handleChange(info);\n        }}\n        onRemove={(file) => {\n          handleRemove(file as UploadFile);\n        }}\n      />\n\n      {previewFile && (\n        <Image\n          wrapperStyle={{ display: \"none\" }}\n          preview={{\n            visible: previewOpen,\n            onVisibleChange: (visible) => setPreviewOpen(visible),\n            afterOpenChange: (visible) => !visible && handleCancel(),\n          }}\n          alt={previewFile?.name}\n          src={getThumbUrl(previewFile)}\n        />\n      )}\n    </>\n  );\n}\n\nUploadWrapper.__plasmicFormFieldMeta = {\n  valueProp: \"files\",\n  onChangeProp: \"onFilesChange\",\n};\n\nexport function registerUpload(loader?: Registerable) {\n  registerComponentHelper(loader, UploadWrapper, {\n    name: \"plasmic-antd5-upload\",\n    displayName: \"Upload\",\n    props: {\n      accept: {\n        type: \"choice\",\n        displayName: \"Allowed types\",\n        options: [\n          {\n            value: \"\",\n            label: \"Any kind of file\",\n          },\n          {\n            value: \"image/*\",\n            label: \"Image\",\n          },\n          {\n            value: \"video/*\",\n            label: \"Video\",\n          },\n          {\n            value: \"audio/*\",\n            label: \"Audio\",\n          },\n          {\n            value: \"application/pdf\",\n            label: \"PDF\",\n          },\n        ],\n        defaultValue: \"\",\n      },\n      listType: {\n        type: \"choice\",\n        options: [\"text\", \"picture\", \"picture-card\", \"picture-circle\"],\n        defaultValueHint: \"text\",\n      },\n      dragAndDropFiles: {\n        type: \"boolean\",\n        defaultValueHint: false,\n        advanced: true,\n        description:\n          \"You can drag files to a specific area, to upload. Alternatively, you can also upload by selecting.\",\n      },\n      multiple: {\n        type: \"boolean\",\n        advanced: true,\n        defaultValueHint: false,\n        description: \"Upload several files at once in modern browsers\",\n      },\n      files: {\n        type: \"object\",\n        displayName: \"Files\",\n        defaultValue: [],\n        hidden: (ps: any) => !!ps.__plasmicFormField,\n      },\n      children: {\n        type: \"slot\",\n        defaultValue: [\n          {\n            type: \"component\",\n            name: \"plasmic-antd5-button\",\n            props: {\n              children: {\n                type: \"text\",\n                value: \"Upload\",\n              },\n            },\n          },\n        ],\n      },\n      maxCount: {\n        type: \"number\",\n        displayName: \"Limit of files\",\n        advanced: true,\n      },\n      onFilesChange: {\n        type: \"eventHandler\",\n        displayName: \"On file uploaded\",\n        argTypes: [\n          {\n            name: \"files\",\n            type: \"array\",\n          },\n        ],\n      },\n      showUploadList: {\n        type: \"boolean\",\n        displayName: \"List files\",\n        defaultValue: true,\n      },\n    },\n    states: {\n      files: {\n        type: \"writable\",\n        valueProp: \"files\",\n        variableType: \"array\",\n        onChangeProp: \"onFilesChange\",\n        hidden: (ps: any) => !!ps.__plasmicFormField,\n      },\n    },\n    ...({ trapsSelection: true } as any),\n    importPath: \"@plasmicpkgs/antd5/skinny/registerUpload\",\n    importName: \"UploadWrapper\",\n  });\n}\n"],"names":["useRef","useState","_a","useMemo","Upload","React","Image","registerComponentHelper"],"mappings":"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"}