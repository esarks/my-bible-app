'use strict';

var antd = require('antd');
var React = require('react');
var utils = require('./utils-7711f93b.cjs.js');
require('@plasmicapp/host/registerComponent');
require('@plasmicapp/host/registerGlobalContext');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var React__default = /*#__PURE__*/_interopDefault(React);

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const styleSections = [
  "visibility",
  "typography",
  "spacing",
  "background",
  "transform",
  "transitions",
  "layout",
  "overflow",
  "border",
  "shadows",
  "effects"
];
function AntdModal(props) {
  const _a = props, {
    onOpenChange,
    onOk,
    onCancel,
    open,
    width,
    footer,
    hideFooter,
    modalScopeClassName,
    wrapClassName,
    trigger
  } = _a, rest = __objRest(_a, [
    "onOpenChange",
    "onOk",
    "onCancel",
    "open",
    "width",
    "footer",
    "hideFooter",
    "modalScopeClassName",
    "wrapClassName",
    "trigger"
  ]);
  const memoOnOk = React__default.default.useMemo(() => {
    if (onOpenChange || onOk) {
      return (e) => {
        onOpenChange == null ? void 0 : onOpenChange(false);
        onOk == null ? void 0 : onOk(e);
      };
    } else {
      return void 0;
    }
  }, [onOpenChange, onOk]);
  const memoOnCancel = React__default.default.useMemo(() => {
    if (onOpenChange || onCancel) {
      return (e) => {
        onOpenChange == null ? void 0 : onOpenChange(false);
        onCancel == null ? void 0 : onCancel(e);
      };
    } else {
      return void 0;
    }
  }, [onOpenChange, onCancel]);
  const widthProp = React.useMemo(() => {
    if (!width)
      return void 0;
    if (typeof width === "number")
      return width;
    if (typeof width !== "string")
      return void 0;
    if (/^\d+$/.test(width)) {
      return +width;
    }
    return width;
  }, [width]);
  return /* @__PURE__ */ React__default.default.createElement(React__default.default.Fragment, null, /* @__PURE__ */ React__default.default.createElement(
    antd.Modal,
    __spreadProps(__spreadValues({}, rest), {
      onOk: memoOnOk,
      width: widthProp,
      onCancel: memoOnCancel,
      open,
      footer: hideFooter ? null : footer != null ? footer : void 0,
      wrapClassName,
      className: `${props.className} ${props.defaultStylesClassName} ${modalScopeClassName}`
    })
  ), trigger ? /* @__PURE__ */ React__default.default.createElement("div", { onClick: () => onOpenChange == null ? void 0 : onOpenChange(true) }, trigger) : null);
}
function registerModal(loader) {
  utils.registerComponentHelper(loader, AntdModal, {
    name: "plasmic-antd5-modal",
    displayName: "Modal",
    styleSections,
    description: "[See tutorial video](https://www.youtube.com/watch?v=TkjxNJIFun8)",
    props: {
      open: {
        type: "boolean"
      },
      width: {
        type: "string",
        defaultValueHint: "520px",
        description: "Change the width of the modal",
        helpText: "Default unit is px. You can also use % or other units for width."
      },
      children: {
        type: "slot",
        defaultValue: {
          type: "vbox",
          children: ["Modal content"]
        }
      },
      title: {
        type: "slot",
        defaultValue: "Modal title"
      },
      footer: {
        type: "slot",
        hidePlaceholder: true,
        hidden: (ps) => {
          var _a;
          return (_a = ps.hideFooter) != null ? _a : false;
        }
      },
      trigger: __spreadValues({
        type: "slot",
        hidePlaceholder: true,
        defaultValue: {
          type: "component",
          name: "plasmic-antd5-button",
          props: {
            children: {
              type: "text",
              value: "Show modal"
            }
          }
        }
      }, {
        mergeWithParent: true
      }),
      closeIcon: {
        type: "slot",
        hidePlaceholder: true
      },
      onOk: {
        type: "eventHandler",
        argTypes: []
      },
      onCancel: {
        type: "eventHandler",
        argTypes: []
      },
      okText: {
        type: "string",
        hidden: (ps) => !!ps.footer,
        advanced: true
      },
      cancelText: {
        type: "string",
        hidden: (ps) => !!ps.footer,
        advanced: true
      },
      hideFooter: {
        type: "boolean",
        description: "Hide the modal footer slot",
        advanced: true
      },
      onOpenChange: {
        type: "eventHandler",
        argTypes: [{ name: "open", type: "boolean" }]
      },
      maskClosable: {
        type: "boolean",
        displayName: "Close modal on outside click?",
        description: "Whether to close the modal when user clicks outside the modal",
        defaultValueHint: true
      },
      wrapClassName: {
        type: "class",
        displayName: "Modal overlay",
        styleSections: ["background"]
      },
      modalScopeClassName: {
        type: "styleScopeClass",
        scopeName: "modal"
      },
      modalContentClassName: {
        type: "class",
        displayName: "Modal content",
        noSelf: true,
        styleSections,
        selectors: [
          {
            selector: ":modal .ant-modal-content",
            label: "Base"
          }
        ]
      },
      closeButtonClassName: {
        type: "class",
        displayName: "Close button",
        noSelf: true,
        selectors: [
          {
            selector: ":modal .ant-modal-close",
            label: "Base"
          }
        ],
        advanced: true
      },
      defaultStylesClassName: {
        type: "themeResetClass"
      }
    },
    states: {
      open: {
        type: "writable",
        valueProp: "open",
        onChangeProp: "onOpenChange",
        variableType: "boolean"
      }
    },
    templates: {
      "Modal Form": {
        props: {
          children: {
            type: "component",
            name: "plasmic-antd5-form"
          },
          hideFooter: true
        }
      },
      "Generic Modal": {}
    },
    importPath: "@plasmicpkgs/antd5/skinny/registerModal",
    importName: "AntdModal"
  });
}

exports.AntdModal = AntdModal;
exports.registerModal = registerModal;
//# sourceMappingURL=registerModal.cjs.js.map
