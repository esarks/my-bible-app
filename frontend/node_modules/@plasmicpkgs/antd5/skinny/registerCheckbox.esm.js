import { Checkbox } from 'antd';
import React from 'react';
import { c as checkboxComponentName, a as checkboxGroupComponentName } from './names-73583568.esm.js';
import { r as registerComponentHelper, t as traverseReactEltTree } from './utils-5ebcaa63.esm.js';
import '@plasmicapp/host/registerComponent';
import '@plasmicapp/host/registerGlobalContext';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
function AntdCheckbox(props) {
  const _a = props, { onChange } = _a, rest = __objRest(_a, ["onChange"]);
  const wrappedOnChange = React.useMemo(() => {
    if (onChange) {
      return (event) => onChange(event.target.checked);
    } else {
      return void 0;
    }
  }, [onChange]);
  return /* @__PURE__ */ React.createElement(Checkbox, __spreadProps(__spreadValues({}, rest), { onChange: wrappedOnChange }));
}
AntdCheckbox.__plasmicFormFieldMeta = { valueProp: "checked" };
const AntdCheckboxGroup = Checkbox.Group;
function registerCheckbox(loader) {
  registerComponentHelper(loader, AntdCheckbox, {
    name: checkboxComponentName,
    displayName: "Checkbox",
    props: {
      checked: {
        type: "boolean",
        editOnly: true,
        uncontrolledProp: "defaultChecked",
        description: "Specifies the initial state: whether or not the checkbox is selected",
        defaultValueHint: false,
        hidden: (ps) => !!ps.__plasmicFormField
      },
      disabled: {
        type: "boolean",
        description: "If checkbox is disabled",
        defaultValueHint: false
      },
      indeterminate: {
        type: "boolean",
        description: "The indeterminate checked state of checkbox",
        defaultValueHint: false
      },
      autoFocus: {
        type: "boolean",
        description: "If get focus when component mounted",
        defaultValueHint: false,
        advanced: true
      },
      children: __spreadValues({
        type: "slot",
        defaultValue: [
          {
            type: "text",
            value: "Checkbox"
          }
        ]
      }, { mergeWithParent: true }),
      onChange: {
        type: "eventHandler",
        argTypes: [{ name: "checked", type: "boolean" }]
      }
    },
    states: {
      checked: {
        type: "writable",
        valueProp: "checked",
        onChangeProp: "onChange",
        variableType: "boolean",
        hidden: (ps) => !!ps.__plasmicFormField
      }
    },
    importPath: "@plasmicpkgs/antd5/skinny/registerCheckbox",
    importName: "AntdCheckbox"
  });
  registerComponentHelper(loader, AntdCheckboxGroup, {
    name: checkboxGroupComponentName,
    displayName: "Checkbox Group",
    props: {
      value: {
        type: "choice",
        editOnly: true,
        uncontrolledProp: "defaultValue",
        description: "Default selected value",
        multiSelect: true,
        options: (ps) => {
          const options = /* @__PURE__ */ new Set();
          traverseReactEltTree(ps.children, (elt) => {
            var _a;
            if ((elt == null ? void 0 : elt.type) === AntdCheckbox && typeof ((_a = elt == null ? void 0 : elt.props) == null ? void 0 : _a.value) === "string") {
              options.add(elt.props.value);
            }
          });
          return Array.from(options.keys());
        }
      },
      disabled: {
        type: "boolean",
        description: "Disables all checkboxes",
        defaultValueHint: false
      },
      children: {
        type: "slot",
        allowedComponents: [checkboxComponentName]
        // Error right now when using default slot content with stateful instances
        // defaultValue: [
        //   {
        //     type: "component",
        //     name: "plasmic-antd5-checkbox",
        //   },
        // ],
      },
      onChange: {
        type: "eventHandler",
        argTypes: [{ name: "value", type: "object" }]
      }
    },
    states: {
      value: {
        type: "writable",
        valueProp: "value",
        onChangeProp: "onChange",
        variableType: "boolean",
        hidden: (ps) => !!ps.__plasmicFormField
      }
    },
    importPath: "@plasmicpkgs/antd5/skinny/registerCheckbox",
    importName: "AntdCheckboxGroup",
    parentComponentName: checkboxComponentName
  });
}

export { AntdCheckbox, AntdCheckboxGroup, registerCheckbox };
//# sourceMappingURL=registerCheckbox.esm.js.map
