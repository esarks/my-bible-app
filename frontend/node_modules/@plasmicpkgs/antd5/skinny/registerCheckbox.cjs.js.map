{"version":3,"file":"registerCheckbox.cjs.js","sources":["../src/registerCheckbox.tsx"],"sourcesContent":["import { Checkbox } from \"antd\";\nimport type { CheckboxChangeEvent } from \"antd/es/checkbox\";\nimport React from \"react\";\nimport { checkboxComponentName, checkboxGroupComponentName } from \"./names\";\nimport {\n  Registerable,\n  registerComponentHelper,\n  traverseReactEltTree,\n} from \"./utils\";\n\nexport function AntdCheckbox(\n  props: Omit<React.ComponentProps<typeof Checkbox>, \"onChange\"> & {\n    onChange?: (checked: boolean) => void;\n  }\n) {\n  const { onChange, ...rest } = props;\n  const wrappedOnChange = React.useMemo(() => {\n    if (onChange) {\n      return (event: CheckboxChangeEvent) => onChange(event.target.checked);\n    } else {\n      return undefined;\n    }\n  }, [onChange]);\n  return <Checkbox {...rest} onChange={wrappedOnChange} />;\n}\nAntdCheckbox.__plasmicFormFieldMeta = { valueProp: \"checked\" };\n\nexport const AntdCheckboxGroup = Checkbox.Group;\n\nexport function registerCheckbox(loader?: Registerable) {\n  registerComponentHelper(loader, AntdCheckbox, {\n    name: checkboxComponentName,\n    displayName: \"Checkbox\",\n    props: {\n      checked: {\n        type: \"boolean\",\n        editOnly: true,\n        uncontrolledProp: \"defaultChecked\",\n        description:\n          \"Specifies the initial state: whether or not the checkbox is selected\",\n        defaultValueHint: false,\n        hidden: (ps) => !!(ps as any).__plasmicFormField,\n      },\n      disabled: {\n        type: \"boolean\",\n        description: \"If checkbox is disabled\",\n        defaultValueHint: false,\n      },\n      indeterminate: {\n        type: \"boolean\",\n        description: \"The indeterminate checked state of checkbox\",\n        defaultValueHint: false,\n      },\n      autoFocus: {\n        type: \"boolean\",\n        description: \"If get focus when component mounted\",\n        defaultValueHint: false,\n        advanced: true,\n      },\n      children: {\n        type: \"slot\",\n        defaultValue: [\n          {\n            type: \"text\",\n            value: \"Checkbox\",\n          },\n        ],\n        ...({ mergeWithParent: true } as any),\n      },\n      onChange: {\n        type: \"eventHandler\",\n        argTypes: [{ name: \"checked\", type: \"boolean\" }],\n      } as any,\n    },\n    states: {\n      checked: {\n        type: \"writable\",\n        valueProp: \"checked\",\n        onChangeProp: \"onChange\",\n        variableType: \"boolean\",\n        hidden: (ps: any) => !!ps.__plasmicFormField,\n      },\n    },\n    importPath: \"@plasmicpkgs/antd5/skinny/registerCheckbox\",\n    importName: \"AntdCheckbox\",\n  });\n\n  registerComponentHelper(loader, AntdCheckboxGroup, {\n    name: checkboxGroupComponentName,\n    displayName: \"Checkbox Group\",\n    props: {\n      value: {\n        type: \"choice\",\n        editOnly: true,\n        uncontrolledProp: \"defaultValue\",\n        description: \"Default selected value\",\n        multiSelect: true,\n        options: (ps) => {\n          const options = new Set<string>();\n          traverseReactEltTree(ps.children, (elt) => {\n            if (\n              elt?.type === AntdCheckbox &&\n              typeof elt?.props?.value === \"string\"\n            ) {\n              options.add(elt.props.value);\n            }\n          });\n          return Array.from(options.keys());\n        },\n      },\n      disabled: {\n        type: \"boolean\",\n        description: \"Disables all checkboxes\",\n        defaultValueHint: false,\n      },\n      children: {\n        type: \"slot\",\n        allowedComponents: [checkboxComponentName],\n        // Error right now when using default slot content with stateful instances\n        // defaultValue: [\n        //   {\n        //     type: \"component\",\n        //     name: \"plasmic-antd5-checkbox\",\n        //   },\n        // ],\n      },\n      onChange: {\n        type: \"eventHandler\",\n        argTypes: [{ name: \"value\", type: \"object\" }],\n      } as any,\n    },\n    states: {\n      value: {\n        type: \"writable\",\n        valueProp: \"value\",\n        onChangeProp: \"onChange\",\n        variableType: \"boolean\",\n        hidden: (ps: any) => !!ps.__plasmicFormField,\n      },\n    },\n    importPath: \"@plasmicpkgs/antd5/skinny/registerCheckbox\",\n    importName: \"AntdCheckboxGroup\",\n    parentComponentName: checkboxComponentName,\n  });\n}\n"],"names":["React","Checkbox","registerComponentHelper","checkboxComponentName","checkboxGroupComponentName","traverseReactEltTree"],"mappings":"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"}