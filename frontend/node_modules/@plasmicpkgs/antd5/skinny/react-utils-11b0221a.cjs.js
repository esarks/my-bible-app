'use strict';

var classNames = require('classnames');
var React = require('react');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var classNames__default = /*#__PURE__*/_interopDefault(classNames);
var React__default = /*#__PURE__*/_interopDefault(React);

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
const isBrowser = typeof window !== "undefined";
const NONE = Symbol("NONE");
isBrowser ? React__default.default.useLayoutEffect : React__default.default.useEffect;
function mergeProps(props, ...restProps) {
  if (restProps.every((rest) => Object.keys(rest).length === 0)) {
    return props;
  }
  const result = __spreadValues({}, props);
  for (const rest of restProps) {
    for (const key of Object.keys(rest)) {
      result[key] = mergePropVals(key, result[key], rest[key]);
    }
  }
  return result;
}
function updateRef(ref, value) {
  if (!ref) {
    return;
  }
  if (typeof ref === "function") {
    ref(value);
  } else {
    if (!Object.isFrozen(ref)) {
      ref.current = value;
    }
  }
}
function mergeRefs(...refs) {
  return (value) => {
    for (const ref of refs) {
      updateRef(ref, value);
    }
  };
}
function mergePropVals(name, val1, val2) {
  if (val1 === NONE || val2 === NONE) {
    return null;
  } else if (val1 == null) {
    return val2;
  } else if (val2 == null) {
    return val1;
  } else if (name === "className") {
    return classNames__default.default(val1, val2);
  } else if (name === "style") {
    return __spreadValues(__spreadValues({}, val1), val2);
  } else if (name === "ref") {
    return mergeRefs(val1, val2);
  } else if (typeof val1 !== typeof val2) {
    return val2;
  } else if (name.startsWith("on") && typeof val1 === "function") {
    return (...args) => {
      let res;
      if (typeof val1 === "function") {
        res = val1(...args);
      }
      if (typeof val2 === "function") {
        res = val2(...args);
      }
      return res;
    };
  } else {
    return val2;
  }
}
function reactNodeToString(reactNode) {
  let string = "";
  if (typeof reactNode === "string") {
    string = reactNode;
  } else if (typeof reactNode === "number") {
    string = reactNode.toString();
  } else if (reactNode instanceof Array) {
    reactNode.forEach(function(child) {
      string += reactNodeToString(child);
    });
  } else if (React.isValidElement(reactNode)) {
    string += reactNodeToString(reactNode.props.children);
  }
  return string;
}
function useIsMounted() {
  const ref = React__default.default.useRef(false);
  const isMounted = React__default.default.useCallback(() => ref.current, []);
  React__default.default.useEffect(() => {
    ref.current = true;
    return () => {
      ref.current = false;
    };
  }, []);
  return isMounted;
}

exports.mergeProps = mergeProps;
exports.reactNodeToString = reactNodeToString;
exports.useIsMounted = useIsMounted;
//# sourceMappingURL=react-utils-11b0221a.cjs.js.map
