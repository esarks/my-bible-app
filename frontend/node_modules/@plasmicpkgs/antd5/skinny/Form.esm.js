import { Form } from 'antd';
import equal from 'fast-deep-equal';
import React from 'react';
import { s as setFieldsToUndefined, p as pick, u as usePrevious } from './utils-5ebcaa63.esm.js';
import { I as InternalFormInstanceContext, F as FormLayoutContext } from './contexts-4c7952c1.esm.js';
import '@plasmicapp/host/registerComponent';
import '@plasmicapp/host/registerGlobalContext';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var InputType = /* @__PURE__ */ ((InputType2) => {
  InputType2["Text"] = "Text";
  InputType2["TextArea"] = "Text Area";
  InputType2["Password"] = "Password";
  InputType2["Number"] = "Number";
  InputType2["Select"] = "Select";
  InputType2["Option"] = "Option";
  InputType2["OptionGroup"] = "Option Group";
  InputType2["Radio"] = "Radio";
  InputType2["RadioGroup"] = "Radio Group";
  InputType2["Checkbox"] = "Checkbox";
  InputType2["DatePicker"] = "DatePicker";
  InputType2["Unknown"] = "Unkown";
  return InputType2;
})(InputType || {});
const SchemaFormContext = React.createContext(void 0);
var FormType = /* @__PURE__ */ ((FormType2) => {
  FormType2[FormType2["NewEntry"] = 0] = "NewEntry";
  FormType2[FormType2["UpdateEntry"] = 1] = "UpdateEntry";
  return FormType2;
})(FormType || {});
const Internal = React.forwardRef(
  (props, ref) => {
    var _b, _c, _d, _e;
    const [isSubmitting, setIsSubmitting] = React.useState(false);
    const [form] = Form.useForm();
    const values = form.getFieldsValue(true);
    const lastValue = React.useRef(values);
    const _a = props, {
      extendedOnValuesChange,
      forceRemount,
      formLayout,
      internalFieldCtx,
      setInternalFieldCtx,
      autoDisableWhileSubmitting = true
    } = _a, rest = __objRest(_a, [
      "extendedOnValuesChange",
      "forceRemount",
      "formLayout",
      "internalFieldCtx",
      "setInternalFieldCtx",
      "autoDisableWhileSubmitting"
    ]);
    const childrenNode = typeof props.children === "function" ? props.children(values, form) : props.children;
    const fireOnValuesChange = React.useCallback(() => {
      const values2 = form.getFieldsValue(true);
      if (!equal(values2, lastValue.current)) {
        extendedOnValuesChange == null ? void 0 : extendedOnValuesChange(values2);
        lastValue.current = values2;
      }
    }, [form, lastValue]);
    React.useEffect(() => {
      fireOnValuesChange();
    }, []);
    React.useImperativeHandle(ref, () => ({
      formInstance: form,
      setFieldsValue: (newValues) => {
        form.setFieldsValue(newValues);
        extendedOnValuesChange == null ? void 0 : extendedOnValuesChange(form.getFieldsValue(true));
      },
      setFieldValue: (namePath, value) => {
        form.setFieldValue(namePath, value);
        extendedOnValuesChange == null ? void 0 : extendedOnValuesChange(form.getFieldsValue(true));
      },
      resetFields: () => {
        form.resetFields();
        extendedOnValuesChange == null ? void 0 : extendedOnValuesChange(form.getFieldsValue(true));
      },
      validateFields: async (...args) => {
        try {
          return await form.validateFields(...args);
        } catch (err) {
          return err;
        }
      },
      clearFields: () => {
        const values2 = form.getFieldsValue(true);
        setFieldsToUndefined(values2);
        form.setFieldsValue(values2);
        extendedOnValuesChange == null ? void 0 : extendedOnValuesChange(form.getFieldsValue(true));
      }
    }));
    const registerField = React.useCallback(
      (fieldEntity) => {
        setInternalFieldCtx((ctx) => ({
          registeredFields: [...ctx.registeredFields, fieldEntity],
          preservedRegisteredFields: [
            ...ctx.preservedRegisteredFields,
            fieldEntity
          ]
        }));
        return () => {
          setInternalFieldCtx((ctx) => ({
            registeredFields: ctx.registeredFields.filter(
              (ent) => ent !== fieldEntity
            ),
            preservedRegisteredFields: ctx.preservedRegisteredFields.filter(
              (ent) => ent !== fieldEntity || fieldEntity.preserve
            )
          }));
        };
      },
      [setInternalFieldCtx]
    );
    const schemaFormCtx = React.useContext(SchemaFormContext);
    (_b = props.setControlContextData) == null ? void 0 : _b.call(props, __spreadValues({
      formInstance: form,
      layout: formLayout,
      internalFieldCtx
    }, schemaFormCtx ? schemaFormCtx : {}));
    const updateIsSubmitting = React.useCallback(
      (newValue) => {
        var _a2;
        setIsSubmitting(newValue);
        (_a2 = props.onIsSubmittingChange) == null ? void 0 : _a2.call(props, newValue);
      },
      [props.onIsSubmittingChange, setIsSubmitting]
    );
    return /* @__PURE__ */ React.createElement(
      InternalFormInstanceContext.Provider,
      {
        value: {
          layout: formLayout,
          fireOnValuesChange,
          forceRemount,
          registerField,
          internalFieldCtx,
          initialValues: (_c = props.initialValues) != null ? _c : {}
        }
      },
      /* @__PURE__ */ React.createElement(FormLayoutContext.Provider, { value: formLayout }, /* @__PURE__ */ React.createElement(
        Form,
        __spreadProps(__spreadValues({}, rest), {
          key: props.initialValues ? JSON.stringify(props.initialValues) : void 0,
          onValuesChange: (...args) => {
            var _a2;
            (_a2 = props.onValuesChange) == null ? void 0 : _a2.call(props, ...args);
            extendedOnValuesChange == null ? void 0 : extendedOnValuesChange(form.getFieldsValue(true));
          },
          onFinish: async () => {
            var _a2;
            if (isSubmitting && autoDisableWhileSubmitting) {
              return;
            }
            updateIsSubmitting(true);
            const submission = (_a2 = props.onFinish) == null ? void 0 : _a2.call(
              props,
              pick(
                form.getFieldsValue(true),
                ...internalFieldCtx.preservedRegisteredFields.map(
                  (field) => field.fullPath
                )
              )
            );
            if (typeof submission === "object" && typeof submission.then === "function") {
              await submission;
            }
            updateIsSubmitting(false);
          },
          form,
          labelCol: ((_d = props.labelCol) == null ? void 0 : _d.horizontalOnly) && props.layout !== "horizontal" ? void 0 : props.labelCol,
          wrapperCol: ((_e = props.wrapperCol) == null ? void 0 : _e.horizontalOnly) && props.layout !== "horizontal" ? void 0 : props.wrapperCol,
          disabled: isSubmitting && autoDisableWhileSubmitting
        }),
        /* @__PURE__ */ React.createElement("style", null, `
          .ant-form-item-explain + div, .ant-form-item-margin-offset {
            display: none;
          }
          `),
        childrenNode
      ))
    );
  }
);
const FormWrapper = React.forwardRef(
  (props, ref) => {
    var _a;
    const [remountKey, setRemountKey] = React.useState(0);
    const forceRemount = React.useCallback(
      () => setRemountKey((k) => k + 1),
      [setRemountKey]
    );
    const previousInitialValues = usePrevious(props.initialValues);
    const wrapperRef = React.useRef(null);
    React.useEffect(() => {
      if (previousInitialValues !== props.initialValues && JSON.stringify(previousInitialValues) !== JSON.stringify(props.initialValues)) {
        forceRemount();
      }
    }, [previousInitialValues, props.initialValues]);
    const [internalFieldCtx, setInternalFieldCtx] = React.useState({
      registeredFields: [],
      preservedRegisteredFields: []
    });
    React.useImperativeHandle(
      ref,
      () => wrapperRef.current ? __spreadValues({}, wrapperRef.current) : {}
    );
    const formLayout = React.useMemo(
      () => {
        var _a2;
        return {
          layout: props.layout,
          labelSpan: (_a2 = props.labelCol) == null ? void 0 : _a2.span
        };
      },
      [props.layout, (_a = props.labelCol) == null ? void 0 : _a.span]
    );
    return /* @__PURE__ */ React.createElement(
      Internal,
      __spreadValues({
        key: remountKey,
        forceRemount,
        formLayout,
        internalFieldCtx,
        setInternalFieldCtx,
        ref: wrapperRef
      }, props)
    );
  }
);
const formHelpers = {
  states: {
    value: {
      onMutate: (value, $ref) => {
        var _a;
        (_a = $ref == null ? void 0 : $ref.formInstance) == null ? void 0 : _a.setFieldsValue(value);
      }
    }
  }
};
const OPTIMIZED_FORM_IMPORT = {
  name: "FormWrapper",
  path: "@plasmicpkgs/antd5/skinny/Form"
};

export { FormType, FormWrapper, InputType, OPTIMIZED_FORM_IMPORT, SchemaFormContext, formHelpers };
//# sourceMappingURL=Form.esm.js.map
