import { Table } from 'antd';
import React from 'react';
import { b as asArray, r as registerComponentHelper } from './utils-5ebcaa63.esm.js';
import '@plasmicapp/host/registerComponent';
import '@plasmicapp/host/registerGlobalContext';

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const AntdTable = React.forwardRef(function AntdTable2(props, ref) {
  const _a = props, {
    data,
    onSelectedRowKeysChange,
    onSelectedRowsChange,
    isSelectable,
    rowKey,
    setControlContextData,
    selectedRowKeys,
    defaultSelectedRowKeys
  } = _a, rest = __objRest(_a, [
    "data",
    "onSelectedRowKeysChange",
    "onSelectedRowsChange",
    "isSelectable",
    "rowKey",
    "setControlContextData",
    "selectedRowKeys",
    "defaultSelectedRowKeys"
  ]);
  setControlContextData == null ? void 0 : setControlContextData(data);
  const isControlled = !!selectedRowKeys;
  const [uncontrolledSelectedRowKeys, setUncontrolledSelectedRowKeys] = React.useState(defaultSelectedRowKeys != null ? defaultSelectedRowKeys : []);
  const selection = isSelectable && rowKey ? {
    onChange: (rowKeys, rows) => {
      onSelectedRowsChange == null ? void 0 : onSelectedRowsChange(rows);
      onSelectedRowKeysChange == null ? void 0 : onSelectedRowKeysChange(rowKeys);
    },
    type: isSelectable === "single" ? "radio" : "checkbox",
    selectedRowKeys: isControlled ? asArray(selectedRowKeys) : uncontrolledSelectedRowKeys
  } : void 0;
  React.useImperativeHandle(
    ref,
    () => ({
      selectRowByIndex(index) {
        if (data.data && rowKey) {
          const row = data.data[index];
          const rows = row ? [row] : [];
          this._setSelectedRows(rows);
        }
      },
      selectRowsByIndexes(indexes) {
        if (data.data && rowKey) {
          const rows = indexes.map((x) => data.data[x]).filter((x) => !!x);
          this._setSelectedRows(rows);
        }
      },
      selectRowByKey(key) {
        if (data.data && rowKey) {
          const rows = data.data.filter((r) => r[rowKey] === key);
          this._setSelectedRows(rows);
        }
      },
      selectRowsByKeys(keys) {
        if (data.data && rowKey) {
          const rows = data.data.filter((r) => keys.includes(r[rowKey]));
          this._setSelectedRows(rows);
        }
      },
      clearSelection() {
        this._setSelectedRows([]);
      },
      _setSelectedRows(rows) {
        onSelectedRowsChange == null ? void 0 : onSelectedRowsChange(rows);
        if (rowKey) {
          onSelectedRowKeysChange == null ? void 0 : onSelectedRowKeysChange(rows.map((r) => r[rowKey]));
        }
        if (!isControlled) {
          setUncontrolledSelectedRowKeys(rows.map((r) => r[rowKey]));
        }
      }
    }),
    [data, onSelectedRowKeysChange, onSelectedRowsChange, isSelectable, rowKey]
  );
  return /* @__PURE__ */ React.createElement(
    Table,
    __spreadValues({
      loading: data == null ? void 0 : data.isLoading,
      dataSource: data == null ? void 0 : data.data,
      rowSelection: selection,
      rowKey
    }, rest)
  );
});
const AntdColumnGroup = Table.ColumnGroup;
const AntdColumn = Table.Column;
function registerTable(loader) {
  registerComponentHelper(loader, AntdTable, {
    name: "plasmic-antd5-table",
    displayName: "Table (deprecated)",
    props: {
      data: {
        type: "dataSourceOpData",
        displayName: "Data"
      },
      children: {
        type: "slot",
        allowedComponents: [
          "plasmic-antd5-table-column",
          "plasmic-antd5-table-column-group"
        ]
      },
      bordered: {
        type: "boolean",
        defaultValueHint: false,
        advanced: true
      },
      isSelectable: {
        type: "choice",
        options: ["single", "multiple"],
        displayName: "Select rows?"
      },
      rowKey: {
        type: "choice",
        options: (ps, ctx) => {
          if (ctx.schema) {
            return ctx.schema.fields.map((f) => ({
              value: f.id,
              label: f.label || f.id
            }));
          }
          return [];
        },
        hidden: (ps) => !ps.isSelectable
      },
      selectedRowKeys: {
        type: "choice",
        multiSelect: (ps) => ps.isSelectable === "multiple",
        options: (ps, ctx) => {
          const key = ps.rowKey;
          if (key && ctx.data) {
            return ctx.data.map((r) => r[key]);
          }
          return [];
        },
        hidden: (ps) => !ps.rowKey
      },
      onSelectedRowKeysChange: {
        type: "eventHandler",
        argTypes: [{ name: "keys", type: "object" }],
        hidden: (ps) => !ps.isSelectable
      },
      onSelectedRowsChange: {
        type: "eventHandler",
        argTypes: [{ name: "rows", type: "object" }],
        hidden: (ps) => !ps.isSelectable
      }
    },
    importPath: "@plasmicpkgs/antd5/skinny/registerTable",
    importName: "AntdTable",
    states: {
      selectedRowKeys: {
        type: "writable",
        valueProp: "selectedRowKeys",
        onChangeProp: "onSelectedRowKeysChange",
        variableType: "array"
      }
      // selectedRows: {
      //   type: "readonly",
      //   onChangeProp: "onSelectedRowsChange",
      // },
    },
    refActions: {
      selectRowByIndex: {
        displayName: "Select row by index",
        argTypes: [
          {
            name: "index",
            displayName: "Index",
            type: "number"
          }
        ]
      },
      selectRowByKey: {
        displayName: "Select row by key",
        argTypes: [
          {
            name: "key",
            displayName: "Row key",
            type: "string"
          }
        ]
      }
    }
  });
  registerComponentHelper(loader, AntdColumn, __spreadValues({
    name: "plasmic-antd5-table-column",
    displayName: "Column",
    parentComponentName: "plasmic-antd5-table",
    props: {
      title: {
        type: "slot",
        defaultValue: "Column Name"
      },
      dataIndex: {
        type: "string",
        displayName: "Column key"
      },
      render: {
        type: "slot",
        renderPropParams: ["cell", "row", "index"],
        hidePlaceholder: true,
        displayName: "Custom render"
      },
      align: {
        type: "choice",
        options: ["left", "right", "center"],
        defaultValueHint: "left"
      },
      fixed: {
        type: "choice",
        options: ["left", "right"],
        advanced: true
      },
      colSpan: {
        type: "number",
        advanced: true
      }
    },
    importPath: "@plasmicpkgs/antd5/skinny/registerTable",
    importName: "AntdColumn"
  }, { isRenderless: true }));
  registerComponentHelper(loader, AntdColumnGroup, __spreadValues({
    name: "plasmic-antd5-table-column-group",
    displayName: "Column Group",
    parentComponentName: "plasmic-antd5-table",
    props: {
      title: {
        type: "slot",
        defaultValue: "Column Group Name"
      },
      children: {
        type: "slot",
        allowedComponents: ["plasmic-antd5-table-column"]
      }
    },
    importPath: "@plasmicpkgs/antd5/skinny/registerTable",
    importName: "AntdColumnGroup"
  }, { isRenderless: true }));
}

export { AntdColumn, AntdColumnGroup, AntdTable, registerTable };
//# sourceMappingURL=registerTable.esm.js.map
