{"version":3,"file":"registerProgress.cjs.js","sources":["../src/registerProgress.tsx"],"sourcesContent":["import { Progress } from \"antd\";\nimport React, { useMemo } from \"react\";\nimport { Registerable, registerComponentHelper } from \"./utils\";\n\nexport type AntdProgressProps = Omit<\n  React.ComponentProps<typeof Progress>,\n  \"format\" | \"success\" | \"successPercent\"\n> & {\n  successPercent?: number;\n  successStrokeColor?: string;\n  infoFormat?: (percent?: number, percentSuccess?: number) => string;\n  stepColors?: { color: string }[];\n  gradient: { color: string; percent: number }[];\n};\n\nexport function AntdProgress(props: AntdProgressProps) {\n  const {\n    successPercent,\n    successStrokeColor,\n    stepColors,\n    infoFormat,\n    gradient,\n    strokeColor,\n    ...rest\n  } = props;\n\n  const success = useMemo(() => {\n    if (!successPercent && !successStrokeColor) return undefined;\n    const res: React.ComponentProps<typeof Progress>[\"success\"] = {\n      percent: successPercent,\n      strokeColor: successStrokeColor,\n    };\n    return res;\n  }, [successPercent, successStrokeColor]);\n\n  const strokeColorProp = useMemo(() => {\n    if (props.type === \"line\" && !!props.steps) {\n      const colors = stepColors?.map((c) => c.color).filter((c) => c);\n      if (colors?.length) {\n        return colors;\n      }\n    }\n    const res: Record<number, string> = {};\n    gradient\n      ?.filter((g) => g.color && g.percent !== undefined)\n      .map((g) => {\n        res[g.percent] = g.color;\n      });\n    if (Object.keys(res).length) return res;\n    return strokeColor;\n  }, [gradient, props.steps, props.type, stepColors, strokeColor]);\n\n  return (\n    <Progress\n      strokeColor={strokeColorProp}\n      success={success}\n      format={infoFormat}\n      {...rest}\n    />\n  );\n}\n\nexport const progressComponentName = \"plasmic-antd5-progress\";\n\nexport function registerProgress(loader?: Registerable) {\n  registerComponentHelper(loader, AntdProgress, {\n    name: progressComponentName,\n    displayName: \"Progress\",\n    props: {\n      type: {\n        type: \"choice\",\n        defaultValueHint: \"line\",\n        options: [\"line\", \"circle\", \"dashboard\"],\n      },\n      percent: {\n        type: \"number\",\n        description: \"The completion percentage\",\n        defaultValueHint: 0,\n      },\n      size: {\n        type: \"choice\",\n        defaultValueHint: \"default\",\n        description: `Size of progress`,\n        advanced: true,\n        options: [\"default\", \"small\"],\n      },\n      showInfo: {\n        type: \"boolean\",\n        displayName: \"Show text\",\n        defaultValueHint: true,\n        advanced: true,\n        description: \"Display the progress value and the status icon\",\n      },\n      status: {\n        type: \"choice\",\n        defaultValueHint: \"normal\",\n        advanced: true,\n        options: [\"success\", \"exception\", \"normal\", \"active\"],\n      },\n      strokeColor: {\n        type: \"color\",\n        description: \"The color of progress bar\",\n      },\n      strokeLinecap: {\n        type: \"choice\",\n        description: \"Style of endpoints of the progress path\",\n        defaultValueHint: \"round\",\n        advanced: true,\n        options: [\"round\", \"butt\", \"square\"],\n      },\n      successPercent: {\n        type: \"number\",\n        advanced: true,\n      },\n      successStrokeColor: {\n        type: \"color\",\n        description: \"Color of the progress path marked success\",\n        advanced: true,\n        hidden: (ps) => !ps.successPercent,\n      },\n      trailColor: {\n        type: \"color\",\n        advanced: true,\n        description: \"The color of unfilled part\",\n      },\n      infoFormat: {\n        type: \"function\" as const,\n        displayName: \"Format\",\n        defaultValueHint: ({ percent }: AntdProgressProps) =>\n          `${percent || 0}%`,\n        description: \"Customize the progress text\",\n        advanced: true,\n        hidden: (ps: AntdProgressProps) =>\n          ps.showInfo === undefined ? false : !ps.showInfo,\n        argNames: [\"percent\", \"successPercent\"],\n        argValues: (_ps: AntdProgressProps) => [\n          _ps.percent,\n          _ps.successPercent,\n        ],\n      } as any,\n      steps: {\n        type: \"number\",\n        hidden: (ps) => ps.type !== \"line\",\n        advanced: true,\n        description: \"The total step count\",\n      },\n      stepColors: {\n        type: \"array\",\n        hidden: (ps) => (ps.type !== \"line\" ? true : ps.steps == null),\n        advanced: true,\n        itemType: {\n          type: \"object\",\n          nameFunc: (item) => item.color,\n          fields: {\n            color: {\n              type: \"color\",\n            },\n          },\n        },\n      },\n      gradient: {\n        type: \"array\",\n        hidden: (ps) => ps.type === \"line\" && !!ps.steps,\n        advanced: true,\n        itemType: {\n          type: \"object\",\n          nameFunc: (item) => `${item.percent}%: ${item.color}`,\n          fields: {\n            color: {\n              type: \"color\",\n            },\n            percent: {\n              type: \"number\",\n            },\n          },\n        },\n      },\n      strokeWidth: {\n        type: \"number\",\n        hidden: (ps) => ps.type === \"line\",\n        description:\n          \"To set the width of the circular progress, unit: percentage of the canvas width\",\n        advanced: true,\n        defaultValueHint: 6,\n      },\n      gapDegree: {\n        type: \"number\",\n        hidden: (ps) => ps.type !== \"dashboard\",\n        defaultValueHint: 75,\n        advanced: true,\n        description: \"The gap degree of half circle\",\n        min: 0,\n        max: 295,\n      },\n      gapPosition: {\n        type: \"choice\",\n        hidden: (ps) => ps.type !== \"dashboard\",\n        options: [\"top\", \"bottom\", \"left\", \"right\"],\n        advanced: true,\n        defaultValueHint: \"bottom\",\n      },\n    },\n    importPath: \"@plasmicpkgs/antd5/skinny/registerProgress\",\n    importName: \"AntdProgress\",\n  });\n}\n"],"names":["useMemo","React","Progress","registerComponentHelper"],"mappings":"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"}