import { Popover } from 'antd';
import React from 'react';
import { r as registerComponentHelper } from './utils-5ebcaa63.esm.js';
import '@plasmicapp/host/registerComponent';
import '@plasmicapp/host/registerGlobalContext';

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
function AntdPopover(props) {
  const _a = props, {
    overlayClassName,
    popoverScopeClassName,
    defaultStylesClassName,
    contentText,
    content
  } = _a, rest = __objRest(_a, [
    "overlayClassName",
    "popoverScopeClassName",
    "defaultStylesClassName",
    "contentText",
    "content"
  ]);
  return /* @__PURE__ */ React.createElement(
    Popover,
    __spreadValues({
      content: content || contentText,
      overlayClassName: `${overlayClassName} ${popoverScopeClassName} ${defaultStylesClassName}`
    }, rest)
  );
}
function registerPopover(loader) {
  registerComponentHelper(loader, AntdPopover, {
    name: "plasmic-antd5-popover",
    displayName: "Popover",
    isAttachment: true,
    props: {
      open: {
        type: "boolean",
        editOnly: true,
        uncontrolledProp: "defaultOpen",
        description: "Default open state of the popover"
      },
      arrow: {
        type: "boolean",
        defaultValue: true,
        advanced: true
      },
      children: {
        type: "slot",
        defaultValue: "This text element is wrapped in a Popover component",
        mergeWithParent: true
      },
      popoverScopeClassName: {
        type: "styleScopeClass",
        scopeName: "popover"
      },
      popoverContentClassName: {
        type: "class",
        displayName: "Popover content",
        selectors: [
          {
            selector: ":popover.ant-popover .ant-popover-inner",
            label: "Base"
          }
        ]
      },
      overlayClassName: {
        type: "class",
        displayName: "Overlay"
      },
      content: {
        type: "slot",
        displayName: "Popover contents",
        defaultValue: "Popover contents",
        hidePlaceholder: true
      },
      /**
       *  NOTE: contentText ensures that the popover shows as a custom behaviour without modifications
       * (when a random element is given a custom behaviour of Popover, the props of type "slot" do not receive any default value.
       * Therefore we use the contentText which has a string default value, so that the popover shows with at least something)
       *  */
      contentText: {
        type: "string",
        displayName: "Popover contents",
        description: "What gets shown inside the popover on hover",
        defaultValue: "Popover contents",
        hidden: (ps) => !!ps.content
      },
      title: {
        type: "slot",
        displayName: "Popover title",
        hidePlaceholder: true,
        defaultValue: "Popover title"
      },
      color: {
        type: "color",
        description: "Popover fill color"
      },
      trigger: {
        type: "choice",
        options: ["hover", "focus", "click"],
        defaultValueHint: "hover",
        advanced: true
      },
      placement: {
        type: "choice",
        options: [
          "topLeft",
          "top",
          "topRight",
          "leftTop",
          "left",
          "leftBottom",
          "rightTop",
          "right",
          "rightBottom",
          "bottomLeft",
          "bottom",
          "bottomRight"
        ],
        description: "Default placement of popover",
        defaultValueHint: "top"
      },
      mouseEnterDelay: {
        type: "number",
        description: "Delay in seconds, before popover is shown on mouse enter",
        defaultValue: 0,
        advanced: true,
        hidden: (ps) => ps.trigger ? ps.trigger !== "hover" : false
      },
      mouseLeaveDelay: {
        type: "number",
        description: "Delay in seconds, before popover is hidden on mouse leave",
        defaultValue: 0,
        advanced: true,
        hidden: (ps) => ps.trigger ? ps.trigger !== "hover" : false
      },
      onOpenChange: {
        type: "eventHandler",
        argTypes: [{ name: "open", type: "boolean" }],
        advanced: true
      },
      defaultStylesClassName: {
        type: "themeResetClass"
      }
    },
    states: {
      open: {
        type: "writable",
        valueProp: "open",
        onChangeProp: "onOpenChange",
        variableType: "boolean"
      }
    },
    importPath: "@plasmicpkgs/antd5/skinny/registerPopover",
    importName: "AntdPopover"
  });
}

export { AntdPopover, registerPopover };
//# sourceMappingURL=registerPopover.esm.js.map
