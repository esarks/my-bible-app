{"version":3,"file":"FormItem.esm.js","sources":["../src/form/FormItem.tsx"],"sourcesContent":["import { usePlasmicCanvasContext } from \"@plasmicapp/host\";\nimport { CanvasComponentProps } from \"@plasmicapp/host/registerComponent\";\nimport { Form } from \"antd\";\nimport type { FormItemProps } from \"antd/es/form/FormItem\";\nimport React, { cloneElement, isValidElement } from \"react\";\nimport { mergeProps, reactNodeToString } from \"../react-utils\";\nimport { ensureArray, get } from \"../utils\";\nimport {\n  CommonFormControlContextData,\n  FieldEntity,\n  FormLayoutContext,\n  InternalFormInstanceContext,\n  PathContext,\n  useFormInstanceMaybe,\n  useFormItemFullName,\n  useFormItemRelativeName,\n} from \"./contexts\";\n\nconst FormItem = Form.Item;\n\nexport interface FormItemControlContextData\n  extends CommonFormControlContextData {\n  parentFormItemPath: (string | number)[];\n  status?: ReturnType<typeof Form.Item.useStatus>;\n}\n\ninterface CuratedFieldData {\n  status: string | undefined;\n  // path: (string | number)[];\n  // errors: string[];\n  // warnings: string[];\n  // value: any;\n  // trigger: (x: any) => void;\n}\n\nexport interface InternalFormItemProps\n  extends Omit<FormItemProps, \"rules\" | \"name\">,\n    CanvasComponentProps<FormItemControlContextData> {\n  rules?: PlasmicRule[];\n  description?: React.ReactNode;\n  noLabel?: boolean;\n  hideValidationMessage?: boolean;\n  customizeProps?: (\n    fieldData: CuratedFieldData,\n    props: InternalFormItemProps\n  ) => FormItemProps;\n  alignLabellessWithControls?: boolean;\n  name?: string;\n}\n\ninterface PlasmicRule {\n  ruleType:\n    | \"enum\"\n    | \"len\"\n    | \"max\"\n    | \"min\"\n    | \"regex\"\n    | \"required\"\n    | \"whitespace\"\n    | \"advanced\";\n  length?: number;\n  pattern?: string;\n  custom?: (...args: any[]) => any;\n  options?: { value: any }[];\n  message?: string;\n}\n\nfunction plasmicRulesToAntdRules(\n  plasmicRules: PlasmicRule[],\n  label: string | undefined\n) {\n  const effectiveLabel = label || \"This field\";\n  const rules: FormItemProps[\"rules\"] = [];\n  for (const plasmicRule of plasmicRules) {\n    switch (plasmicRule.ruleType) {\n      case \"enum\":\n        rules.push({\n          type: \"enum\",\n          enum: plasmicRule.options?.map((opt) => opt.value) ?? [],\n          message:\n            plasmicRule.message ?? `${effectiveLabel} must be a valid value`,\n        });\n        break;\n      case \"required\":\n        rules.push({\n          required: true,\n          message: plasmicRule.message ?? `${effectiveLabel} is required`,\n        });\n        break;\n      case \"regex\":\n        rules.push({\n          pattern: new RegExp(plasmicRule.pattern ?? \"\"),\n          message:\n            plasmicRule.message ?? `${effectiveLabel} must be a valid value`,\n        });\n        break;\n      case \"whitespace\":\n        rules.push({\n          whitespace: true,\n          message: plasmicRule.message ?? `${effectiveLabel} is required`,\n        });\n        break;\n      case \"min\":\n        rules.push({\n          [plasmicRule.ruleType]: plasmicRule.length,\n          message:\n            plasmicRule.message ??\n            `${effectiveLabel} must be at least ${plasmicRule.length} characters`,\n        });\n        break;\n      case \"max\":\n        rules.push({\n          [plasmicRule.ruleType]: plasmicRule.length,\n          message:\n            plasmicRule.message ??\n            `${effectiveLabel} must be at most ${plasmicRule.length} characters`,\n        });\n        break;\n      case \"advanced\":\n        rules.push({\n          validator: (...args) =>\n            plasmicRule.custom?.apply(null, args)\n              ? Promise.resolve()\n              : Promise.reject(),\n          message: plasmicRule.message,\n        });\n    }\n  }\n  return rules;\n}\n\nexport function FormItemWrapper(props: InternalFormItemProps) {\n  const {\n    rules: plasmicRules,\n    description,\n    noLabel,\n    name,\n    hideValidationMessage,\n    customizeProps,\n    setControlContextData,\n    alignLabellessWithControls = true,\n    ...rest\n  } = props;\n  const relativeFormItemName = useFormItemRelativeName(name);\n  const fullFormItemName = useFormItemFullName(name);\n  const pathCtx = React.useContext(PathContext);\n  const fieldEntity = React.useRef<FieldEntity>({\n    preserve: props.preserve ?? true,\n    fullPath: pathCtx.fullPath,\n    name,\n  }).current;\n  const bestEffortLabel =\n    (!noLabel && reactNodeToString(props.label)) ||\n    ensureArray(props.name).slice(-1)[0];\n  const rules = plasmicRules\n    ? plasmicRulesToAntdRules(\n        plasmicRules,\n        typeof bestEffortLabel === \"number\"\n          ? \"\" + bestEffortLabel\n          : bestEffortLabel\n      )\n    : undefined;\n  const layoutContext = React.useContext(FormLayoutContext);\n  const inCanvas = !!usePlasmicCanvasContext();\n  const {\n    fireOnValuesChange,\n    forceRemount,\n    registerField,\n    initialValues,\n    internalFieldCtx,\n  } = React.useContext(InternalFormInstanceContext) ?? {};\n  if (inCanvas) {\n    const form = useFormInstanceMaybe();\n    const prevPropValues = React.useRef({\n      initialValue: props.initialValue,\n      name: props.name,\n    });\n    props.setControlContextData?.({\n      internalFieldCtx,\n      formInstance: form,\n      parentFormItemPath: pathCtx.fullPath,\n      layout: layoutContext,\n    });\n    React.useEffect(() => {\n      if (prevPropValues.current.name !== props.name) {\n        forceRemount?.();\n      }\n      if (\n        !fullFormItemName ||\n        get(initialValues, fullFormItemName) != null ||\n        props.initialValue == null\n      ) {\n        // this field value is set at the form level\n        return;\n      }\n      form?.setFieldValue(fullFormItemName, props.initialValue);\n      prevPropValues.current.initialValue = props.initialValue;\n      fireOnValuesChange?.();\n    }, [\n      form,\n      props.initialValue,\n      JSON.stringify(pathCtx.fullPath),\n      props.name,\n      props.preserve,\n    ]);\n  }\n  React.useEffect(() => {\n    fieldEntity.fullPath = [\n      ...pathCtx.fullPath,\n      ...(props.name != null ? [props.name] : []),\n    ];\n    fieldEntity.name = props.name;\n    fieldEntity.preserve = props.preserve ?? true;\n  }, [pathCtx.fullPath, props.name, props.preserve]);\n  React.useEffect(() => {\n    const unregister = registerField?.(fieldEntity);\n    return () => unregister?.();\n  }, []);\n  return (\n    <FormItem\n      {...rest}\n      label={noLabel ? undefined : props.label}\n      name={relativeFormItemName}\n      rules={rules}\n      extra={description}\n      help={hideValidationMessage ? \"\" : props.help}\n      colon={noLabel ? false : undefined}\n      valuePropName={deriveValuePropName(props)}\n      trigger={deriveOnChangePropName(props)}\n      // If in horizontal mode and no label, then we align the content\n      // with the rest of the controls in the grid\n      // if alignLabellessWithControls is true\n      wrapperCol={\n        layoutContext?.layout === \"horizontal\" &&\n        noLabel &&\n        alignLabellessWithControls &&\n        layoutContext.labelSpan\n          ? { offset: layoutContext.labelSpan }\n          : undefined\n      }\n    >\n      <FormItemForwarder formItemProps={props} />\n    </FormItem>\n  );\n}\n\n/**\n * Derive the valuePropName to use, if the wrapped child has designated\n * one via its Component.__plasmicFormFieldMeta?.valueProp.\n */\nfunction deriveValuePropName(props: InternalFormItemProps): string | undefined {\n  if (props.valuePropName) {\n    // Always prefer an explicitly specified valuePropName\n    return props.valuePropName;\n  }\n\n  const valueProps = (\n    React.Children.map(props.children as any, (child) => {\n      if (React.isValidElement(child)) {\n        const childType = child.type;\n        if (childType) {\n          const x = (childType as any).__plasmicFormFieldMeta?.valueProp;\n          if (x) {\n            return x as string;\n          }\n          // Hard-coding \"isChecked\" for Plume checkbox / switch\n          const plumeType = (childType as any).__plumeType;\n          if (\n            plumeType &&\n            (plumeType === \"checkbox\" || plumeType === \"switch\")\n          ) {\n            return \"isChecked\";\n          }\n        }\n      }\n      return undefined;\n    }) ?? []\n  ).filter((x: any): x is string => !!x);\n  if (valueProps.length > 0) {\n    return valueProps[0];\n  }\n  return undefined;\n}\n\n/**\n * Derive the onChange prop to use, if the wrapped child has designated\n * one via its Component.__plasmicFormFieldMeta?.valueProp.\n */\nfunction deriveOnChangePropName(\n  props: InternalFormItemProps\n): string | undefined {\n  if (props.trigger) {\n    // Always prefer an explicitly specified valuePropName\n    return props.trigger;\n  }\n\n  const triggerProps = (\n    React.Children.map(props.children as any, (child) => {\n      if (React.isValidElement(child)) {\n        const childType = child.type;\n        if (childType) {\n          const x = (childType as any).__plasmicFormFieldMeta?.onChangeProp;\n          if (x) {\n            return x as string;\n          }\n        }\n      }\n      return undefined;\n    }) ?? []\n  ).filter((x: any): x is string => !!x);\n  if (triggerProps.length > 0) {\n    return triggerProps[0];\n  }\n  return undefined;\n}\n\nfunction FormItemForwarder({ formItemProps, ...props }: any) {\n  const status = Form.Item.useStatus();\n  const internalFormCtx = React.useContext(InternalFormInstanceContext);\n  // const value = props[formItemProps.valuePropName ?? \"value\"];\n  // const trigger = props[formItemProps.trigger ?? \"onChange\"];\n  const data: CuratedFieldData = {\n    status: status.status,\n  };\n  props.setControlContextData?.({\n    internalFormCtx,\n    status,\n  });\n  return React.Children.map(formItemProps.children, (child, i) => {\n    if (i === 0 && isValidElement(child)) {\n      let newProps = {\n        name: formItemProps.name,\n        ...(child.props ?? {}),\n        ...props,\n        __plasmicFormField: true,\n      };\n      if (formItemProps.customizeProps) {\n        newProps = mergeProps(\n          newProps,\n          formItemProps.customizeProps(data, newProps)\n        );\n      }\n      return cloneElement(child, newProps);\n    } else {\n      return child;\n    }\n  });\n}\n"],"names":["_a"],"mappings":"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"}