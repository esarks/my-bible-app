import { Button } from 'antd';
import React from 'react';
import { b as buttonComponentName } from './names-73583568.esm.js';
import { r as registerComponentHelper } from './utils-5ebcaa63.esm.js';
import '@plasmicapp/host/registerComponent';
import '@plasmicapp/host/registerGlobalContext';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
function AntdButton(props) {
  const _a = props, { submitsForm = false, children } = _a, rest = __objRest(_a, ["submitsForm", "children"]);
  const target = props.target === true ? "_blank" : props.target === false ? void 0 : props.target;
  return /* @__PURE__ */ React.createElement(
    Button,
    __spreadProps(__spreadValues({}, rest), {
      children: /* @__PURE__ */ React.createElement(
        "div",
        {
          style: {
            display: "inline-block"
          }
        },
        children
      ),
      htmlType: submitsForm ? "submit" : "button",
      target
    })
  );
}
function registerButton(loader) {
  registerComponentHelper(loader, AntdButton, {
    name: buttonComponentName,
    displayName: "Button",
    props: {
      type: {
        type: "choice",
        options: ["default", "primary", "ghost", "dashed", "link", "text"],
        description: "Can be set to primary, ghost, dashed, link, text, default",
        defaultValueHint: "default"
      },
      size: {
        type: "choice",
        options: ["small", "medium", "large"],
        description: "Set the size of button",
        defaultValueHint: "medium"
      },
      shape: {
        type: "choice",
        options: ["default", "circle", "round"],
        description: "Set the button shape",
        defaultValueHint: "default"
      },
      disabled: {
        type: "boolean",
        description: "Whether the button is disabled",
        defaultValueHint: false
      },
      submitsForm: {
        type: "boolean",
        displayName: "Submits form?",
        defaultValueHint: false,
        description: "whether clicking this button should submit the enclosing form.",
        advanced: true
      },
      ghost: {
        type: "boolean",
        description: "Make background transparent and invert text and border colors",
        defaultValueHint: false,
        advanced: true
      },
      danger: {
        type: "boolean",
        description: "Set the danger status of button",
        defaultValueHint: false,
        advanced: true
      },
      loading: {
        type: "boolean",
        description: "Set the loading status of button",
        defaultValueHint: false,
        advanced: true
      },
      href: {
        displayName: "Link to",
        type: "href",
        description: "Use this button as a link to this url"
      },
      target: {
        type: "boolean",
        displayName: "Open in new tab?",
        description: "Whether to open the link in a new window",
        hidden: (props) => !props.href,
        defaultValueHint: false
      },
      children: __spreadValues({
        type: "slot",
        defaultValue: [
          {
            type: "text",
            value: "Button"
          }
        ]
      }, { mergeWithParent: true }),
      icon: {
        type: "slot",
        hidePlaceholder: true,
        hidden: () => true
      },
      onClick: {
        type: "eventHandler",
        argTypes: []
      }
    },
    importPath: "@plasmicpkgs/antd5/skinny/registerButton",
    importName: "AntdButton"
  });
}

export { AntdButton, registerButton };
//# sourceMappingURL=registerButton.esm.js.map
