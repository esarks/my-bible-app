'use strict';

var antd = require('antd');
var uniqueId = require('lodash/uniqueId');
var React = require('react');
var utils = require('./utils-7711f93b.cjs.js');
require('@plasmicapp/host/registerComponent');
require('@plasmicapp/host/registerGlobalContext');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var uniqueId__default = /*#__PURE__*/_interopDefault(uniqueId);
var React__default = /*#__PURE__*/_interopDefault(React);

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const singleCollapseComponentName = "plasmic-antd5-single-collapse";
const accordionComponentName = "plasmic-antd5-collapse";
const accordionItemComponentName = "plasmic-antd5-collapse-item";
function AntdAccordionItem({ children }) {
  return /* @__PURE__ */ React__default.default.createElement("div", null, children);
}
function AntdAccordion(props) {
  const _a = props, {
    items: itemsRaw,
    activeKey,
    defaultActiveKey,
    expandIcon,
    collapsible,
    disabled,
    rotateCustomExpandIcon
  } = _a, rest = __objRest(_a, [
    "items",
    "activeKey",
    "defaultActiveKey",
    "expandIcon",
    "collapsible",
    "disabled",
    "rotateCustomExpandIcon"
  ]);
  const items = React.useMemo(() => {
    if (!React__default.default.isValidElement(itemsRaw) && !Array.isArray(itemsRaw))
      return [];
    return (Array.isArray(itemsRaw) ? itemsRaw : Array.isArray(itemsRaw.props.children) ? itemsRaw.props.children : [itemsRaw.props.children]).map((currentItem) => {
      const props2 = __spreadProps(__spreadValues({}, currentItem.props), {
        id: currentItem.props.id,
        key: currentItem.props.id,
        children: React__default.default.cloneElement(/* @__PURE__ */ React__default.default.createElement(React__default.default.Fragment, null, currentItem.props.children))
      });
      if (currentItem.props.label) {
        delete props2.label2;
      } else {
        props2.label = props2.label2;
      }
      return props2;
    }).filter((i) => i != null);
  }, [itemsRaw]);
  return /* @__PURE__ */ React__default.default.createElement(
    antd.Collapse,
    __spreadValues({
      accordion: true,
      items,
      defaultActiveKey,
      activeKey,
      collapsible: disabled ? "disabled" : collapsible,
      expandIcon: expandIcon ? ({ isActive }) => /* @__PURE__ */ React__default.default.createElement(
        "div",
        {
          style: isActive && rotateCustomExpandIcon ? { transform: "rotate(90deg)" } : void 0
        },
        expandIcon
      ) : void 0
    }, rest)
  );
}
function AntdSingleCollapse(props) {
  const _a = props, {
    open,
    defaultOpen,
    expandIcon,
    collapsible,
    disabled,
    rotateCustomExpandIcon,
    label: oldLabelProp,
    label2: newLabelProp,
    showArrow,
    extra,
    forceRender,
    children,
    headerClass
  } = _a, rest = __objRest(_a, [
    "open",
    "defaultOpen",
    "expandIcon",
    "collapsible",
    "disabled",
    "rotateCustomExpandIcon",
    "label",
    "label2",
    "showArrow",
    "extra",
    "forceRender",
    "children",
    "headerClass"
  ]);
  const label = oldLabelProp != null ? oldLabelProp : newLabelProp;
  const defaultItemKey = React.useMemo(() => uniqueId__default.default(), []);
  const item = React.useMemo(
    () => ({
      key: defaultItemKey,
      label,
      showArrow,
      extra: /* @__PURE__ */ React__default.default.createElement(React__default.default.Fragment, null, extra),
      headerClass,
      children
    }),
    [label, showArrow, extra, children, defaultItemKey, headerClass]
  );
  return /* @__PURE__ */ React__default.default.createElement(
    antd.Collapse,
    __spreadValues({
      accordion: false,
      items: [item],
      defaultActiveKey: defaultOpen ? item.key : void 0,
      activeKey: open ? item.key : void 0,
      collapsible: disabled ? "disabled" : collapsible,
      expandIcon: expandIcon ? ({ isActive }) => /* @__PURE__ */ React__default.default.createElement(
        "div",
        {
          style: isActive && rotateCustomExpandIcon ? { transform: "rotate(90deg)" } : void 0
        },
        expandIcon
      ) : void 0
    }, rest)
  );
}
const accordionHelpers = {
  states: {
    activePanelId: {
      onChangeArgsToValue: (activeKeys) => activeKeys[0]
    }
  }
};
const singleCollapseHelpers = {
  states: {
    open: {
      onChangeArgsToValue: (activeKeys) => activeKeys.length > 0
    }
  }
};
const commonAccordionProps = {
  bordered: {
    type: "boolean",
    defaultValue: true,
    description: `Display border around accordion `
  },
  disabled: {
    type: "boolean",
    description: "Disable the toggle behaviour of panels"
  },
  expandIcon: {
    type: "slot",
    hidePlaceholder: true
  },
  rotateCustomExpandIcon: {
    type: "boolean",
    description: "Enable rotation of custom expand icon when panel is expanded",
    advanced: true,
    hidden: (ps) => !ps.expandIcon
  },
  expandIconPosition: {
    type: "choice",
    defaultValueHint: "start",
    description: `Set expand icon position`,
    options: ["start", "end"]
  },
  ghost: {
    type: "boolean",
    description: `Make the accordion borderless and its background transparent`
  },
  size: {
    type: "choice",
    defaultValueHint: "middle",
    description: `Set the size of accordion`,
    options: ["large", "middle", "small"]
  },
  onChange: {
    type: "eventHandler",
    argTypes: [{ name: "activeIds", type: "object" }]
  }
};
const commonAccordionItemProps = {
  label: {
    type: "string",
    displayName: "Header Content",
    description: "Text inside the header",
    hidden: (props) => props.label != null ? false : (props == null ? void 0 : props.label2) !== void 0 || (props == null ? void 0 : props.header) === void 0
  },
  label2: {
    type: "slot",
    displayName: "Header Content",
    defaultValue: "Collapse Header",
    hidePlaceholder: true,
    hidden: (props) => props.label != null ? true : (props == null ? void 0 : props.label2) === void 0 && (props == null ? void 0 : props.header) !== void 0
  },
  extra: {
    type: "slot",
    hidePlaceholder: true
  },
  showArrow: {
    type: "boolean",
    defaultValue: true,
    description: `Whether to show animating arrow alongside header text`,
    advanced: true
  },
  headerClass: {
    type: "class",
    displayName: "Header"
  },
  children: __spreadProps(__spreadValues({
    type: "slot",
    hidePlaceholder: true
  }, { mergeWithParent: true }), {
    defaultValue: "Collapsible text..."
  })
};
const commonProps = {
  collapsible: {
    displayName: "Toggle Area",
    type: "choice",
    defaultValueHint: "header",
    description: `Specify the element that can be clicked to toggle a panel`,
    options: ["header", "icon"],
    advanced: true,
    hidden: (ps) => Boolean(ps.disabled)
  },
  destroyInactivePanel: {
    type: "boolean",
    description: `Destroy/Unmount panel if inactive`,
    advanced: true
  },
  forceRender: {
    type: "boolean",
    description: `Force rendering of content in the panel, instead of lazy rendering it.`,
    advanced: true
  }
};
function registerCollapse(loader) {
  utils.registerComponentHelper(loader, AntdSingleCollapse, {
    name: singleCollapseComponentName,
    displayName: "Collapse",
    description: "Accordion, but with a single collapsible block.",
    defaultStyles: {
      width: "stretch"
    },
    props: __spreadValues(__spreadValues(__spreadValues({
      open: {
        editOnly: true,
        displayName: "Open",
        uncontrolledProp: "defaultOpen",
        type: "boolean",
        description: `Default open state of the collapse block`
      }
    }, commonProps), commonAccordionItemProps), commonAccordionProps),
    states: {
      open: __spreadValues({
        type: "writable",
        valueProp: "open",
        onChangeProp: "onChange",
        variableType: "boolean"
      }, singleCollapseHelpers.states.open)
    },
    componentHelpers: {
      helpers: singleCollapseHelpers,
      importName: "singleCollapseHelpers",
      importPath: "@plasmicpkgs/antd5/skinny/registerCollapse"
    },
    importPath: "@plasmicpkgs/antd5/skinny/registerCollapse",
    importName: "AntdSingleCollapse"
  });
  utils.registerComponentHelper(loader, AntdAccordion, {
    name: accordionComponentName,
    displayName: "Accordion",
    defaultStyles: {
      width: "stretch"
    },
    props: __spreadValues(__spreadValues({
      activeKey: {
        editOnly: true,
        displayName: "Active panel ID",
        uncontrolledProp: "defaultActiveKey",
        type: "string",
        description: `ID of Accordion item that is expanded by default.`,
        advanced: true
      },
      items: __spreadProps(__spreadValues({
        type: "slot",
        hidePlaceholder: true,
        allowedComponents: [accordionItemComponentName]
      }, { mergeWithParent: true }), {
        defaultValue: [
          {
            type: "component",
            name: accordionItemComponentName,
            props: {
              id: 1,
              label2: {
                type: "text",
                value: "First Item"
              },
              children: {
                type: "text",
                value: "First Children"
              }
            }
          },
          {
            type: "component",
            name: accordionItemComponentName,
            props: {
              id: 2,
              label2: {
                type: "text",
                value: "Second Item"
              },
              children: {
                type: "text",
                value: "Second Children"
              }
            }
          }
        ]
      })
    }, commonProps), commonAccordionProps),
    states: {
      activePanelId: __spreadValues({
        type: "writable",
        valueProp: "activeKey",
        onChangeProp: "onChange",
        variableType: "text"
      }, accordionHelpers.states.activePanelId)
    },
    componentHelpers: {
      helpers: accordionHelpers,
      importName: "accordionHelpers",
      importPath: "@plasmicpkgs/antd5/skinny/registerCollapse"
    },
    importPath: "@plasmicpkgs/antd5/skinny/registerCollapse",
    importName: "AntdAccordion"
  });
  utils.registerComponentHelper(loader, AntdAccordionItem, {
    name: accordionItemComponentName,
    displayName: "Accordion Item",
    props: __spreadValues(__spreadValues({
      id: {
        type: "string",
        description: `Unique identifier for this item`,
        required: true
      }
    }, commonProps), commonAccordionItemProps),
    importPath: "@plasmicpkgs/antd5/skinny/registerCollapse",
    importName: "AntdAccordionItem",
    parentComponentName: accordionComponentName
  });
}

exports.AntdAccordion = AntdAccordion;
exports.AntdAccordionItem = AntdAccordionItem;
exports.AntdSingleCollapse = AntdSingleCollapse;
exports.accordionComponentName = accordionComponentName;
exports.accordionHelpers = accordionHelpers;
exports.accordionItemComponentName = accordionItemComponentName;
exports.registerCollapse = registerCollapse;
exports.singleCollapseComponentName = singleCollapseComponentName;
exports.singleCollapseHelpers = singleCollapseHelpers;
//# sourceMappingURL=registerCollapse.cjs.js.map
