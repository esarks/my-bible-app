'use strict';

var antd = require('antd');
var React = require('react');
var utils = require('./utils-7711f93b.cjs.js');
require('@plasmicapp/host/registerComponent');
require('@plasmicapp/host/registerGlobalContext');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var React__default = /*#__PURE__*/_interopDefault(React);

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const tabsComponentName = "plasmic-antd5-tabs";
const tabItemComponentName = "plasmic-antd5-tab-item";
const AntdTabItem = ({ children }) => {
  return /* @__PURE__ */ React__default.default.createElement("div", null, children);
};
function getTabItems(items) {
  var _a, _b, _c;
  if (!React__default.default.isValidElement(items) && Array.isArray(items))
    return [...items];
  return ((_a = items == null ? void 0 : items.type) == null ? void 0 : _a.name) == AntdTabItem.name ? [items] : (_c = (_b = items == null ? void 0 : items.props) == null ? void 0 : _b.children) == null ? void 0 : _c.flat(1);
}
function getTabItemKeys(items) {
  const keys = [];
  utils.traverseReactEltTree(items, (elt) => {
    var _a;
    if (((_a = elt == null ? void 0 : elt.type) == null ? void 0 : _a.name) === AntdTabItem.name && typeof (elt == null ? void 0 : elt.key) === "string") {
      keys.push(`${elt.key}`);
    }
  });
  return keys;
}
function AntdTabs(props) {
  const _a = props, {
    items: itemsRaw,
    animated,
    animateTabBar,
    animateTabContent,
    tabBarExtraContentLeft,
    tabBarExtraContentRight,
    sticky,
    stickyOffset,
    tabBarBackground,
    className,
    tabPosition,
    tabsScopeClassName,
    tabsDropdownScopeClassName
  } = _a, rest = __objRest(_a, [
    "items",
    "animated",
    "animateTabBar",
    "animateTabContent",
    "tabBarExtraContentLeft",
    "tabBarExtraContentRight",
    "sticky",
    "stickyOffset",
    "tabBarBackground",
    "className",
    "tabPosition",
    "tabsScopeClassName",
    "tabsDropdownScopeClassName"
  ]);
  const animationProp = React.useMemo(
    () => animated ? {
      inkBar: animateTabBar,
      tabPane: animateTabContent
    } : false,
    [animateTabBar, animateTabContent, animated]
  );
  const items = React.useMemo(() => {
    const tabItems = getTabItems(itemsRaw);
    return tabItems.map((currentItem) => {
      var _a2;
      return __spreadProps(__spreadValues({}, currentItem.props), {
        key: currentItem.key,
        children: /* @__PURE__ */ React__default.default.createElement(React__default.default.Fragment, null, (_a2 = currentItem.props) == null ? void 0 : _a2.children)
      });
    }).filter((i) => i != null);
  }, [itemsRaw]);
  return /* @__PURE__ */ React__default.default.createElement(
    antd.Tabs,
    __spreadValues({
      className: `${className} ${tabsScopeClassName}`,
      popupClassName: tabsDropdownScopeClassName,
      tabBarExtraContent: {
        left: /* @__PURE__ */ React__default.default.createElement(React__default.default.Fragment, null, tabBarExtraContentLeft),
        right: /* @__PURE__ */ React__default.default.createElement(React__default.default.Fragment, null, tabBarExtraContentRight)
      },
      tabPosition,
      renderTabBar: sticky && tabPosition === "top" ? (tabBarProps, DefaultTabBar) => /* @__PURE__ */ React__default.default.createElement(
        "div",
        {
          style: {
            zIndex: 1,
            position: "sticky",
            top: stickyOffset || 0
          }
        },
        /* @__PURE__ */ React__default.default.createElement(
          DefaultTabBar,
          __spreadProps(__spreadValues({}, tabBarProps), {
            style: { backgroundColor: tabBarBackground }
          })
        )
      ) : void 0,
      animated: animationProp,
      items
    }, rest)
  );
}
function OutlineMessage() {
  return /* @__PURE__ */ React__default.default.createElement("div", null, "* To re-arrange tab panes, use the Outline panel");
}
function registerTabs(loader) {
  utils.registerComponentHelper(loader, AntdTabs, {
    name: tabsComponentName,
    displayName: "Tabs",
    defaultStyles: {
      width: "stretch",
      overflow: "scroll"
    },
    props: {
      activeKey: {
        editOnly: true,
        displayName: "Active tab key",
        uncontrolledProp: "defaultActiveKey",
        type: "choice",
        description: `Initial active tab's key`,
        options: (ps) => getTabItemKeys(ps.items)
      },
      animated: {
        type: "boolean",
        defaultValue: true,
        description: "Change tabs with animation"
      },
      animateTabBar: {
        type: "boolean",
        defaultValue: true,
        description: "Animate the tab bar when switching tabs",
        hidden: (ps) => !ps.animated
      },
      animateTabContent: {
        type: "boolean",
        defaultValue: false,
        description: "Fade-in tab content when switching tabs",
        hidden: (ps) => !ps.animated
      },
      centered: {
        type: "boolean",
        description: "Center-align the tab bar"
      },
      type: {
        type: "choice",
        defaultValueHint: "line",
        options: ["line", "card"],
        description: "Basic style of tabs"
      },
      items: __spreadProps(__spreadValues({
        type: "slot",
        hidePlaceholder: true,
        allowedComponents: [tabItemComponentName]
      }, { mergeWithParent: true }), {
        // to make the tab items selectable from the components outline pane in Plasmic Studio.
        defaultValue: [
          {
            type: "component",
            name: tabItemComponentName,
            props: {
              key: "1",
              label: {
                type: "text",
                value: "First Item"
              },
              children: {
                type: "text",
                value: "First Children"
              }
            }
          },
          {
            type: "component",
            name: tabItemComponentName,
            props: {
              key: "2",
              label: {
                type: "text",
                value: "Second Item"
              },
              children: {
                type: "text",
                value: "Second Children"
              }
            }
          }
        ]
      }),
      size: {
        type: "choice",
        defaultValueHint: "middle",
        options: ["large", "middle", "small"],
        description: "Preset tab bar size"
      },
      tabBarExtraContentLeft: {
        type: "slot",
        displayName: "Extra content on left side",
        hidePlaceholder: true
      },
      tabBarExtraContentRight: {
        type: "slot",
        displayName: "Extra content on right side",
        hidePlaceholder: true
      },
      tabBarGutter: {
        type: "number",
        displayName: "Tab gap",
        description: "Gap (in pixels) between tabs",
        advanced: true
      },
      tabPosition: {
        type: "choice",
        defaultValueHint: "top",
        options: ["top", "right", "bottom", "left"],
        description: "Position of tabs"
      },
      destroyInactiveTabPane: {
        type: "boolean",
        description: `Destroy/Unmount inactive tab pane when changing tab`,
        advanced: true
      },
      sticky: {
        type: "boolean",
        advanced: true,
        description: "Stick tab bar to the top of the page when scrolling.",
        defaultValue: false,
        hidden: (ps) => ps.tabPosition !== "top"
      },
      stickyOffset: {
        type: "number",
        advanced: true,
        description: "Distance (in pixels) between the sticky tab bar and the top of the page as you scroll.",
        hidden: (ps) => ps.tabPosition !== "top" || !ps.sticky
      },
      tabBarBackground: {
        type: "color",
        advanced: true,
        defaultValue: "#FFF",
        hidden: (ps) => ps.tabPosition !== "top" || !ps.sticky
      },
      tabsScopeClassName: {
        type: "styleScopeClass",
        scopeName: "tabs"
      },
      tabBarClassName: {
        type: "class",
        displayName: "Tab bar",
        selectors: [
          {
            selector: ":tabs.ant-tabs .ant-tabs-nav",
            label: "Base"
          }
        ]
      },
      tabsDropdownScopeClassName: {
        type: "styleScopeClass",
        scopeName: "tabsDropdown"
      },
      tabsDropdownClassName: {
        type: "class",
        displayName: "Overflow tabs menu",
        selectors: [
          {
            selector: ":tabsDropdown.ant-tabs-dropdown .ant-tabs-dropdown-menu",
            label: "Base"
          }
        ]
      },
      onChange: {
        type: "eventHandler",
        advanced: true,
        argTypes: [{ name: "activeKey", type: "string" }]
      },
      onTabClick: {
        type: "eventHandler",
        advanced: true,
        argTypes: [
          { name: "tabKey", type: "string" },
          { name: "mouseEvent", type: "object" }
        ]
      },
      onTabScroll: {
        type: "eventHandler",
        advanced: true,
        argTypes: [{ name: "scrollInfo", type: "object" }]
      }
    },
    states: {
      activeKey: {
        type: "writable",
        valueProp: "activeKey",
        onChangeProp: "onChange",
        variableType: "text"
      }
    },
    actions: [
      // {
      //   type: "custom-action",
      //   control: NavigateTabs,
      // },
      {
        type: "button-action",
        label: "Add new tab",
        onClick: ({ componentProps, studioOps }) => {
          const generateNewKey = () => {
            const existingKeys = getTabItemKeys(componentProps.items);
            for (let keyCandidate = 1; keyCandidate <= existingKeys.length + 1; keyCandidate++) {
              const strKey = keyCandidate.toString();
              const index = existingKeys.findIndex((k) => {
                return strKey === k;
              });
              if (index === -1) {
                return strKey;
              }
            }
            return void 0;
          };
          const tabKey = generateNewKey();
          studioOps.appendToSlot(
            {
              type: "component",
              name: tabItemComponentName,
              props: {
                key: tabKey,
                label: {
                  type: "text",
                  value: `Tab Label ${tabKey}`
                },
                children: {
                  type: "text",
                  value: `Tab Children ${tabKey}`
                }
              }
            },
            "items"
          );
          studioOps.updateProps({ activeKey: tabKey });
        }
      },
      {
        type: "button-action",
        label: "Delete current tab",
        onClick: ({ componentProps, studioOps }) => {
          if (componentProps.activeKey) {
            const tabPanes = getTabItemKeys(componentProps.items);
            const activeKey = componentProps.activeKey;
            const currTabPos = tabPanes.findIndex((tabKey) => {
              return tabKey === activeKey;
            });
            if (currTabPos !== -1) {
              studioOps.removeFromSlotAt(currTabPos, "items");
              if (tabPanes.length - 1 > 0) {
                const prevTabPos = (currTabPos - 1 + tabPanes.length) % tabPanes.length;
                studioOps.updateProps({ activeKey: tabPanes[prevTabPos] });
              }
            }
          }
        }
      },
      {
        type: "custom-action",
        control: OutlineMessage
      }
    ],
    importPath: "@plasmicpkgs/antd5/skinny/registerTabs",
    importName: "AntdTabs"
  });
  utils.registerComponentHelper(loader, AntdTabItem, {
    name: tabItemComponentName,
    displayName: "Tab Item",
    props: {
      disabled: {
        type: "boolean",
        description: "Disable this tab"
      },
      forceRender: {
        type: "boolean",
        description: `Force render of content in the tab, not lazy render after clicking on the tab`,
        advanced: true
      },
      key: {
        type: "string",
        description: `Unique identifier for this tab`,
        displayName: "Tab key"
      },
      label: {
        type: "slot",
        displayName: "Tab title",
        defaultValue: "Tab"
      },
      children: {
        type: "slot",
        hidePlaceholder: true
      }
    },
    importPath: "@plasmicpkgs/antd5/skinny/registerTabs",
    importName: "AntdTabItem",
    parentComponentName: tabsComponentName
  });
}

exports.AntdTabItem = AntdTabItem;
exports.AntdTabs = AntdTabs;
exports.registerTabs = registerTabs;
exports.tabItemComponentName = tabItemComponentName;
exports.tabsComponentName = tabsComponentName;
//# sourceMappingURL=registerTabs.cjs.js.map
