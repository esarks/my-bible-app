'use strict';

var antd = require('antd');
var React = require('react');
var utils = require('./utils-7711f93b.cjs.js');
require('@plasmicapp/host/registerComponent');
require('@plasmicapp/host/registerGlobalContext');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var React__default = /*#__PURE__*/_interopDefault(React);

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
function useMunged(props) {
  const [autoExpandParent, setAutoExpandParent] = React.useState(
    props.autoExpandParent
  );
  const munged = __spreadProps(__spreadValues({}, props), { autoExpandParent });
  if (!props.expandedKeys) {
    delete munged["expandedKeys"];
  }
  munged.onExpand = (expandedKeys, info) => {
    var _a;
    (_a = props.onExpand) == null ? void 0 : _a.call(props, expandedKeys, info);
    setAutoExpandParent(false);
  };
  return munged;
}
function AntdTree(props) {
  const munged = useMunged(props);
  return /* @__PURE__ */ React__default.default.createElement(antd.Tree, __spreadValues({}, munged));
}
function AntdDirectoryTree(props) {
  const munged = useMunged(props);
  return /* @__PURE__ */ React__default.default.createElement(antd.Tree.DirectoryTree, __spreadValues({}, munged));
}
const treeHelpers_ = {
  states: {
    selectedKeys: {
      onChangeArgsToValue: (selectedKeys, _info) => {
        return selectedKeys;
      }
    },
    selectedNodes: {
      onChangeArgsToValue: (_selectedKeys, info) => {
        return info.selectedNodes;
      }
    },
    expandedKeys: {
      onChangeArgsToValue: (expandedKeys, _info) => {
        return expandedKeys;
      }
    },
    checkedKeys: {
      onChangeArgsToValue: (checkedKeys, _info) => {
        return checkedKeys;
      }
    },
    checkedNodes: {
      onChangeArgsToValue: (_checkedKeys, info) => {
        return info.checkedNodes;
      }
    },
    checkedDetails: {
      onChangeArgsToValue: (_checkedKeys, info) => {
        return {
          checkedNodesPositions: info.checkedNodesPositions,
          halfCheckedKeys: info.halfCheckedKeys
        };
      }
    }
  }
};
const treeHelpers = treeHelpers_;
const treeData = [
  {
    title: "Node 0",
    key: "0",
    children: [
      {
        title: "Node 0-0",
        key: "0-0",
        children: [
          {
            title: "Node 0-0-0",
            key: "0-0-0",
            disableCheckbox: true
          },
          {
            title: "Node 0-0-1",
            key: "0-0-1",
            disabled: true
          },
          {
            title: "Node 0-0-2",
            key: "0-0-2"
          }
        ]
      },
      {
        title: "Node 0-1",
        key: "0-1",
        children: [
          {
            title: "Node 0-1-0",
            key: "0-1-0"
          },
          {
            title: "Node 0-1-1",
            key: "0-1-1"
          }
        ]
      }
    ]
  }
];
function registerTreeHelper({
  loader,
  component,
  name,
  displayName,
  importName,
  checkableDefaultValue,
  expandActionDefaultValue
}) {
  utils.registerComponentHelper(loader, component, {
    name,
    displayName,
    props: {
      treeData: {
        type: "array",
        defaultValue: treeData
      },
      checkable: {
        type: "boolean",
        defaultValue: checkableDefaultValue
      },
      selectable: {
        type: "boolean",
        defaultValueHint: true
      },
      checkedKeys: {
        type: "array",
        editOnly: true,
        uncontrolledProp: "defaultCheckedKeys",
        description: "List of checked keys.",
        hidden: (ps) => !ps.checkable
      },
      selectedKeys: {
        type: "array",
        editOnly: true,
        uncontrolledProp: "defaultSelectedKeys",
        description: "List of selected keys.",
        hidden: (ps) => {
          var _a;
          return !((_a = ps.selectable) != null ? _a : true);
        },
        advanced: true
      },
      expandedKeys: {
        type: "array",
        editOnly: true,
        uncontrolledProp: "defaultExpandedKeys",
        description: "List of expanded keys.",
        // hidden: (ps) => !ps.expa,
        advanced: true
      },
      disabled: {
        type: "boolean",
        defaultValueHint: false
      },
      showLine: {
        type: "boolean",
        defaultValueHint: false
      },
      defaultExpandAll: {
        type: "boolean",
        description: "Whether to automatically expand all nodes at initialization",
        defaultValueHint: false,
        defaultValue: true
      },
      autoExpandParent: {
        type: "boolean",
        description: "Whether to automatically expand a parent node",
        defaultValue: true,
        advanced: true
      },
      defaultExpandParent: {
        type: "boolean",
        description: "Whether to automatically expand a parent node at initialization",
        defaultValueHint: false,
        advanced: true
      },
      expandAction: {
        type: "choice",
        options: [
          {
            label: "None",
            value: false
          },
          {
            label: "Click",
            value: "click"
          },
          {
            label: "Double click",
            value: "doubleClick"
          }
        ],
        defaultValueHint: expandActionDefaultValue
      },
      multiple: {
        type: "boolean",
        defaultValueHint: false,
        description: "Whether to allow multiple selection",
        advanced: true
      },
      titleRender: {
        type: "slot",
        hidePlaceholder: true,
        renderPropParams: ["node"]
      },
      // draggable: {
      //   type: "boolean",
      //   defaultValueHint: false,
      //   advanced: true,
      // },
      // allowDrop: {
      //   type: "boolean",
      //   defaultValueHint: false,
      //   advanced: true,
      //   description: "Whether to allow dropping on the node",
      // },
      onSelect: {
        type: "eventHandler",
        argTypes: [
          { name: "selectedKeys", type: { type: "array" } },
          {
            name: "selectedNodes",
            type: { type: "array" }
          }
        ]
      },
      onCheck: {
        type: "eventHandler",
        argTypes: [
          { name: "checkedKeys", type: { type: "array" } },
          {
            name: "checkDetails",
            type: { type: "object" }
          }
        ]
      },
      onExpand: {
        type: "eventHandler",
        argTypes: [
          { name: "expandedKeys", type: { type: "array" } },
          {
            name: "expandDetails",
            type: { type: "object" }
          }
        ]
      }
    },
    states: {
      checkedKeys: __spreadValues({
        type: "writable",
        valueProp: "checkedKeys",
        onChangeProp: "onCheck",
        variableType: "array"
      }, treeHelpers_.states.checkedKeys),
      checkedNodes: __spreadValues({
        type: "readonly",
        onChangeProp: "onCheck",
        variableType: "array",
        initVal: []
      }, treeHelpers_.states.checkedNodes),
      checkedDetails: __spreadValues({
        type: "readonly",
        onChangeProp: "onCheck",
        variableType: "object",
        initVal: {
          checkedNodesPositions: [],
          halfCheckedKeys: []
        }
      }, treeHelpers_.states.checkedDetails),
      selectedKeys: __spreadValues({
        type: "writable",
        valueProp: "selectedKeys",
        onChangeProp: "onSelect",
        variableType: "array"
      }, treeHelpers_.states.selectedKeys),
      selectedNodes: __spreadValues({
        type: "readonly",
        onChangeProp: "onSelect",
        variableType: "array",
        initVal: []
      }, treeHelpers_.states.selectedNodes),
      expandedKeys: __spreadValues({
        type: "writable",
        valueProp: "expandedKeys",
        onChangeProp: "onExpand",
        variableType: "array"
      }, treeHelpers_.states.expandedKeys)
    },
    componentHelpers: {
      helpers: treeHelpers_,
      importName: "treeHelpers",
      importPath: "@plasmicpkgs/antd5/skinny/registerTree"
    },
    importPath: "@plasmicpkgs/antd5/skinny/registerTree",
    importName
  });
}
function registerTree(loader) {
  registerTreeHelper({
    loader,
    component: AntdTree,
    name: "plasmic-antd5-tree",
    displayName: "Tree",
    importName: "AntdTree",
    checkableDefaultValue: true,
    expandActionDefaultValue: false
  });
}
function registerDirectoryTree(loader) {
  registerTreeHelper({
    loader,
    component: AntdDirectoryTree,
    name: "plasmic-antd5-directory-tree",
    displayName: "Directory Tree",
    importName: "AntdDirectoryTree",
    checkableDefaultValue: false,
    expandActionDefaultValue: "click"
  });
}

exports.AntdDirectoryTree = AntdDirectoryTree;
exports.AntdTree = AntdTree;
exports.registerDirectoryTree = registerDirectoryTree;
exports.registerTree = registerTree;
exports.treeData = treeData;
exports.treeHelpers = treeHelpers;
//# sourceMappingURL=registerTree.cjs.js.map
