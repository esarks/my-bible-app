{"version":3,"file":"registerForm.cjs.js","sources":["../src/form/sharedRegistration.ts","../src/form/registerForm.tsx"],"sourcesContent":["import { ActionProps, PropType } from \"@plasmicapp/host\";\nimport { ArrayType, ControlExtras } from \"@plasmicapp/host/registerComponent\";\nimport { Input, InputNumber, Radio } from \"antd\";\nimport React from \"react\";\nimport { AntdCheckbox } from \"../registerCheckbox\";\nimport { AntdDatePicker } from \"../registerDatePicker\";\nimport { AntdRadioGroup } from \"../registerRadio\";\nimport { AntdSelect } from \"../registerSelect\";\nimport { arrayEq } from \"../utils\";\nimport { CommonFormControlContextData } from \"./contexts\";\nimport {\n  FormWrapperControlContextData,\n  FormWrapperProps,\n  InputType,\n  SimplifiedFormItemsProp,\n} from \"./Form\";\nimport { FormItemControlContextData, InternalFormItemProps } from \"./FormItem\";\n\nconst mapAntdComponentToInputType = new Map<any, InputType>([\n  [Input, InputType.Text],\n  [Input.TextArea, InputType.TextArea],\n  [Input.Password, InputType.Password],\n  [InputNumber, InputType.Number],\n  [AntdSelect, InputType.Select],\n  [AntdRadioGroup, InputType.RadioGroup],\n  [Radio, InputType.Radio],\n  [AntdDatePicker, InputType.DatePicker],\n  [AntdCheckbox, InputType.Checkbox],\n]);\n\nconst mapPlumeTypeToInputType = new Map<string, InputType>([\n  [\"text-input\", InputType.Text],\n  [\"select\", InputType.Select],\n  [\"checkbox\", InputType.Checkbox],\n  [\"switch\", InputType.Checkbox],\n]);\n\nexport const COMMON_ACTIONS = [\n  {\n    type: \"button-action\" as const,\n    label: \"Append new Form Field\",\n    onClick: ({ studioOps }: ActionProps<any>) => {\n      studioOps.appendToSlot(\n        {\n          type: \"component\",\n          name: \"plasmic-antd5-form-item\",\n        },\n        \"children\"\n      );\n    },\n    hidden: (props: any) => props.mode !== \"advanced\",\n  },\n  // {\n  //   type: \"button-action\" as const,\n  //   label: \"Append new Form Field Group\",\n  //   onClick: ({ studioOps }: ActionProps<any>) => {\n  //     studioOps.appendToSlot(\n  //       {\n  //         type: \"component\",\n  //         name: \"plasmic-antd5-form-group\",\n  //       },\n  //       \"children\"\n  //     );\n  //   },\n  // },\n  // {\n  //   type: \"button-action\" as const,\n  //   label: \"Append new Form List\",\n  //   onClick: ({ studioOps }: ActionProps<any>) => {\n  //     studioOps.appendToSlot(\n  //       {\n  //         type: \"component\",\n  //         name: \"plasmic-antd5-form-list\",\n  //       },\n  //       \"children\"\n  //     );\n  //   },\n  // },\n];\n\nexport function getDefaultValueHint(field: keyof SimplifiedFormItemsProp) {\n  return (\n    _props: any,\n    contextData:\n      | FormWrapperControlContextData\n      | FormItemControlContextData\n      | null,\n    { item }: any\n  ): any => {\n    if (!contextData || !(\"mergedFields\" in contextData)) {\n      return undefined;\n    }\n    if (item?.fieldId) {\n      const fieldSetting = contextData.mergedFields?.find(\n        (f) => f.fieldId === item.fieldId\n      );\n      return fieldSetting?.[field];\n    }\n    return undefined;\n  };\n}\n\nexport function commonFormItemProps(\n  usage: \"simplified-form-item\"\n): Record<string, PropType<InternalFormItemProps>>;\nexport function commonFormItemProps(\n  usage: \"advanced-form-item\"\n): Record<string, PropType<FormWrapperProps>>;\nexport function commonFormItemProps(\n  usage: \"simplified-form-item\" | \"advanced-form-item\"\n):\n  | Record<string, PropType<FormWrapperProps>>\n  | Record<string, PropType<InternalFormItemProps>> {\n  const getFormItemProps = (\n    ps: FormWrapperProps | InternalFormItemProps,\n    _ctx: any,\n    { item }: { item?: SimplifiedFormItemsProp }\n  ): InternalFormItemProps | undefined => {\n    if (usage === \"simplified-form-item\") {\n      return item;\n    } else {\n      return ps as InternalFormItemProps;\n    }\n  };\n\n  return {\n    name: {\n      type: \"string\" as const,\n      required: true,\n      displayName: \"Field key\",\n      description: \"Key name for this field value in the submitted form data.\",\n      validator: (\n        value: string,\n        _ps: any,\n        ctx: CommonFormControlContextData | null\n      ) => {\n        let currFullPath: (string | number)[] = [];\n        if (usage === \"simplified-form-item\") {\n          currFullPath = [value];\n        } else {\n          const formItemCtx = ctx as FormItemControlContextData | null;\n          currFullPath = [...(formItemCtx?.parentFormItemPath ?? []), value];\n        }\n        const nameCounter = (\n          ctx?.internalFieldCtx?.registeredFields ?? []\n        ).filter((formItem) => arrayEq(formItem.fullPath, currFullPath)).length;\n        return nameCounter === 1\n          ? true\n          : `Repeated form field key: ${currFullPath.join(\" â†’ \")}`;\n      },\n      defaultValueHint: getDefaultValueHint(\"name\"),\n    },\n    initialValue: {\n      type: \"dynamic\",\n      control: (\n        ps: FormWrapperProps | InternalFormItemProps,\n        ctx: FormWrapperControlContextData | null,\n        {\n          item,\n          path,\n        }: { item: SimplifiedFormItemsProp; path: (string | number)[] }\n      ) => {\n        let inputType = InputType.Unknown;\n        if (usage === \"simplified-form-item\") {\n          inputType = item.inputType;\n          if (!(ps as FormWrapperProps).data) {\n            inputType = item.inputType;\n          } else if (path != null && typeof path[1] === \"number\") {\n            inputType =\n              ctx?.mergedFields?.[path[1]].inputType ?? InputType.Unknown;\n          }\n        } else {\n          if (\n            !React.isValidElement(ps.children) ||\n            typeof ps.children.type === \"string\"\n          ) {\n            inputType = InputType.Unknown;\n          } else {\n            if (mapAntdComponentToInputType.has(ps.children.type)) {\n              inputType =\n                mapAntdComponentToInputType.get(ps.children.type) ??\n                InputType.Unknown;\n            } else if (\"__plumeType\" in ps.children.type) {\n              inputType =\n                mapPlumeTypeToInputType.get(\n                  ps.children.type.__plumeType as string\n                ) ?? InputType.Unknown;\n            }\n          }\n        }\n        if (\n          [\n            InputType.Text,\n            InputType.TextArea,\n            InputType.Password,\n            InputType.Select,\n            InputType.RadioGroup,\n          ].includes(inputType)\n        ) {\n          return {\n            type: \"string\",\n            defaultValueHint: getDefaultValueHint(\"initialValue\"),\n          };\n        } else if (InputType.Number === inputType) {\n          return {\n            type: \"number\",\n            defaultValueHint: getDefaultValueHint(\"initialValue\"),\n          };\n        } else if (InputType.Checkbox === inputType) {\n          return {\n            type: \"boolean\",\n            defaultValueHint: getDefaultValueHint(\"initialValue\"),\n          };\n        } else if (InputType.DatePicker === inputType) {\n          return {\n            type: \"dateString\",\n            defaultValueHint: getDefaultValueHint(\"initialValue\"),\n          };\n        } else {\n          return {\n            type: \"exprEditor\",\n            defaultValueHint: getDefaultValueHint(\"initialValue\"),\n          };\n        }\n      },\n    } as any,\n    rules: {\n      displayName: \"Validation rules\",\n      type: \"formValidationRules\" as const,\n    } as any,\n    valuePropName: {\n      type: \"string\" as const,\n      advanced: true,\n      defaultValueHint: \"value\",\n      description:\n        \"The prop name for specifying the value of the form control component\",\n    },\n    trigger: {\n      type: \"string\" as const,\n      displayName: \"Trigger prop name\",\n      advanced: true,\n      defaultValueHint: \"onChange\",\n      description:\n        \"The prop name of event handler that is called when value is changed\",\n    },\n    noLabel: {\n      type: \"boolean\" as const,\n      advanced: true,\n    },\n    alignLabellessWithControls: {\n      type: \"boolean\" as const,\n      displayName: \"Align with controls?\",\n      description: \"Aligns the content with form controls in the grid\",\n      hidden: (\n        ps: any,\n        ctx: CommonFormControlContextData | null,\n        extras: ControlExtras\n      ) => {\n        const formItem = getFormItemProps(ps, ctx, extras);\n        return !formItem?.noLabel || ctx?.layout?.layout !== \"horizontal\";\n      },\n      defaultValueHint: true,\n    },\n    colon: {\n      type: \"boolean\" as const,\n      defaultValueHint: true,\n      advanced: true,\n      hidden: () => true,\n    },\n    labelAlign: {\n      type: \"choice\" as const,\n      options: [\"left\", \"right\"],\n      advanced: true,\n      hidden: (\n        ps: any,\n        ctx: CommonFormControlContextData | null,\n        extras: ControlExtras\n      ) => {\n        const formItem = getFormItemProps(ps, ctx, extras);\n        return !!formItem?.noLabel || ctx?.layout?.layout !== \"horizontal\";\n      },\n    },\n    hidden: {\n      type: \"boolean\" as const,\n      defaultValueHint: getDefaultValueHint(\"hidden\"),\n    },\n    validateTrigger: {\n      displayName: \"Validate when\",\n      type: \"choice\",\n      options: [\n        { value: \"onBlur\", label: \"a field loses focus\" },\n        { value: \"onChange\", label: \"a field changes\" },\n        { value: \"onSubmit\", label: \"the form is submitted\" },\n      ],\n      multiSelect: true,\n      defaultValueHint: [\"onChange\"],\n      advanced: true,\n    },\n    shouldUpdate: {\n      type: \"boolean\" as const,\n      advanced: true,\n      displayName: \"Always re-render\",\n      description:\n        \"Form fields normally only re-render when the corresponding form value changes, for performance. This forces it to always re-render.\",\n    },\n    dependencies: {\n      type: \"array\" as const,\n      advanced: true,\n      displayName: \"Dependencies\",\n      description:\n        \"Form fields can depend on other form fields. This forces it to re-evaluate the validation rules when the other form fields changes.\",\n    },\n    hideValidationMessage: {\n      type: \"boolean\" as const,\n      displayName: \"Hide validation message?\",\n      description: \"If true, will hide the validation error message\",\n      defaultValueHint: false,\n      advanced: true,\n    },\n    customizeProps: {\n      type: \"function\" as const,\n      description:\n        \"Customize the props passed into the wrapped field component. Takes the current status ('success', 'warning', 'error', or 'validating').)\",\n      argNames: [\"fieldData\"],\n      argValues: (_ps: any, ctx: FormItemControlContextData) => [\n        {\n          status: ctx?.status?.status,\n        },\n      ],\n      advanced: true,\n    } as any,\n    noStyle: {\n      type: \"boolean\" as const,\n      displayName: \"Field control only\",\n      description:\n        \"Don't render anything but the field control - so no label, help text, validation error, etc.\",\n      advanced: true,\n    },\n    preserve: {\n      type: \"boolean\" as const,\n      advanced: true,\n      defaultValueHint: true,\n      description: \"Keep field value even when field removed.\",\n    },\n  };\n}\n\nexport const commonSimplifiedFormArrayItemType = (\n  propName: \"formItems\" | \"dataFormItems\"\n): ArrayType<FormWrapperProps>[\"itemType\"] => ({\n  type: \"object\",\n  fields: {\n    label: {\n      type: \"string\",\n      defaultValueHint: getDefaultValueHint(\"label\"),\n    },\n    inputType: {\n      type: \"choice\",\n      options: Object.values(InputType).filter(\n        (inputType) =>\n          ![\n            InputType.Option,\n            InputType.OptionGroup,\n            InputType.Radio,\n            InputType.Unknown,\n          ].includes(inputType)\n      ),\n      defaultValue: InputType.Text,\n      defaultValueHint: getDefaultValueHint(\"inputType\"),\n    },\n    options: {\n      type: \"array\",\n      itemType: {\n        type: \"object\",\n        fields: {\n          type: {\n            type: \"choice\",\n            options: [\n              { value: \"option\", label: \"Option\" },\n              { value: \"option-group\", label: \"Option Group\" },\n            ],\n            defaultValue: \"option\",\n            hidden: (ps, _ctx, { path }) => {\n              if (\n                ps[propName]?.[path[1] as number]?.inputType !==\n                InputType.Select\n              ) {\n                return true;\n              }\n              return false;\n            },\n          },\n          label: \"string\",\n          value: {\n            type: \"string\",\n            hidden: (ps, _ctx, { path, item }) => {\n              if (\n                ps[propName]?.[path[1] as number]?.inputType !==\n                InputType.Select\n              ) {\n                return false;\n              }\n              return item.type !== \"option\";\n            },\n          },\n          options: {\n            type: \"array\",\n            itemType: {\n              type: \"object\",\n              nameFunc: (item: any) => item.label || item.value,\n              fields: {\n                value: \"string\",\n                label: \"string\",\n              },\n            },\n            hidden: (ps, _ctx, { path, item }) => {\n              if (\n                ps[propName]?.[path[1] as number]?.inputType !==\n                InputType.Select\n              ) {\n                return true;\n              }\n              return item.type !== \"option-group\";\n            },\n          },\n        },\n        nameFunc: (item) => item?.label,\n      },\n      hidden: (_ps: any, _ctx: any, { item }) =>\n        ![InputType.Select, InputType.RadioGroup].includes(item.inputType),\n    },\n    optionType: {\n      type: \"choice\",\n      options: [\n        { value: \"default\", label: \"Radio\" },\n        { value: \"button\", label: \"Button\" },\n      ],\n      hidden: (_ps: any, _ctx: any, { item }) =>\n        InputType.RadioGroup !== item.inputType,\n      defaultValueHint: \"Radio\",\n      displayName: \"Option Type\",\n    },\n    showTime: {\n      type: \"boolean\",\n      displayName: \"Show Time\",\n      description: \"To provide an additional time selection\",\n      hidden: (_ps: any, _ctx: any, { item }) =>\n        ![InputType.DatePicker].includes(item.inputType),\n    },\n    ...commonFormItemProps(\"simplified-form-item\"),\n  },\n  nameFunc: (item) => item.fieldId ?? item.label ?? item.name,\n});\n","import { buttonComponentName, formComponentName } from \"../names\";\nimport { Registerable, registerComponentHelper } from \"../utils\";\nimport { formHelpers, FormWrapperProps, InputType } from \"./Form\";\nimport { FormWrapper } from \"./SchemaForm\";\nimport {\n  commonSimplifiedFormArrayItemType,\n  COMMON_ACTIONS,\n} from \"./sharedRegistration\";\n\nconst colProp = (\n  displayName: string,\n  defaultValue?: object,\n  description?: string\n) =>\n  ({\n    type: \"object\",\n    displayName: displayName,\n    advanced: true,\n    fields: {\n      span: {\n        type: \"number\",\n        displayName: \"Width\",\n        description:\n          \"The number of grid columns to span in width (out of 24 columns total)\",\n        min: 1,\n        max: 24,\n      },\n      offset: {\n        type: \"number\",\n        displayName: \"Offset\",\n        description:\n          \"Number of grid columns to skip from the left (out of 24 columns total)\",\n        min: 0,\n        max: 23,\n      },\n      horizontalOnly: {\n        type: \"boolean\",\n        displayName: \"Horizontal only\",\n        description: \"Only apply when form layout is horizontal\",\n      },\n    },\n    nameFunc: () => `Edit ${displayName}`,\n    description,\n    defaultValue: defaultValue,\n  } as const);\n\nexport const formTypeDescription = `\n  You can create form with two different behaviors:\n  \\n\\n\n  1. Create a new entry: The form will be created empty and it will create a new row when submitted.\n  2. Update an entry: The form will be pre-filled with the row values and it will update the table entry when submitted.\n  \\n\\n\n  For both options, you can customize later.\n`;\n\nexport function registerForm(loader?: Registerable) {\n  registerComponentHelper(loader, FormWrapper, {\n    name: formComponentName,\n    displayName: \"Form\",\n    description:\n      \"[Learn how to use forms](https://docs.plasmic.app/learn/forms/)\",\n    defaultStyles: {\n      layout: \"vbox\",\n      alignItems: \"flex-start\",\n    },\n    props: {\n      mode: {\n        type: \"controlMode\",\n        defaultValue: \"simplified\",\n      } as any,\n      data: {\n        type: \"formDataConnection\",\n        disableDynamicValue: true,\n        disableLinkToProp: true,\n        hidden: (ps: FormWrapperProps) => ps.mode !== \"simplified\" || !ps.data,\n        invariantable: true,\n      } as any,\n      formItems: {\n        displayName: \"Fields\",\n        type: \"array\",\n        itemType: commonSimplifiedFormArrayItemType(\"formItems\"),\n        defaultValue: [\n          {\n            label: \"Name\",\n            name: \"name\",\n            inputType: InputType.Text,\n          },\n          {\n            label: \"Message\",\n            name: \"message\",\n            inputType: InputType.TextArea,\n          },\n        ],\n        hidden: (ps) => {\n          if (ps.mode === \"advanced\") {\n            return true;\n          }\n          return !!ps.data;\n        },\n        invariantable: true,\n      },\n      /**\n       * dataFormItems are used to expand the form items from schema forms.\n       * We can't use the formItems prop because it has a default value. Therefore, if we unset the formItems prop,\n       * we would end up with the default value of formItems + schema form items.\n       * Ideally, we would need to support dynamic default value.\n       */\n      dataFormItems: {\n        displayName: \"Data Fields\",\n        type: \"array\",\n        itemType: commonSimplifiedFormArrayItemType(\"dataFormItems\"),\n        hidden: (ps) => {\n          if (ps.mode === \"advanced\") {\n            return true;\n          }\n          return !ps.data;\n        },\n        unstable__keyFunc: (x) => x.key,\n        unstable__minimalValue: (ps, contextData) => {\n          return ps.data ? contextData?.minimalFullLengthFields : undefined;\n        },\n        unstable__canDelete: (item, ps, ctx) => {\n          if (ps.mode !== \"simplified\") {\n            return true;\n          }\n          if (!ctx?.schema) {\n            // still loading...\n            return false;\n          }\n          if (\n            item.fieldId &&\n            ctx.schema.fields.some((f) => f.id === item.fieldId)\n          ) {\n            return false;\n          }\n          return true;\n        },\n        invariantable: true,\n      },\n      submitSlot: {\n        type: \"slot\",\n        hidden: () => true,\n        defaultValue: {\n          type: \"component\",\n          name: buttonComponentName,\n          props: {\n            type: \"primary\",\n            submitsForm: true,\n            children: {\n              type: \"text\",\n              value: \"Submit\",\n            },\n          },\n        },\n        ...{\n          mergeWithParent: () => true,\n          hiddenMergedProps: (ps: any) => !ps.mode,\n        },\n      },\n      children: {\n        type: \"slot\",\n        hidden: (props) => props.mode !== \"advanced\",\n      },\n      initialValues: {\n        displayName: \"Initial field values\",\n        type: \"object\",\n      } as any,\n      layout: {\n        displayName: \"Form layout\",\n        type: \"choice\",\n        options: [\"horizontal\", \"vertical\", \"inline\"],\n        defaultValue: \"vertical\",\n      },\n      labelAlign: {\n        type: \"choice\",\n        options: [\"left\", \"right\"],\n        defaultValueHint: \"right\",\n        advanced: true,\n        hidden: (ps) => ps.layout !== \"horizontal\",\n      },\n      labelCol: colProp(\n        \"Label layout\",\n        {\n          span: 8,\n          horizontalOnly: true,\n        },\n        \"Set the width and offset of the labels\"\n      ),\n      wrapperCol: colProp(\n        \"Control layout\",\n        {\n          span: 16,\n          horizontalOnly: true,\n        },\n        \"Set the width and offset of the form controls\"\n      ),\n      colon: {\n        type: \"boolean\",\n        description: `Show a colon after labels by default (only for horizontal layout)`,\n        defaultValueHint: true,\n        advanced: true,\n        hidden: (props) => (props.layout ?? \"horizontal\") !== \"horizontal\",\n      },\n      requiredMark: {\n        displayName: \"Required/optional indicators\",\n        type: \"choice\",\n        options: [\n          {\n            value: \"optional\",\n            label: \"Indicate optional fields\",\n          },\n          {\n            value: true,\n            label: \"Indicate required fields with asterisk\",\n          },\n          {\n            value: false,\n            label: \"Show no indicators\",\n          },\n        ],\n        advanced: true,\n        defaultValueHint: true,\n      },\n      extendedOnValuesChange: {\n        type: \"eventHandler\",\n        displayName: \"On values change\",\n        argTypes: [\n          {\n            name: \"changedValues\",\n            type: \"object\",\n          },\n          {\n            name: \"allValues\",\n            type: \"object\",\n          },\n        ],\n      },\n      onFinish: {\n        type: \"eventHandler\",\n        displayName: \"On submit\",\n        argTypes: [\n          {\n            name: \"values\",\n            type: \"object\",\n          },\n        ],\n      },\n      onFinishFailed: {\n        // function({ values, errorFields, outOfDate })\n        type: \"eventHandler\",\n        displayName: \"On invalid submit\",\n        argTypes: [\n          {\n            name: \"data\",\n            type: \"object\",\n          },\n        ],\n      },\n      validateTrigger: {\n        displayName: \"Validate when\",\n        type: \"choice\",\n        options: [\n          { value: \"onBlur\", label: \"a field loses focus\" },\n          { value: \"onChange\", label: \"a field changes\" },\n          { value: \"onSubmit\", label: \"the form is submitted\" },\n        ],\n        multiSelect: true,\n        defaultValueHint: [\"onChange\"],\n        advanced: true,\n      },\n      autoDisableWhileSubmitting: {\n        displayName: \"Auto disable while submitting\",\n        type: \"boolean\",\n        defaultValueHint: true,\n        advanced: true,\n        description:\n          \"When disabled, it allows the creation of new submissions even while existing submissions are in progress.\",\n      },\n      onIsSubmittingChange: {\n        type: \"eventHandler\",\n        displayName: \"On Is Submitting Change\",\n        argTypes: [\n          {\n            name: \"isSubmitting\",\n            type: \"boolean\",\n          },\n        ],\n        advanced: true,\n      },\n    },\n    actions: [\n      ...COMMON_ACTIONS,\n      {\n        type: \"form-schema\",\n        hidden: (ps: FormWrapperProps) => ps.mode !== \"simplified\" || !!ps.data,\n      } as any,\n    ],\n    states: {\n      value: {\n        type: \"readonly\",\n        variableType: \"object\",\n        onChangeProp: \"extendedOnValuesChange\",\n      },\n      isSubmitting: {\n        type: \"readonly\",\n        variableType: \"boolean\",\n        onChangeProp: \"onIsSubmittingChange\",\n        initVal: false,\n      },\n    },\n    componentHelpers: {\n      helpers: formHelpers,\n      importName: \"formHelpers\",\n      importPath: \"@plasmicpkgs/antd5/skinny/Form\",\n    },\n    refActions: {\n      setFieldsValue: {\n        displayName: \"Set multiple fields\",\n        argTypes: [\n          {\n            name: \"newValues\",\n            displayName: \"New Values\",\n            type: \"exprEditor\",\n          },\n        ],\n      },\n      setFieldValue: {\n        displayName: \"Set field\",\n        argTypes: [\n          {\n            name: \"namePath\",\n            displayName: \"Name Path\",\n            type: {\n              type: \"dataSelector\",\n              data: (_, ctx) => {\n                if (!ctx?.formInstance) {\n                  return {};\n                }\n                return ctx.formInstance.getFieldsValue(true);\n              },\n            },\n          },\n          {\n            name: \"value\",\n            displayName: \"New Value\",\n            type: \"exprEditor\",\n          },\n        ],\n      },\n      resetFields: {\n        displayName: \"Reset fields to initial value\",\n        argTypes: [],\n      },\n      clearFields: {\n        displayName: \"Clear fields\",\n        argTypes: [],\n      },\n      validateFields: {\n        displayName: \"Validate fields\",\n        argTypes: [\n          {\n            name: \"nameList\",\n            displayName: \"Name List\",\n            type: \"object\",\n          },\n          {\n            name: \"options\",\n            displayName: \"Options\",\n            type: \"object\",\n          },\n        ],\n      },\n    },\n    importPath: \"@plasmicpkgs/antd5/skinny/SchemaForm\",\n    importName: \"FormWrapper\",\n  });\n}\n\n// To maintain backward compatibility, we need to continue exporting these components,\n// which were previously imported from \"@plasmicpkgs/antd5/skinny/registerForm.\"\nexport { FormGroup } from \"./FormGroup\";\nexport { FormItemWrapper } from \"./FormItem\";\nexport { FormListWrapper } from \"./FormList\";\nexport { formHelpers, FormWrapper };\n"],"names":["Input","InputType","InputNumber","AntdSelect","AntdRadioGroup","Radio","AntdDatePicker","AntdCheckbox","arrayEq","React","__spreadValues","registerComponentHelper","FormWrapper","formComponentName","buttonComponentName","formHelpers"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkBA,MAAM,2BAAA,uBAAkC,GAAoB,CAAA;AAAA,EAC1D,CAACA,UAAO,EAAAC,cAAA,CAAU,IAAI,CAAA;AAAA,EACtB,CAACD,UAAA,CAAM,QAAU,EAAAC,cAAA,CAAU,QAAQ,CAAA;AAAA,EACnC,CAACD,UAAA,CAAM,QAAU,EAAAC,cAAA,CAAU,QAAQ,CAAA;AAAA,EACnC,CAACC,gBAAa,EAAAD,cAAA,CAAU,MAAM,CAAA;AAAA,EAC9B,CAACE,yBAAY,EAAAF,cAAA,CAAU,MAAM,CAAA;AAAA,EAC7B,CAACG,4BAAgB,EAAAH,cAAA,CAAU,UAAU,CAAA;AAAA,EACrC,CAACI,UAAO,EAAAJ,cAAA,CAAU,KAAK,CAAA;AAAA,EACvB,CAACK,iCAAgB,EAAAL,cAAA,CAAU,UAAU,CAAA;AAAA,EACrC,CAACM,6BAAc,EAAAN,cAAA,CAAU,QAAQ,CAAA;AACnC,CAAC,CAAA,CAAA;AAED,MAAM,uBAAA,uBAA8B,GAAuB,CAAA;AAAA,EACzD,CAAC,YAAc,EAAAA,cAAA,CAAU,IAAI,CAAA;AAAA,EAC7B,CAAC,QAAU,EAAAA,cAAA,CAAU,MAAM,CAAA;AAAA,EAC3B,CAAC,UAAY,EAAAA,cAAA,CAAU,QAAQ,CAAA;AAAA,EAC/B,CAAC,QAAU,EAAAA,cAAA,CAAU,QAAQ,CAAA;AAC/B,CAAC,CAAA,CAAA;AAEM,MAAM,cAAiB,GAAA;AAAA,EAC5B;AAAA,IACE,IAAM,EAAA,eAAA;AAAA,IACN,KAAO,EAAA,uBAAA;AAAA,IACP,OAAS,EAAA,CAAC,EAAE,SAAA,EAAkC,KAAA;AAC5C,MAAU,SAAA,CAAA,YAAA;AAAA,QACR;AAAA,UACE,IAAM,EAAA,WAAA;AAAA,UACN,IAAM,EAAA,yBAAA;AAAA,SACR;AAAA,QACA,UAAA;AAAA,OACF,CAAA;AAAA,KACF;AAAA,IACA,MAAQ,EAAA,CAAC,KAAe,KAAA,KAAA,CAAM,IAAS,KAAA,UAAA;AAAA,GACzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA2BF,CAAA,CAAA;AAEO,SAAS,oBAAoB,KAAsC,EAAA;AACxE,EAAA,OAAO,CACL,MAAA,EACA,WAIA,EAAA,EAAE,MACM,KAAA;AAxFZ,IAAA,IAAA,EAAA,CAAA;AAyFI,IAAA,IAAI,CAAC,WAAA,IAAe,EAAE,cAAA,IAAkB,WAAc,CAAA,EAAA;AACpD,MAAO,OAAA,KAAA,CAAA,CAAA;AAAA,KACT;AACA,IAAA,IAAI,6BAAM,OAAS,EAAA;AACjB,MAAM,MAAA,YAAA,GAAA,CAAe,EAAY,GAAA,WAAA,CAAA,YAAA,KAAZ,IAA0B,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAA;AAAA,QAC7C,CAAC,CAAA,KAAM,CAAE,CAAA,OAAA,KAAY,IAAK,CAAA,OAAA;AAAA,OAAA,CAAA;AAE5B,MAAA,OAAO,YAAe,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,YAAA,CAAA,KAAA,CAAA,CAAA;AAAA,KACxB;AACA,IAAO,OAAA,KAAA,CAAA,CAAA;AAAA,GACT,CAAA;AACF,CAAA;AAQO,SAAS,oBACd,KAGkD,EAAA;AAClD,EAAA,MAAM,mBAAmB,CACvB,EAAA,EACA,IACA,EAAA,EAAE,MACoC,KAAA;AACtC,IAAA,IAAI,UAAU,sBAAwB,EAAA;AACpC,MAAO,OAAA,IAAA,CAAA;AAAA,KACF,MAAA;AACL,MAAO,OAAA,EAAA,CAAA;AAAA,KACT;AAAA,GACF,CAAA;AAEA,EAAO,OAAA;AAAA,IACL,IAAM,EAAA;AAAA,MACJ,IAAM,EAAA,QAAA;AAAA,MACN,QAAU,EAAA,IAAA;AAAA,MACV,WAAa,EAAA,WAAA;AAAA,MACb,WAAa,EAAA,2DAAA;AAAA,MACb,SAAW,EAAA,CACT,KACA,EAAA,GAAA,EACA,GACG,KAAA;AAvIX,QAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA;AAwIQ,QAAA,IAAI,eAAoC,EAAC,CAAA;AACzC,QAAA,IAAI,UAAU,sBAAwB,EAAA;AACpC,UAAA,YAAA,GAAe,CAAC,KAAK,CAAA,CAAA;AAAA,SAChB,MAAA;AACL,UAAA,MAAM,WAAc,GAAA,GAAA,CAAA;AACpB,UAAA,YAAA,GAAe,CAAC,GAAI,CAAA,EAAA,GAAA,WAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,WAAA,CAAa,uBAAb,IAAmC,GAAA,EAAA,GAAA,IAAK,KAAK,CAAA,CAAA;AAAA,SACnE;AACA,QAAA,MAAM,gBACJ,EAAK,GAAA,CAAA,EAAA,GAAA,GAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,GAAA,CAAA,gBAAA,KAAL,IAAuB,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,gBAAA,KAAvB,YAA2C,EAAC,EAC5C,MAAO,CAAA,CAAC,aAAaO,aAAQ,CAAA,QAAA,CAAS,QAAU,EAAA,YAAY,CAAC,CAAE,CAAA,MAAA,CAAA;AACjE,QAAA,OAAO,gBAAgB,CACnB,GAAA,IAAA,GACA,CAA4B,yBAAA,EAAA,YAAA,CAAa,KAAK,UAAK,CAAA,CAAA,CAAA,CAAA;AAAA,OACzD;AAAA,MACA,gBAAA,EAAkB,oBAAoB,MAAM,CAAA;AAAA,KAC9C;AAAA,IACA,YAAc,EAAA;AAAA,MACZ,IAAM,EAAA,SAAA;AAAA,MACN,OAAA,EAAS,CACP,EAAA,EACA,GACA,EAAA;AAAA,QACE,IAAA;AAAA,QACA,IAAA;AAAA,OAEC,KAAA;AAjKX,QAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA;AAkKQ,QAAA,IAAI,YAAYP,cAAU,CAAA,OAAA,CAAA;AAC1B,QAAA,IAAI,UAAU,sBAAwB,EAAA;AACpC,UAAA,SAAA,GAAY,IAAK,CAAA,SAAA,CAAA;AACjB,UAAI,IAAA,CAAE,GAAwB,IAAM,EAAA;AAClC,YAAA,SAAA,GAAY,IAAK,CAAA,SAAA,CAAA;AAAA,qBACR,IAAQ,IAAA,IAAA,IAAQ,OAAO,IAAK,CAAA,CAAC,MAAM,QAAU,EAAA;AACtD,YACE,SAAA,GAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,GAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,GAAA,CAAK,iBAAL,IAAoB,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAA,CAAK,CAAC,CAAG,CAAA,CAAA,SAAA,KAA7B,YAA0CA,cAAU,CAAA,OAAA,CAAA;AAAA,WACxD;AAAA,SACK,MAAA;AACL,UACE,IAAA,CAACQ,sBAAM,CAAA,cAAA,CAAe,EAAG,CAAA,QAAQ,KACjC,OAAO,EAAA,CAAG,QAAS,CAAA,IAAA,KAAS,QAC5B,EAAA;AACA,YAAA,SAAA,GAAYR,cAAU,CAAA,OAAA,CAAA;AAAA,WACjB,MAAA;AACL,YAAA,IAAI,2BAA4B,CAAA,GAAA,CAAI,EAAG,CAAA,QAAA,CAAS,IAAI,CAAG,EAAA;AACrD,cAAA,SAAA,GAAA,CACE,iCAA4B,GAAI,CAAA,EAAA,CAAG,SAAS,IAAI,CAAA,KAAhD,YACAA,cAAU,CAAA,OAAA,CAAA;AAAA,aACH,MAAA,IAAA,aAAA,IAAiB,EAAG,CAAA,QAAA,CAAS,IAAM,EAAA;AAC5C,cAAA,SAAA,GAAA,CACE,EAAwB,GAAA,uBAAA,CAAA,GAAA;AAAA,gBACtB,EAAA,CAAG,SAAS,IAAK,CAAA,WAAA;AAAA,eACnB,KAFA,YAEKA,cAAU,CAAA,OAAA,CAAA;AAAA,aACnB;AAAA,WACF;AAAA,SACF;AACA,QACE,IAAA;AAAA,UACEA,cAAU,CAAA,IAAA;AAAA,UACVA,cAAU,CAAA,QAAA;AAAA,UACVA,cAAU,CAAA,QAAA;AAAA,UACVA,cAAU,CAAA,MAAA;AAAA,UACVA,cAAU,CAAA,UAAA;AAAA,SACZ,CAAE,QAAS,CAAA,SAAS,CACpB,EAAA;AACA,UAAO,OAAA;AAAA,YACL,IAAM,EAAA,QAAA;AAAA,YACN,gBAAA,EAAkB,oBAAoB,cAAc,CAAA;AAAA,WACtD,CAAA;AAAA,SACF,MAAA,IAAWA,cAAU,CAAA,MAAA,KAAW,SAAW,EAAA;AACzC,UAAO,OAAA;AAAA,YACL,IAAM,EAAA,QAAA;AAAA,YACN,gBAAA,EAAkB,oBAAoB,cAAc,CAAA;AAAA,WACtD,CAAA;AAAA,SACF,MAAA,IAAWA,cAAU,CAAA,QAAA,KAAa,SAAW,EAAA;AAC3C,UAAO,OAAA;AAAA,YACL,IAAM,EAAA,SAAA;AAAA,YACN,gBAAA,EAAkB,oBAAoB,cAAc,CAAA;AAAA,WACtD,CAAA;AAAA,SACF,MAAA,IAAWA,cAAU,CAAA,UAAA,KAAe,SAAW,EAAA;AAC7C,UAAO,OAAA;AAAA,YACL,IAAM,EAAA,YAAA;AAAA,YACN,gBAAA,EAAkB,oBAAoB,cAAc,CAAA;AAAA,WACtD,CAAA;AAAA,SACK,MAAA;AACL,UAAO,OAAA;AAAA,YACL,IAAM,EAAA,YAAA;AAAA,YACN,gBAAA,EAAkB,oBAAoB,cAAc,CAAA;AAAA,WACtD,CAAA;AAAA,SACF;AAAA,OACF;AAAA,KACF;AAAA,IACA,KAAO,EAAA;AAAA,MACL,WAAa,EAAA,kBAAA;AAAA,MACb,IAAM,EAAA,qBAAA;AAAA,KACR;AAAA,IACA,aAAe,EAAA;AAAA,MACb,IAAM,EAAA,QAAA;AAAA,MACN,QAAU,EAAA,IAAA;AAAA,MACV,gBAAkB,EAAA,OAAA;AAAA,MAClB,WACE,EAAA,sEAAA;AAAA,KACJ;AAAA,IACA,OAAS,EAAA;AAAA,MACP,IAAM,EAAA,QAAA;AAAA,MACN,WAAa,EAAA,mBAAA;AAAA,MACb,QAAU,EAAA,IAAA;AAAA,MACV,gBAAkB,EAAA,UAAA;AAAA,MAClB,WACE,EAAA,qEAAA;AAAA,KACJ;AAAA,IACA,OAAS,EAAA;AAAA,MACP,IAAM,EAAA,SAAA;AAAA,MACN,QAAU,EAAA,IAAA;AAAA,KACZ;AAAA,IACA,0BAA4B,EAAA;AAAA,MAC1B,IAAM,EAAA,SAAA;AAAA,MACN,WAAa,EAAA,sBAAA;AAAA,MACb,WAAa,EAAA,mDAAA;AAAA,MACb,MAAQ,EAAA,CACN,EACA,EAAA,GAAA,EACA,MACG,KAAA;AAjQX,QAAA,IAAA,EAAA,CAAA;AAkQQ,QAAA,MAAM,QAAW,GAAA,gBAAA,CAAiB,EAAI,EAAA,GAAA,EAAK,MAAM,CAAA,CAAA;AACjD,QAAA,OAAO,EAAC,QAAU,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,QAAA,CAAA,OAAA,CAAA,IAAA,CAAA,CAAW,EAAK,GAAA,GAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,GAAA,CAAA,MAAA,KAAL,mBAAa,MAAW,MAAA,YAAA,CAAA;AAAA,OACvD;AAAA,MACA,gBAAkB,EAAA,IAAA;AAAA,KACpB;AAAA,IACA,KAAO,EAAA;AAAA,MACL,IAAM,EAAA,SAAA;AAAA,MACN,gBAAkB,EAAA,IAAA;AAAA,MAClB,QAAU,EAAA,IAAA;AAAA,MACV,QAAQ,MAAM,IAAA;AAAA,KAChB;AAAA,IACA,UAAY,EAAA;AAAA,MACV,IAAM,EAAA,QAAA;AAAA,MACN,OAAA,EAAS,CAAC,MAAA,EAAQ,OAAO,CAAA;AAAA,MACzB,QAAU,EAAA,IAAA;AAAA,MACV,MAAQ,EAAA,CACN,EACA,EAAA,GAAA,EACA,MACG,KAAA;AArRX,QAAA,IAAA,EAAA,CAAA;AAsRQ,QAAA,MAAM,QAAW,GAAA,gBAAA,CAAiB,EAAI,EAAA,GAAA,EAAK,MAAM,CAAA,CAAA;AACjD,QAAA,OAAO,CAAC,EAAC,QAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,QAAA,CAAU,cAAW,EAAK,GAAA,GAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,GAAA,CAAA,MAAA,KAAL,mBAAa,MAAW,MAAA,YAAA,CAAA;AAAA,OACxD;AAAA,KACF;AAAA,IACA,MAAQ,EAAA;AAAA,MACN,IAAM,EAAA,SAAA;AAAA,MACN,gBAAA,EAAkB,oBAAoB,QAAQ,CAAA;AAAA,KAChD;AAAA,IACA,eAAiB,EAAA;AAAA,MACf,WAAa,EAAA,eAAA;AAAA,MACb,IAAM,EAAA,QAAA;AAAA,MACN,OAAS,EAAA;AAAA,QACP,EAAE,KAAA,EAAO,QAAU,EAAA,KAAA,EAAO,qBAAsB,EAAA;AAAA,QAChD,EAAE,KAAA,EAAO,UAAY,EAAA,KAAA,EAAO,iBAAkB,EAAA;AAAA,QAC9C,EAAE,KAAA,EAAO,UAAY,EAAA,KAAA,EAAO,uBAAwB,EAAA;AAAA,OACtD;AAAA,MACA,WAAa,EAAA,IAAA;AAAA,MACb,gBAAA,EAAkB,CAAC,UAAU,CAAA;AAAA,MAC7B,QAAU,EAAA,IAAA;AAAA,KACZ;AAAA,IACA,YAAc,EAAA;AAAA,MACZ,IAAM,EAAA,SAAA;AAAA,MACN,QAAU,EAAA,IAAA;AAAA,MACV,WAAa,EAAA,kBAAA;AAAA,MACb,WACE,EAAA,qIAAA;AAAA,KACJ;AAAA,IACA,YAAc,EAAA;AAAA,MACZ,IAAM,EAAA,OAAA;AAAA,MACN,QAAU,EAAA,IAAA;AAAA,MACV,WAAa,EAAA,cAAA;AAAA,MACb,WACE,EAAA,qIAAA;AAAA,KACJ;AAAA,IACA,qBAAuB,EAAA;AAAA,MACrB,IAAM,EAAA,SAAA;AAAA,MACN,WAAa,EAAA,0BAAA;AAAA,MACb,WAAa,EAAA,iDAAA;AAAA,MACb,gBAAkB,EAAA,KAAA;AAAA,MAClB,QAAU,EAAA,IAAA;AAAA,KACZ;AAAA,IACA,cAAgB,EAAA;AAAA,MACd,IAAM,EAAA,UAAA;AAAA,MACN,WACE,EAAA,0IAAA;AAAA,MACF,QAAA,EAAU,CAAC,WAAW,CAAA;AAAA,MACtB,SAAA,EAAW,CAAC,GAAA,EAAU,GAAiC,KAAA;AApU7D,QAAA,IAAA,EAAA,CAAA;AAoUgE,QAAA,OAAA;AAAA,UACxD;AAAA,YACE,MAAA,EAAA,CAAQ,EAAK,GAAA,GAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,GAAA,CAAA,MAAA,KAAL,IAAa,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,MAAA;AAAA,WACvB;AAAA,SACF,CAAA;AAAA,OAAA;AAAA,MACA,QAAU,EAAA,IAAA;AAAA,KACZ;AAAA,IACA,OAAS,EAAA;AAAA,MACP,IAAM,EAAA,SAAA;AAAA,MACN,WAAa,EAAA,oBAAA;AAAA,MACb,WACE,EAAA,8FAAA;AAAA,MACF,QAAU,EAAA,IAAA;AAAA,KACZ;AAAA,IACA,QAAU,EAAA;AAAA,MACR,IAAM,EAAA,SAAA;AAAA,MACN,QAAU,EAAA,IAAA;AAAA,MACV,gBAAkB,EAAA,IAAA;AAAA,MAClB,WAAa,EAAA,2CAAA;AAAA,KACf;AAAA,GACF,CAAA;AACF,CAAA;AAEa,MAAA,iCAAA,GAAoC,CAC/C,QAC6C,MAAA;AAAA,EAC7C,IAAM,EAAA,QAAA;AAAA,EACN,MAAQ,EAAAS,gBAAA,CAAA;AAAA,IACN,KAAO,EAAA;AAAA,MACL,IAAM,EAAA,QAAA;AAAA,MACN,gBAAA,EAAkB,oBAAoB,OAAO,CAAA;AAAA,KAC/C;AAAA,IACA,SAAW,EAAA;AAAA,MACT,IAAM,EAAA,QAAA;AAAA,MACN,OAAS,EAAA,MAAA,CAAO,MAAO,CAAAT,cAAS,CAAE,CAAA,MAAA;AAAA,QAChC,CAAC,cACC,CAAC;AAAA,UACCA,cAAU,CAAA,MAAA;AAAA,UACVA,cAAU,CAAA,WAAA;AAAA,UACVA,cAAU,CAAA,KAAA;AAAA,UACVA,cAAU,CAAA,OAAA;AAAA,SACZ,CAAE,SAAS,SAAS,CAAA;AAAA,OACxB;AAAA,MACA,cAAcA,cAAU,CAAA,IAAA;AAAA,MACxB,gBAAA,EAAkB,oBAAoB,WAAW,CAAA;AAAA,KACnD;AAAA,IACA,OAAS,EAAA;AAAA,MACP,IAAM,EAAA,OAAA;AAAA,MACN,QAAU,EAAA;AAAA,QACR,IAAM,EAAA,QAAA;AAAA,QACN,MAAQ,EAAA;AAAA,UACN,IAAM,EAAA;AAAA,YACJ,IAAM,EAAA,QAAA;AAAA,YACN,OAAS,EAAA;AAAA,cACP,EAAE,KAAA,EAAO,QAAU,EAAA,KAAA,EAAO,QAAS,EAAA;AAAA,cACnC,EAAE,KAAA,EAAO,cAAgB,EAAA,KAAA,EAAO,cAAe,EAAA;AAAA,aACjD;AAAA,YACA,YAAc,EAAA,QAAA;AAAA,YACd,QAAQ,CAAC,EAAA,EAAI,IAAM,EAAA,EAAE,MAAW,KAAA;AA9X5C,cAAA,IAAA,EAAA,EAAA,EAAA,CAAA;AA+Xc,cACE,IAAA,CAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,EAAA,CAAG,QAAQ,CAAA,KAAX,IAAe,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAA,CAAK,CAAC,CAArB,CAAA,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAmC,SACnC,MAAAA,cAAA,CAAU,MACV,EAAA;AACA,gBAAO,OAAA,IAAA,CAAA;AAAA,eACT;AACA,cAAO,OAAA,KAAA,CAAA;AAAA,aACT;AAAA,WACF;AAAA,UACA,KAAO,EAAA,QAAA;AAAA,UACP,KAAO,EAAA;AAAA,YACL,IAAM,EAAA,QAAA;AAAA,YACN,QAAQ,CAAC,EAAA,EAAI,MAAM,EAAE,IAAA,EAAM,MAAW,KAAA;AA3YlD,cAAA,IAAA,EAAA,EAAA,EAAA,CAAA;AA4Yc,cACE,IAAA,CAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,EAAA,CAAG,QAAQ,CAAA,KAAX,IAAe,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAA,CAAK,CAAC,CAArB,CAAA,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAmC,SACnC,MAAAA,cAAA,CAAU,MACV,EAAA;AACA,gBAAO,OAAA,KAAA,CAAA;AAAA,eACT;AACA,cAAA,OAAO,KAAK,IAAS,KAAA,QAAA,CAAA;AAAA,aACvB;AAAA,WACF;AAAA,UACA,OAAS,EAAA;AAAA,YACP,IAAM,EAAA,OAAA;AAAA,YACN,QAAU,EAAA;AAAA,cACR,IAAM,EAAA,QAAA;AAAA,cACN,QAAU,EAAA,CAAC,IAAc,KAAA,IAAA,CAAK,SAAS,IAAK,CAAA,KAAA;AAAA,cAC5C,MAAQ,EAAA;AAAA,gBACN,KAAO,EAAA,QAAA;AAAA,gBACP,KAAO,EAAA,QAAA;AAAA,eACT;AAAA,aACF;AAAA,YACA,QAAQ,CAAC,EAAA,EAAI,MAAM,EAAE,IAAA,EAAM,MAAW,KAAA;AA/ZlD,cAAA,IAAA,EAAA,EAAA,EAAA,CAAA;AAgac,cACE,IAAA,CAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,EAAA,CAAG,QAAQ,CAAA,KAAX,IAAe,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAA,CAAK,CAAC,CAArB,CAAA,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAmC,SACnC,MAAAA,cAAA,CAAU,MACV,EAAA;AACA,gBAAO,OAAA,IAAA,CAAA;AAAA,eACT;AACA,cAAA,OAAO,KAAK,IAAS,KAAA,cAAA,CAAA;AAAA,aACvB;AAAA,WACF;AAAA,SACF;AAAA,QACA,QAAA,EAAU,CAAC,IAAA,KAAS,IAAM,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,IAAA,CAAA,KAAA;AAAA,OAC5B;AAAA,MACA,QAAQ,CAAC,GAAA,EAAU,IAAW,EAAA,EAAE,MAC9B,KAAA,CAAC,CAACA,cAAA,CAAU,QAAQA,cAAU,CAAA,UAAU,CAAE,CAAA,QAAA,CAAS,KAAK,SAAS,CAAA;AAAA,KACrE;AAAA,IACA,UAAY,EAAA;AAAA,MACV,IAAM,EAAA,QAAA;AAAA,MACN,OAAS,EAAA;AAAA,QACP,EAAE,KAAA,EAAO,SAAW,EAAA,KAAA,EAAO,OAAQ,EAAA;AAAA,QACnC,EAAE,KAAA,EAAO,QAAU,EAAA,KAAA,EAAO,QAAS,EAAA;AAAA,OACrC;AAAA,MACA,MAAA,EAAQ,CAAC,GAAU,EAAA,IAAA,EAAW,EAAE,IAAK,EAAA,KACnCA,cAAU,CAAA,UAAA,KAAe,IAAK,CAAA,SAAA;AAAA,MAChC,gBAAkB,EAAA,OAAA;AAAA,MAClB,WAAa,EAAA,aAAA;AAAA,KACf;AAAA,IACA,QAAU,EAAA;AAAA,MACR,IAAM,EAAA,SAAA;AAAA,MACN,WAAa,EAAA,WAAA;AAAA,MACb,WAAa,EAAA,yCAAA;AAAA,MACb,MAAQ,EAAA,CAAC,GAAU,EAAA,IAAA,EAAW,EAAE,IAAK,EAAA,KACnC,CAAC,CAACA,cAAU,CAAA,UAAU,CAAE,CAAA,QAAA,CAAS,KAAK,SAAS,CAAA;AAAA,KACnD;AAAA,GAAA,EACG,oBAAoB,sBAAsB,CAAA,CAAA;AAAA,EAE/C,QAAA,EAAU,CAAC,IAAM,KAAA;AAncnB,IAAA,IAAA,EAAA,EAAA,EAAA,CAAA;AAmcsB,IAAA,OAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,IAAA,CAAK,OAAL,KAAA,IAAA,GAAA,EAAA,GAAgB,IAAK,CAAA,KAAA,KAArB,YAA8B,IAAK,CAAA,IAAA,CAAA;AAAA,GAAA;AACzD,CAAA,CAAA;;;;;;;;;;;;;;;;;;AC3bA,MAAM,OAAU,GAAA,CACd,WACA,EAAA,YAAA,EACA,WAEC,MAAA;AAAA,EACC,IAAM,EAAA,QAAA;AAAA,EACN,WAAA;AAAA,EACA,QAAU,EAAA,IAAA;AAAA,EACV,MAAQ,EAAA;AAAA,IACN,IAAM,EAAA;AAAA,MACJ,IAAM,EAAA,QAAA;AAAA,MACN,WAAa,EAAA,OAAA;AAAA,MACb,WACE,EAAA,uEAAA;AAAA,MACF,GAAK,EAAA,CAAA;AAAA,MACL,GAAK,EAAA,EAAA;AAAA,KACP;AAAA,IACA,MAAQ,EAAA;AAAA,MACN,IAAM,EAAA,QAAA;AAAA,MACN,WAAa,EAAA,QAAA;AAAA,MACb,WACE,EAAA,wEAAA;AAAA,MACF,GAAK,EAAA,CAAA;AAAA,MACL,GAAK,EAAA,EAAA;AAAA,KACP;AAAA,IACA,cAAgB,EAAA;AAAA,MACd,IAAM,EAAA,SAAA;AAAA,MACN,WAAa,EAAA,iBAAA;AAAA,MACb,WAAa,EAAA,2CAAA;AAAA,KACf;AAAA,GACF;AAAA,EACA,QAAA,EAAU,MAAM,CAAQ,KAAA,EAAA,WAAA,CAAA,CAAA;AAAA,EACxB,WAAA;AAAA,EACA,YAAA;AACF,CAAA,CAAA,CAAA;AAEK,MAAM,mBAAsB,GAAA,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAA;AAS5B,SAAS,aAAa,MAAuB,EAAA;AAClD,EAAAU,6BAAA,CAAwB,QAAQC,qBAAa,EAAA;AAAA,IAC3C,IAAM,EAAAC,uBAAA;AAAA,IACN,WAAa,EAAA,MAAA;AAAA,IACb,WACE,EAAA,iEAAA;AAAA,IACF,aAAe,EAAA;AAAA,MACb,MAAQ,EAAA,MAAA;AAAA,MACR,UAAY,EAAA,YAAA;AAAA,KACd;AAAA,IACA,KAAO,EAAA;AAAA,MACL,IAAM,EAAA;AAAA,QACJ,IAAM,EAAA,aAAA;AAAA,QACN,YAAc,EAAA,YAAA;AAAA,OAChB;AAAA,MACA,IAAM,EAAA;AAAA,QACJ,IAAM,EAAA,oBAAA;AAAA,QACN,mBAAqB,EAAA,IAAA;AAAA,QACrB,iBAAmB,EAAA,IAAA;AAAA,QACnB,QAAQ,CAAC,EAAA,KAAyB,GAAG,IAAS,KAAA,YAAA,IAAgB,CAAC,EAAG,CAAA,IAAA;AAAA,QAClE,aAAe,EAAA,IAAA;AAAA,OACjB;AAAA,MACA,SAAW,EAAA;AAAA,QACT,WAAa,EAAA,QAAA;AAAA,QACb,IAAM,EAAA,OAAA;AAAA,QACN,QAAA,EAAU,kCAAkC,WAAW,CAAA;AAAA,QACvD,YAAc,EAAA;AAAA,UACZ;AAAA,YACE,KAAO,EAAA,MAAA;AAAA,YACP,IAAM,EAAA,MAAA;AAAA,YACN,WAAWZ,cAAU,CAAA,IAAA;AAAA,WACvB;AAAA,UACA;AAAA,YACE,KAAO,EAAA,SAAA;AAAA,YACP,IAAM,EAAA,SAAA;AAAA,YACN,WAAWA,cAAU,CAAA,QAAA;AAAA,WACvB;AAAA,SACF;AAAA,QACA,MAAA,EAAQ,CAAC,EAAO,KAAA;AACd,UAAI,IAAA,EAAA,CAAG,SAAS,UAAY,EAAA;AAC1B,YAAO,OAAA,IAAA,CAAA;AAAA,WACT;AACA,UAAO,OAAA,CAAC,CAAC,EAAG,CAAA,IAAA,CAAA;AAAA,SACd;AAAA,QACA,aAAe,EAAA,IAAA;AAAA,OACjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOA,aAAe,EAAA;AAAA,QACb,WAAa,EAAA,aAAA;AAAA,QACb,IAAM,EAAA,OAAA;AAAA,QACN,QAAA,EAAU,kCAAkC,eAAe,CAAA;AAAA,QAC3D,MAAA,EAAQ,CAAC,EAAO,KAAA;AACd,UAAI,IAAA,EAAA,CAAG,SAAS,UAAY,EAAA;AAC1B,YAAO,OAAA,IAAA,CAAA;AAAA,WACT;AACA,UAAA,OAAO,CAAC,EAAG,CAAA,IAAA,CAAA;AAAA,SACb;AAAA,QACA,iBAAA,EAAmB,CAAC,CAAA,KAAM,CAAE,CAAA,GAAA;AAAA,QAC5B,sBAAA,EAAwB,CAAC,EAAA,EAAI,WAAgB,KAAA;AAC3C,UAAO,OAAA,EAAA,CAAG,IAAO,GAAA,WAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,WAAA,CAAa,uBAA0B,GAAA,KAAA,CAAA,CAAA;AAAA,SAC1D;AAAA,QACA,mBAAqB,EAAA,CAAC,IAAM,EAAA,EAAA,EAAI,GAAQ,KAAA;AACtC,UAAI,IAAA,EAAA,CAAG,SAAS,YAAc,EAAA;AAC5B,YAAO,OAAA,IAAA,CAAA;AAAA,WACT;AACA,UAAI,IAAA,EAAC,2BAAK,MAAQ,CAAA,EAAA;AAEhB,YAAO,OAAA,KAAA,CAAA;AAAA,WACT;AACA,UAAA,IACE,IAAK,CAAA,OAAA,IACL,GAAI,CAAA,MAAA,CAAO,MAAO,CAAA,IAAA,CAAK,CAAC,CAAA,KAAM,CAAE,CAAA,EAAA,KAAO,IAAK,CAAA,OAAO,CACnD,EAAA;AACA,YAAO,OAAA,KAAA,CAAA;AAAA,WACT;AACA,UAAO,OAAA,IAAA,CAAA;AAAA,SACT;AAAA,QACA,aAAe,EAAA,IAAA;AAAA,OACjB;AAAA,MACA,UAAY,EAAA,cAAA,CAAA;AAAA,QACV,IAAM,EAAA,MAAA;AAAA,QACN,QAAQ,MAAM,IAAA;AAAA,QACd,YAAc,EAAA;AAAA,UACZ,IAAM,EAAA,WAAA;AAAA,UACN,IAAM,EAAAa,yBAAA;AAAA,UACN,KAAO,EAAA;AAAA,YACL,IAAM,EAAA,SAAA;AAAA,YACN,WAAa,EAAA,IAAA;AAAA,YACb,QAAU,EAAA;AAAA,cACR,IAAM,EAAA,MAAA;AAAA,cACN,KAAO,EAAA,QAAA;AAAA,aACT;AAAA,WACF;AAAA,SACF;AAAA,OACG,EAAA;AAAA,QACD,iBAAiB,MAAM,IAAA;AAAA,QACvB,iBAAmB,EAAA,CAAC,EAAY,KAAA,CAAC,EAAG,CAAA,IAAA;AAAA,OACtC,CAAA;AAAA,MAEF,QAAU,EAAA;AAAA,QACR,IAAM,EAAA,MAAA;AAAA,QACN,MAAQ,EAAA,CAAC,KAAU,KAAA,KAAA,CAAM,IAAS,KAAA,UAAA;AAAA,OACpC;AAAA,MACA,aAAe,EAAA;AAAA,QACb,WAAa,EAAA,sBAAA;AAAA,QACb,IAAM,EAAA,QAAA;AAAA,OACR;AAAA,MACA,MAAQ,EAAA;AAAA,QACN,WAAa,EAAA,aAAA;AAAA,QACb,IAAM,EAAA,QAAA;AAAA,QACN,OAAS,EAAA,CAAC,YAAc,EAAA,UAAA,EAAY,QAAQ,CAAA;AAAA,QAC5C,YAAc,EAAA,UAAA;AAAA,OAChB;AAAA,MACA,UAAY,EAAA;AAAA,QACV,IAAM,EAAA,QAAA;AAAA,QACN,OAAA,EAAS,CAAC,MAAA,EAAQ,OAAO,CAAA;AAAA,QACzB,gBAAkB,EAAA,OAAA;AAAA,QAClB,QAAU,EAAA,IAAA;AAAA,QACV,MAAQ,EAAA,CAAC,EAAO,KAAA,EAAA,CAAG,MAAW,KAAA,YAAA;AAAA,OAChC;AAAA,MACA,QAAU,EAAA,OAAA;AAAA,QACR,cAAA;AAAA,QACA;AAAA,UACE,IAAM,EAAA,CAAA;AAAA,UACN,cAAgB,EAAA,IAAA;AAAA,SAClB;AAAA,QACA,wCAAA;AAAA,OACF;AAAA,MACA,UAAY,EAAA,OAAA;AAAA,QACV,gBAAA;AAAA,QACA;AAAA,UACE,IAAM,EAAA,EAAA;AAAA,UACN,cAAgB,EAAA,IAAA;AAAA,SAClB;AAAA,QACA,+CAAA;AAAA,OACF;AAAA,MACA,KAAO,EAAA;AAAA,QACL,IAAM,EAAA,SAAA;AAAA,QACN,WAAa,EAAA,CAAA,iEAAA,CAAA;AAAA,QACb,gBAAkB,EAAA,IAAA;AAAA,QAClB,QAAU,EAAA,IAAA;AAAA,QACV,MAAA,EAAQ,CAAC,KAAO,KAAA;AAzMxB,UAAA,IAAA,EAAA,CAAA;AAyM4B,UAAM,OAAA,CAAA,CAAA,EAAA,GAAA,KAAA,CAAA,MAAA,KAAN,YAAgB,YAAkB,MAAA,YAAA,CAAA;AAAA,SAAA;AAAA,OACxD;AAAA,MACA,YAAc,EAAA;AAAA,QACZ,WAAa,EAAA,8BAAA;AAAA,QACb,IAAM,EAAA,QAAA;AAAA,QACN,OAAS,EAAA;AAAA,UACP;AAAA,YACE,KAAO,EAAA,UAAA;AAAA,YACP,KAAO,EAAA,0BAAA;AAAA,WACT;AAAA,UACA;AAAA,YACE,KAAO,EAAA,IAAA;AAAA,YACP,KAAO,EAAA,wCAAA;AAAA,WACT;AAAA,UACA;AAAA,YACE,KAAO,EAAA,KAAA;AAAA,YACP,KAAO,EAAA,oBAAA;AAAA,WACT;AAAA,SACF;AAAA,QACA,QAAU,EAAA,IAAA;AAAA,QACV,gBAAkB,EAAA,IAAA;AAAA,OACpB;AAAA,MACA,sBAAwB,EAAA;AAAA,QACtB,IAAM,EAAA,cAAA;AAAA,QACN,WAAa,EAAA,kBAAA;AAAA,QACb,QAAU,EAAA;AAAA,UACR;AAAA,YACE,IAAM,EAAA,eAAA;AAAA,YACN,IAAM,EAAA,QAAA;AAAA,WACR;AAAA,UACA;AAAA,YACE,IAAM,EAAA,WAAA;AAAA,YACN,IAAM,EAAA,QAAA;AAAA,WACR;AAAA,SACF;AAAA,OACF;AAAA,MACA,QAAU,EAAA;AAAA,QACR,IAAM,EAAA,cAAA;AAAA,QACN,WAAa,EAAA,WAAA;AAAA,QACb,QAAU,EAAA;AAAA,UACR;AAAA,YACE,IAAM,EAAA,QAAA;AAAA,YACN,IAAM,EAAA,QAAA;AAAA,WACR;AAAA,SACF;AAAA,OACF;AAAA,MACA,cAAgB,EAAA;AAAA;AAAA,QAEd,IAAM,EAAA,cAAA;AAAA,QACN,WAAa,EAAA,mBAAA;AAAA,QACb,QAAU,EAAA;AAAA,UACR;AAAA,YACE,IAAM,EAAA,MAAA;AAAA,YACN,IAAM,EAAA,QAAA;AAAA,WACR;AAAA,SACF;AAAA,OACF;AAAA,MACA,eAAiB,EAAA;AAAA,QACf,WAAa,EAAA,eAAA;AAAA,QACb,IAAM,EAAA,QAAA;AAAA,QACN,OAAS,EAAA;AAAA,UACP,EAAE,KAAA,EAAO,QAAU,EAAA,KAAA,EAAO,qBAAsB,EAAA;AAAA,UAChD,EAAE,KAAA,EAAO,UAAY,EAAA,KAAA,EAAO,iBAAkB,EAAA;AAAA,UAC9C,EAAE,KAAA,EAAO,UAAY,EAAA,KAAA,EAAO,uBAAwB,EAAA;AAAA,SACtD;AAAA,QACA,WAAa,EAAA,IAAA;AAAA,QACb,gBAAA,EAAkB,CAAC,UAAU,CAAA;AAAA,QAC7B,QAAU,EAAA,IAAA;AAAA,OACZ;AAAA,MACA,0BAA4B,EAAA;AAAA,QAC1B,WAAa,EAAA,+BAAA;AAAA,QACb,IAAM,EAAA,SAAA;AAAA,QACN,gBAAkB,EAAA,IAAA;AAAA,QAClB,QAAU,EAAA,IAAA;AAAA,QACV,WACE,EAAA,2GAAA;AAAA,OACJ;AAAA,MACA,oBAAsB,EAAA;AAAA,QACpB,IAAM,EAAA,cAAA;AAAA,QACN,WAAa,EAAA,yBAAA;AAAA,QACb,QAAU,EAAA;AAAA,UACR;AAAA,YACE,IAAM,EAAA,cAAA;AAAA,YACN,IAAM,EAAA,SAAA;AAAA,WACR;AAAA,SACF;AAAA,QACA,QAAU,EAAA,IAAA;AAAA,OACZ;AAAA,KACF;AAAA,IACA,OAAS,EAAA;AAAA,MACP,GAAG,cAAA;AAAA,MACH;AAAA,QACE,IAAM,EAAA,aAAA;AAAA,QACN,MAAA,EAAQ,CAAC,EAAyB,KAAA,EAAA,CAAG,SAAS,YAAgB,IAAA,CAAC,CAAC,EAAG,CAAA,IAAA;AAAA,OACrE;AAAA,KACF;AAAA,IACA,MAAQ,EAAA;AAAA,MACN,KAAO,EAAA;AAAA,QACL,IAAM,EAAA,UAAA;AAAA,QACN,YAAc,EAAA,QAAA;AAAA,QACd,YAAc,EAAA,wBAAA;AAAA,OAChB;AAAA,MACA,YAAc,EAAA;AAAA,QACZ,IAAM,EAAA,UAAA;AAAA,QACN,YAAc,EAAA,SAAA;AAAA,QACd,YAAc,EAAA,sBAAA;AAAA,QACd,OAAS,EAAA,KAAA;AAAA,OACX;AAAA,KACF;AAAA,IACA,gBAAkB,EAAA;AAAA,MAChB,OAAS,EAAAC,gBAAA;AAAA,MACT,UAAY,EAAA,aAAA;AAAA,MACZ,UAAY,EAAA,gCAAA;AAAA,KACd;AAAA,IACA,UAAY,EAAA;AAAA,MACV,cAAgB,EAAA;AAAA,QACd,WAAa,EAAA,qBAAA;AAAA,QACb,QAAU,EAAA;AAAA,UACR;AAAA,YACE,IAAM,EAAA,WAAA;AAAA,YACN,WAAa,EAAA,YAAA;AAAA,YACb,IAAM,EAAA,YAAA;AAAA,WACR;AAAA,SACF;AAAA,OACF;AAAA,MACA,aAAe,EAAA;AAAA,QACb,WAAa,EAAA,WAAA;AAAA,QACb,QAAU,EAAA;AAAA,UACR;AAAA,YACE,IAAM,EAAA,UAAA;AAAA,YACN,WAAa,EAAA,WAAA;AAAA,YACb,IAAM,EAAA;AAAA,cACJ,IAAM,EAAA,cAAA;AAAA,cACN,IAAA,EAAM,CAAC,CAAA,EAAG,GAAQ,KAAA;AAChB,gBAAI,IAAA,EAAC,2BAAK,YAAc,CAAA,EAAA;AACtB,kBAAA,OAAO,EAAC,CAAA;AAAA,iBACV;AACA,gBAAO,OAAA,GAAA,CAAI,YAAa,CAAA,cAAA,CAAe,IAAI,CAAA,CAAA;AAAA,eAC7C;AAAA,aACF;AAAA,WACF;AAAA,UACA;AAAA,YACE,IAAM,EAAA,OAAA;AAAA,YACN,WAAa,EAAA,WAAA;AAAA,YACb,IAAM,EAAA,YAAA;AAAA,WACR;AAAA,SACF;AAAA,OACF;AAAA,MACA,WAAa,EAAA;AAAA,QACX,WAAa,EAAA,+BAAA;AAAA,QACb,UAAU,EAAC;AAAA,OACb;AAAA,MACA,WAAa,EAAA;AAAA,QACX,WAAa,EAAA,cAAA;AAAA,QACb,UAAU,EAAC;AAAA,OACb;AAAA,MACA,cAAgB,EAAA;AAAA,QACd,WAAa,EAAA,iBAAA;AAAA,QACb,QAAU,EAAA;AAAA,UACR;AAAA,YACE,IAAM,EAAA,UAAA;AAAA,YACN,WAAa,EAAA,WAAA;AAAA,YACb,IAAM,EAAA,QAAA;AAAA,WACR;AAAA,UACA;AAAA,YACE,IAAM,EAAA,SAAA;AAAA,YACN,WAAa,EAAA,SAAA;AAAA,YACb,IAAM,EAAA,QAAA;AAAA,WACR;AAAA,SACF;AAAA,OACF;AAAA,KACF;AAAA,IACA,UAAY,EAAA,sCAAA;AAAA,IACZ,UAAY,EAAA,aAAA;AAAA,GACb,CAAA,CAAA;AACH;;;;;;;;;;"}