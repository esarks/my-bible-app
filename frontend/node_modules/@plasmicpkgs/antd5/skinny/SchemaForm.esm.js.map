{"version":3,"file":"SchemaForm.esm.js","sources":["../src/form/SchemaForm.tsx"],"sourcesContent":["import {\n  deriveFieldConfigs,\n  ManyRowsResult,\n  normalizeData,\n  SingleRowResult,\n  TableSchema,\n  usePlasmicDataOp,\n} from \"@plasmicapp/data-sources\";\nimport { Input, InputNumber } from \"antd\";\nimport React from \"react\";\nimport { AntdCheckbox } from \"../registerCheckbox\";\nimport { AntdDatePicker } from \"../registerDatePicker\";\nimport { AntdRadioGroup } from \"../registerRadio\";\nimport { AntdSelect } from \"../registerSelect\";\nimport { ErrorBoundary, omit, usePrevious } from \"../utils\";\nimport {\n  FormRefActions,\n  FormWrapper,\n  FormWrapperProps,\n  InputType,\n  SchemaFormContext,\n  SimplifiedFormItemsProp,\n} from \"./Form\";\nimport { FormItemWrapper } from \"./FormItem\";\n\nexport function deriveFormFieldConfigs(\n  dataFormItems: SimplifiedFormItemsProp[],\n  schema: TableSchema,\n  data: any\n) {\n  return deriveFieldConfigs<SimplifiedFormItemsProp>(\n    dataFormItems,\n    schema,\n    (field) => ({\n      inputType: InputType.Text,\n      ...(field && {\n        key: field.id,\n        fieldId: field.id,\n        label: field.label ?? field.id,\n        name: field.id,\n        inputType:\n          field.type === \"string\"\n            ? InputType.Text\n            : field.type === \"number\"\n            ? InputType.Number\n            : field.type === \"boolean\"\n            ? InputType.Checkbox\n            : InputType.Text, //missing date and date-time\n        initialValue: data ? data[field.id] : undefined,\n      }),\n    })\n  );\n}\n\nfunction useFormItemDefinitions(\n  rawData:\n    | (Partial<SingleRowResult | ManyRowsResult> & {\n        error?: Error;\n        isLoading?: boolean;\n      })\n    | undefined,\n  props: React.ComponentProps<typeof FormWrapper>\n) {\n  const { mode, dataFormItems, setControlContextData } = props;\n\n  return React.useMemo(() => {\n    const data = rawData && normalizeData(rawData);\n    const schema = data && data?.schema;\n    if (\n      mode !== \"simplified\" ||\n      !rawData ||\n      rawData.isLoading ||\n      rawData.error ||\n      !data ||\n      !schema ||\n      !data.data\n    ) {\n      return undefined;\n    }\n    const row = data.data.length > 0 ? data.data[0] : undefined;\n    return deriveFormFieldConfigs(dataFormItems ?? [], schema, row);\n  }, [mode, setControlContextData, dataFormItems, rawData]);\n}\n\nconst useRawData = (props: FormWrapperProps) => {\n  const rawData = usePlasmicDataOp(props.data);\n  return props.data ? rawData : undefined;\n};\n\nexport const SchemaForm = React.forwardRef(\n  (props: FormWrapperProps, ref: React.Ref<FormRefActions>) => {\n    const [remountKey, setRemountKey] = React.useState(0);\n    const forceRemount = React.useCallback(\n      () => setRemountKey((k) => k + 1),\n      [setRemountKey]\n    );\n    const wrapperRef = React.useRef<FormRefActions>(null);\n    React.useImperativeHandle(ref, () =>\n      wrapperRef.current ? { ...wrapperRef.current } : ({} as FormRefActions)\n    );\n\n    const rawData = useRawData(props);\n    const formItemDefinitions = useFormItemDefinitions(rawData, props);\n    React.useEffect(() => {\n      if (rawData && !rawData.isLoading) {\n        forceRemount();\n      }\n    }, [rawData]);\n    const previousDataOp = usePrevious(props.data);\n    React.useEffect(() => {\n      if (\n        (previousDataOp == null && props.data != null) ||\n        (previousDataOp != null && props.data == null)\n      ) {\n        forceRemount();\n      }\n    }, [props.data]);\n    const { dataFormItems, formItems, data, ...rest } = props;\n    const actualFormItems =\n      props.mode === \"simplified\" && formItemDefinitions\n        ? formItemDefinitions.mergedFields\n        : data\n        ? dataFormItems\n        : formItems;\n    const previousFormItems = React.useRef<SimplifiedFormItemsProp[]>([]);\n    React.useEffect(() => {\n      if (!(rawData && rawData.isLoading)) {\n        previousFormItems.current = actualFormItems ?? [];\n      }\n    }, [rawData, actualFormItems]);\n    if (props.mode === \"simplified\" && rawData && \"error\" in rawData) {\n      return <div>Error when fetching data: {rawData.error.message}</div>;\n    }\n    const childrenNode =\n      props.mode === \"simplified\" ? (\n        <>\n          {(actualFormItems ?? []).map((formItem) => (\n            <ErrorBoundary\n              canvasEnvId={(props as any)[\"data-plasmic-canvas-envs\"]}\n              message={`Error rendering input for ${\n                formItem.label ?? formItem.name ?? \"undefined\"\n              }`}\n            >\n              <FormItemWrapper\n                {...omit(formItem, \"key\")}\n                noLabel={\n                  formItem.inputType === InputType.Checkbox || formItem.noLabel\n                }\n                valuePropName={\n                  formItem.valuePropName ??\n                  (formItem.inputType === InputType.Checkbox\n                    ? \"checked\"\n                    : undefined)\n                }\n                style={{ width: \"100%\" }}\n              >\n                {formItem.inputType === InputType.Text ? (\n                  <Input />\n                ) : formItem.inputType === InputType.Password ? (\n                  <Input.Password />\n                ) : formItem.inputType === InputType.TextArea ? (\n                  <Input.TextArea />\n                ) : formItem.inputType === InputType.Number ? (\n                  <InputNumber />\n                ) : formItem.inputType === InputType.Checkbox ? (\n                  <AntdCheckbox>{formItem.label}</AntdCheckbox>\n                ) : formItem.inputType === InputType.Select ? (\n                  <AntdSelect options={formItem.options} />\n                ) : formItem.inputType === InputType.DatePicker ? (\n                  <AntdDatePicker showTime={formItem.showTime} />\n                ) : formItem.inputType === InputType.RadioGroup ? (\n                  <AntdRadioGroup\n                    options={formItem.options}\n                    optionType={formItem.optionType}\n                    style={{ padding: \"8px\" }}\n                  />\n                ) : null}\n              </FormItemWrapper>\n            </ErrorBoundary>\n          ))}\n          {props.submitSlot}\n        </>\n      ) : (\n        props.children\n      );\n    const isSchemaForm = props.mode === \"simplified\" && !!props.data;\n    const isLoadingData = rawData?.isLoading;\n    return (\n      <SchemaFormContext.Provider\n        value={{\n          mergedFields: formItemDefinitions?.mergedFields,\n          minimalFullLengthFields: formItemDefinitions?.mergedFields,\n          schema: rawData?.schema,\n        }}\n      >\n        <FormWrapper\n          key={remountKey}\n          {...rest}\n          children={childrenNode}\n          formItems={\n            rawData && rawData.isLoading\n              ? previousFormItems.current\n              : actualFormItems\n          }\n          ref={wrapperRef}\n          style={\n            isSchemaForm && isLoadingData\n              ? {\n                  opacity: 0.5,\n                  transitionDelay: \"250ms\",\n                  transition: \"1s\",\n                }\n              : {}\n          }\n        />\n        {isSchemaForm && isLoadingData && (\n          <div\n            style={{\n              position: \"absolute\",\n              width: \"100%\",\n              height: \"100%\",\n            }}\n          />\n        )}\n      </SchemaFormContext.Provider>\n    );\n  }\n);\n\nexport { SchemaForm as FormWrapper };\n"],"names":["_a"],"mappings":"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"}