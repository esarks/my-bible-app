import { Progress } from 'antd';
import React, { useMemo } from 'react';
import { r as registerComponentHelper } from './utils-5ebcaa63.esm.js';
import '@plasmicapp/host/registerComponent';
import '@plasmicapp/host/registerGlobalContext';

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
function AntdProgress(props) {
  const _a = props, {
    successPercent,
    successStrokeColor,
    stepColors,
    infoFormat,
    gradient,
    strokeColor
  } = _a, rest = __objRest(_a, [
    "successPercent",
    "successStrokeColor",
    "stepColors",
    "infoFormat",
    "gradient",
    "strokeColor"
  ]);
  const success = useMemo(() => {
    if (!successPercent && !successStrokeColor)
      return void 0;
    const res = {
      percent: successPercent,
      strokeColor: successStrokeColor
    };
    return res;
  }, [successPercent, successStrokeColor]);
  const strokeColorProp = useMemo(() => {
    if (props.type === "line" && !!props.steps) {
      const colors = stepColors == null ? void 0 : stepColors.map((c) => c.color).filter((c) => c);
      if (colors == null ? void 0 : colors.length) {
        return colors;
      }
    }
    const res = {};
    gradient == null ? void 0 : gradient.filter((g) => g.color && g.percent !== void 0).map((g) => {
      res[g.percent] = g.color;
    });
    if (Object.keys(res).length)
      return res;
    return strokeColor;
  }, [gradient, props.steps, props.type, stepColors, strokeColor]);
  return /* @__PURE__ */ React.createElement(
    Progress,
    __spreadValues({
      strokeColor: strokeColorProp,
      success,
      format: infoFormat
    }, rest)
  );
}
const progressComponentName = "plasmic-antd5-progress";
function registerProgress(loader) {
  registerComponentHelper(loader, AntdProgress, {
    name: progressComponentName,
    displayName: "Progress",
    props: {
      type: {
        type: "choice",
        defaultValueHint: "line",
        options: ["line", "circle", "dashboard"]
      },
      percent: {
        type: "number",
        description: "The completion percentage",
        defaultValueHint: 0
      },
      size: {
        type: "choice",
        defaultValueHint: "default",
        description: `Size of progress`,
        advanced: true,
        options: ["default", "small"]
      },
      showInfo: {
        type: "boolean",
        displayName: "Show text",
        defaultValueHint: true,
        advanced: true,
        description: "Display the progress value and the status icon"
      },
      status: {
        type: "choice",
        defaultValueHint: "normal",
        advanced: true,
        options: ["success", "exception", "normal", "active"]
      },
      strokeColor: {
        type: "color",
        description: "The color of progress bar"
      },
      strokeLinecap: {
        type: "choice",
        description: "Style of endpoints of the progress path",
        defaultValueHint: "round",
        advanced: true,
        options: ["round", "butt", "square"]
      },
      successPercent: {
        type: "number",
        advanced: true
      },
      successStrokeColor: {
        type: "color",
        description: "Color of the progress path marked success",
        advanced: true,
        hidden: (ps) => !ps.successPercent
      },
      trailColor: {
        type: "color",
        advanced: true,
        description: "The color of unfilled part"
      },
      infoFormat: {
        type: "function",
        displayName: "Format",
        defaultValueHint: ({ percent }) => `${percent || 0}%`,
        description: "Customize the progress text",
        advanced: true,
        hidden: (ps) => ps.showInfo === void 0 ? false : !ps.showInfo,
        argNames: ["percent", "successPercent"],
        argValues: (_ps) => [
          _ps.percent,
          _ps.successPercent
        ]
      },
      steps: {
        type: "number",
        hidden: (ps) => ps.type !== "line",
        advanced: true,
        description: "The total step count"
      },
      stepColors: {
        type: "array",
        hidden: (ps) => ps.type !== "line" ? true : ps.steps == null,
        advanced: true,
        itemType: {
          type: "object",
          nameFunc: (item) => item.color,
          fields: {
            color: {
              type: "color"
            }
          }
        }
      },
      gradient: {
        type: "array",
        hidden: (ps) => ps.type === "line" && !!ps.steps,
        advanced: true,
        itemType: {
          type: "object",
          nameFunc: (item) => `${item.percent}%: ${item.color}`,
          fields: {
            color: {
              type: "color"
            },
            percent: {
              type: "number"
            }
          }
        }
      },
      strokeWidth: {
        type: "number",
        hidden: (ps) => ps.type === "line",
        description: "To set the width of the circular progress, unit: percentage of the canvas width",
        advanced: true,
        defaultValueHint: 6
      },
      gapDegree: {
        type: "number",
        hidden: (ps) => ps.type !== "dashboard",
        defaultValueHint: 75,
        advanced: true,
        description: "The gap degree of half circle",
        min: 0,
        max: 295
      },
      gapPosition: {
        type: "choice",
        hidden: (ps) => ps.type !== "dashboard",
        options: ["top", "bottom", "left", "right"],
        advanced: true,
        defaultValueHint: "bottom"
      }
    },
    importPath: "@plasmicpkgs/antd5/skinny/registerProgress",
    importName: "AntdProgress"
  });
}

export { AntdProgress, progressComponentName, registerProgress };
//# sourceMappingURL=registerProgress.esm.js.map
