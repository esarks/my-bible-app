'use strict';

var React = require('react');
var antd = require('antd');
var utils = require('./utils-7711f93b.cjs.js');
var host = require('@plasmicapp/host');
require('@plasmicapp/host/registerComponent');
require('@plasmicapp/host/registerGlobalContext');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var React__default = /*#__PURE__*/_interopDefault(React);

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
function AntdAvatar(_a) {
  var _b = _a, {
    letters,
    href,
    target
  } = _b, props = __objRest(_b, [
    "letters",
    "href",
    "target"
  ]);
  const avatar = /* @__PURE__ */ React__default.default.createElement(antd.Avatar, __spreadProps(__spreadValues({}, props), { children: props.children || letters }));
  const PlasmicLink = host.usePlasmicLink();
  return href ? /* @__PURE__ */ React__default.default.createElement(PlasmicLink, { href, target: target ? "_blank" : void 0 }, avatar) : avatar;
}
function AntdAvatarGroup(props) {
  return /* @__PURE__ */ React__default.default.createElement(antd.Avatar.Group, __spreadValues({}, props));
}
function registerAvatar(loader) {
  utils.registerComponentHelper(loader, AntdAvatar, {
    name: "plasmic-antd5-avatar",
    displayName: "Avatar",
    props: {
      href: {
        type: "href",
        displayName: "Link to",
        description: "Destination to link to"
      },
      target: {
        type: "boolean",
        displayName: "Open in new tab",
        hidden: (ps) => !ps.href
      },
      letters: {
        type: "string",
        description: "Letters to show",
        defaultValue: "AB"
      },
      src: {
        type: "imageUrl",
        description: "Image to display"
      },
      size: {
        type: "choice",
        options: ["small", "default", "large"],
        description: "Set the size of avatar",
        defaultValueHint: "default"
      },
      shape: {
        type: "choice",
        options: ["circle", "round"],
        description: "Set the avatar shape",
        defaultValueHint: "circle"
      }
    },
    importPath: "@plasmicpkgs/antd5/skinny/registerAvatar",
    importName: "AntdAvatar"
  });
}
function registerAvatarGroup(loader) {
  utils.registerComponentHelper(loader, AntdAvatarGroup, {
    name: "plasmic-antd5-avatar-group",
    displayName: "AvatarGroup",
    props: {
      children: {
        type: "slot",
        defaultValue: [1, 2, 3, 4].map((user) => ({
          type: "component",
          name: "plasmic-antd5-tooltip",
          props: {
            titleText: "User " + user,
            children: {
              type: "component",
              name: "plasmic-antd5-avatar",
              props: {
                letters: `U${user}`
              }
            }
          }
        }))
      },
      maxCount: {
        type: "number",
        description: "Max avatars to show",
        defaultValue: 2
      },
      size: {
        type: "choice",
        options: ["small", "default", "large"],
        description: "Default size of avatars",
        defaultValueHint: "default"
      },
      maxPopoverPlacement: {
        type: "choice",
        advanced: true,
        options: ["top", "bottom"],
        defaultValueHint: "top"
      }
    },
    importPath: "@plasmicpkgs/antd5/skinny/registerAvatar",
    importName: "AntdAvatarGroup"
  });
}

exports.AntdAvatar = AntdAvatar;
exports.AntdAvatarGroup = AntdAvatarGroup;
exports.registerAvatar = registerAvatar;
exports.registerAvatarGroup = registerAvatarGroup;
//# sourceMappingURL=registerAvatar.cjs.js.map
