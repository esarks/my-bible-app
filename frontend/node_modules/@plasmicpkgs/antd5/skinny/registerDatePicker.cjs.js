'use strict';

var antd = require('antd');
var dayjs = require('dayjs');
var React = require('react');
var utils = require('./utils-7711f93b.cjs.js');
require('@plasmicapp/host/registerComponent');
require('@plasmicapp/host/registerGlobalContext');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var dayjs__default = /*#__PURE__*/_interopDefault(dayjs);
var React__default = /*#__PURE__*/_interopDefault(React);

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
function AntdDatePicker(props) {
  const _a = props, { picker, popupScopeClassName } = _a, rest = __objRest(_a, ["picker", "popupScopeClassName"]);
  const css = `

  @media(max-width: 500px) {
    .ant-picker-dropdown {
      top: 20px !important;
      left: 10px !important;
      right: 10px !important;
      max-height: 95vh;
      position: fixed;
      overflow-y: scroll;
    }

    .ant-picker-panel-layout {
      flex-direction: column;
    }

    .ant-picker-presets {
      min-height: 50px;
      min-width: 100%;
    }

    .ant-picker-presets > ul {
      overflow-y: hidden;
      overflow-x: auto;
      display: flex;
      align-items: center;
      justify-content: center;
      flex-wrap: wrap;
      flex-direction: column;
    }

    .ant-picker-presets > ul > li {
      margin: 0 !important;
    }

    .ant-picker-panel-container {
      width: 300px;
    }

    .ant-picker-datetime-panel {
      flex-direction: column;
    }

    .ant-picker-header-view {
      line-height: unset !important;
    }

    .ant-picker-content {
      height: unset !important;
    }

    .ant-picker-time-panel-column {
      height: 100px;
    }

    .ant-picker-time-panel-column::after {
      height: 0px !important;
    }

    .ant-picker-time-panel-column::after {
      display: none;
    }
  }`;
  return /* @__PURE__ */ React__default.default.createElement(React__default.default.Fragment, null, /* @__PURE__ */ React__default.default.createElement(
    antd.DatePicker,
    __spreadProps(__spreadValues({}, rest), {
      picker,
      value: props.value === void 0 ? void 0 : !props.value ? null : dayjs__default.default(props.value),
      defaultValue: props.defaultValue === void 0 ? void 0 : dayjs__default.default(props.defaultValue),
      popupClassName: popupScopeClassName,
      onChange: (value, _dateString) => {
        var _a2;
        (_a2 = props.onChange) == null ? void 0 : _a2.call(props, value !== null ? value.toISOString() : null);
      }
    })
  ), /* @__PURE__ */ React__default.default.createElement("style", { dangerouslySetInnerHTML: { __html: css } }));
}
const datePickerComponentName = "plasmic-antd5-date-picker";
const datePickerHelpers = {
  states: {
    value: {
      onChangeArgsToValue: (value) => value ? value : void 0,
      hidden: (ps) => !!ps.__plasmicFormField
    }
  }
};
function registerDatePicker(loader) {
  utils.registerComponentHelper(loader, AntdDatePicker, {
    name: datePickerComponentName,
    displayName: "Date/Time Picker",
    props: {
      value: {
        type: "dateString",
        editOnly: true,
        uncontrolledProp: "defaultValue",
        description: "The current date/time as an ISO string, Date object, or dayjs object",
        hidden: (ps) => !!ps.__plasmicFormField
      },
      disabled: {
        type: "boolean",
        defaultValueHint: false
      },
      autoFocus: {
        type: "boolean",
        description: "Focus when component is rendered",
        defaultValueHint: false,
        advanced: true
      },
      onChange: {
        type: "eventHandler",
        argTypes: [{ name: "value", type: "string" }]
      },
      picker: {
        type: "choice",
        options: ["date", "week", "month", "quarter", "year"].map((value) => ({
          value,
          label: utils.capitalize(value)
        })),
        defaultValueHint: "date"
      },
      popupScopeClassName: {
        type: "styleScopeClass",
        scopeName: "datePickerPopup"
      },
      popupClassName: {
        type: "class",
        displayName: "Popup container",
        selectors: [
          {
            selector: ":datePickerPopup .ant-picker-panel-container",
            label: "Base"
          }
        ]
      },
      popupHeaderClassName: {
        type: "class",
        displayName: "Popup header",
        selectors: [
          {
            selector: ":datePickerPopup .ant-picker-header",
            label: "Base"
          }
        ]
      },
      popupBodyClassName: {
        type: "class",
        displayName: "Popup body",
        selectors: [
          {
            selector: ":datePickerPopup .ant-picker-body",
            label: "Base"
          }
        ]
      },
      popupFooterClassName: {
        type: "class",
        displayName: "Popup footer",
        selectors: [
          {
            selector: ":datePickerPopup .ant-picker-footer",
            label: "Base"
          }
        ]
      },
      showTime: {
        type: "boolean",
        description: "Enable time selection"
      },
      bordered: {
        type: "boolean",
        advanced: true
      },
      // TODO - see how it works with plasmic-rich-components
      // format: {
      //   advanced: true
      // },
      showNow: {
        type: "boolean",
        advanced: true,
        description: 'Whether to show the "Now" button',
        defaultValueHint: true,
        hidden: (ps) => !ps.showTime
      },
      showToday: {
        type: "boolean",
        advanced: true,
        description: 'Whether to show the "Today" button',
        defaultValueHint: true,
        hidden: (ps) => ps.showTime
      },
      // disabledDate: {
      //   type: "function",
      //   advanced: true,
      //   description: "Dates to disable",
      // },
      // disabledTime: {
      //   type: "function",
      //   advanced: true,
      //   description: "Times to disable",
      // },
      allowClear: {
        type: "boolean",
        advanced: true,
        description: "Whether to show the clear button"
      }
    },
    states: {
      value: __spreadValues({
        type: "writable",
        valueProp: "value",
        onChangeProp: "onChange",
        variableType: "text"
      }, datePickerHelpers.states.value)
    },
    componentHelpers: {
      helpers: datePickerHelpers,
      importName: "datePickerHelpers",
      importPath: "@plasmicpkgs/antd5/skinny/registerDatePicker"
    },
    importPath: "@plasmicpkgs/antd5/skinny/registerDatePicker",
    importName: "AntdDatePicker"
  });
}

exports.AntdDatePicker = AntdDatePicker;
exports.datePickerComponentName = datePickerComponentName;
exports.datePickerHelpers = datePickerHelpers;
exports.registerDatePicker = registerDatePicker;
//# sourceMappingURL=registerDatePicker.cjs.js.map
