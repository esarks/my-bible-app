{"version":3,"file":"registerTree.esm.js","sources":["../src/registerTree.tsx"],"sourcesContent":["import { Tree } from \"antd\";\nimport type { TreeDataNode, TreeProps } from \"antd\";\nimport React, { Key, useState } from \"react\";\nimport { Registerable, registerComponentHelper } from \"./utils\";\nimport type { DirectoryTreeProps } from \"antd/es/tree\";\n\nfunction useMunged(props: TreeProps) {\n  const [autoExpandParent, setAutoExpandParent] = useState(\n    props.autoExpandParent\n  );\n  const munged = { ...props, autoExpandParent };\n  if (!props.expandedKeys) {\n    delete munged[\"expandedKeys\"];\n  }\n  // Currently, when you pass in defaultExpandAll, Tree internally adds *all* nodes to be expandedKeys, including leaf\n  // nodes. If autoExpandParent is set, then this means it's impossible to collapse any part of the tree! Ideally, the\n  // initial expandedKeys will be just parent nodes. But for now, we just do this. It's not nice because if you do\n  // expect autoExpandParent behavior, it won't be there at this point. But it's a quick fix for now for the more\n  // glaring issue, and what is done in the controlled demo on https://ant.design/components/tree.\n  munged.onExpand = (expandedKeys, info) => {\n    props.onExpand?.(expandedKeys, info);\n    setAutoExpandParent(false);\n  };\n  return munged;\n}\n\nexport function AntdTree(props: TreeProps) {\n  const munged = useMunged(props);\n  return <Tree {...munged} />;\n}\n\n// AntdTree.__plasmicFormFieldMeta = {\n//   valueProp: \"checkedKeys\",\n//   onChangePropName: \"onChange\",\n// };\n\nexport function AntdDirectoryTree(props: DirectoryTreeProps) {\n  const munged = useMunged(props);\n  return <Tree.DirectoryTree {...munged} />;\n}\n\nexport interface CheckedDetails<\n  TreeDataType extends TreeDataNode = TreeDataNode\n> {\n  halfCheckedKeys: Key[];\n  checkedNodesPositions?: {\n    node: TreeDataType;\n    pos: string;\n  }[];\n}\n\nconst treeHelpers_ = {\n  states: {\n    selectedKeys: {\n      onChangeArgsToValue: ((selectedKeys, _info) => {\n        return selectedKeys;\n      }) as TreeProps[\"onSelect\"],\n    },\n    selectedNodes: {\n      onChangeArgsToValue: ((_selectedKeys, info) => {\n        return info.selectedNodes;\n      }) as TreeProps[\"onSelect\"],\n    },\n    expandedKeys: {\n      onChangeArgsToValue: ((expandedKeys, _info) => {\n        return expandedKeys;\n      }) as TreeProps[\"onExpand\"],\n    },\n    checkedKeys: {\n      onChangeArgsToValue: ((checkedKeys, _info) => {\n        return checkedKeys;\n      }) as TreeProps[\"onCheck\"],\n    },\n    checkedNodes: {\n      onChangeArgsToValue: ((_checkedKeys, info) => {\n        return info.checkedNodes;\n      }) as TreeProps[\"onCheck\"],\n    },\n    checkedDetails: {\n      onChangeArgsToValue: ((_checkedKeys, info) => {\n        return {\n          checkedNodesPositions: info.checkedNodesPositions,\n          halfCheckedKeys: info.halfCheckedKeys,\n        };\n      }) as TreeProps[\"onCheck\"],\n    },\n  },\n} as const;\n\n// Work around inability to ts-ignore:\n// src/registerTree.tsx:40:14 - error TS4023: Exported variable 'treeHelpers' has or is using name 'CheckInfo' from external module \"/.../public-packages/plasmicpkgs/antd5/node_modules/rc-tree/lib/Tree\" but cannot be named.\nexport const treeHelpers = treeHelpers_ as any;\n\nexport const treeData: TreeDataNode[] = [\n  {\n    title: \"Node 0\",\n    key: \"0\",\n    children: [\n      {\n        title: \"Node 0-0\",\n        key: \"0-0\",\n        children: [\n          {\n            title: \"Node 0-0-0\",\n            key: \"0-0-0\",\n            disableCheckbox: true,\n          },\n          {\n            title: \"Node 0-0-1\",\n            key: \"0-0-1\",\n            disabled: true,\n          },\n          {\n            title: \"Node 0-0-2\",\n            key: \"0-0-2\",\n          },\n        ],\n      },\n      {\n        title: \"Node 0-1\",\n        key: \"0-1\",\n        children: [\n          {\n            title: \"Node 0-1-0\",\n            key: \"0-1-0\",\n          },\n          {\n            title: \"Node 0-1-1\",\n            key: \"0-1-1\",\n          },\n        ],\n      },\n    ],\n  },\n];\n\nfunction registerTreeHelper({\n  loader,\n  component,\n  name,\n  displayName,\n  importName,\n  checkableDefaultValue,\n  expandActionDefaultValue,\n}: {\n  loader: Registerable | undefined;\n  component: typeof AntdTree;\n  name: string;\n  displayName: string;\n  importName: string;\n  checkableDefaultValue: boolean;\n  expandActionDefaultValue: string | boolean;\n}) {\n  registerComponentHelper(loader, component, {\n    name: name,\n    displayName: displayName,\n    props: {\n      treeData: {\n        type: \"array\",\n        defaultValue: treeData,\n      },\n      checkable: {\n        type: \"boolean\",\n        defaultValue: checkableDefaultValue,\n      },\n      selectable: {\n        type: \"boolean\",\n        defaultValueHint: true,\n      },\n      checkedKeys: {\n        type: \"array\",\n        editOnly: true,\n        uncontrolledProp: \"defaultCheckedKeys\",\n        description: \"List of checked keys.\",\n        hidden: (ps) => !ps.checkable,\n      },\n      selectedKeys: {\n        type: \"array\",\n        editOnly: true,\n        uncontrolledProp: \"defaultSelectedKeys\",\n        description: \"List of selected keys.\",\n        hidden: (ps) => !(ps.selectable ?? true),\n        advanced: true,\n      },\n      expandedKeys: {\n        type: \"array\",\n        editOnly: true,\n        uncontrolledProp: \"defaultExpandedKeys\",\n        description: \"List of expanded keys.\",\n        // hidden: (ps) => !ps.expa,\n        advanced: true,\n      },\n      disabled: {\n        type: \"boolean\",\n        defaultValueHint: false,\n      },\n      showLine: {\n        type: \"boolean\",\n        defaultValueHint: false,\n      },\n      defaultExpandAll: {\n        type: \"boolean\",\n        description:\n          \"Whether to automatically expand all nodes at initialization\",\n        defaultValueHint: false,\n        defaultValue: true,\n      },\n      autoExpandParent: {\n        type: \"boolean\",\n        description: \"Whether to automatically expand a parent node\",\n        defaultValue: true,\n        advanced: true,\n      },\n      defaultExpandParent: {\n        type: \"boolean\",\n        description:\n          \"Whether to automatically expand a parent node at initialization\",\n        defaultValueHint: false,\n        advanced: true,\n      },\n      expandAction: {\n        type: \"choice\",\n        options: [\n          {\n            label: \"None\",\n            value: false,\n          },\n          {\n            label: \"Click\",\n            value: \"click\",\n          },\n          {\n            label: \"Double click\",\n            value: \"doubleClick\",\n          },\n        ],\n        defaultValueHint: expandActionDefaultValue,\n      },\n      multiple: {\n        type: \"boolean\",\n        defaultValueHint: false,\n        description: \"Whether to allow multiple selection\",\n        advanced: true,\n      },\n      titleRender: {\n        type: \"slot\",\n        hidePlaceholder: true,\n        renderPropParams: [\"node\"],\n      },\n      // draggable: {\n      //   type: \"boolean\",\n      //   defaultValueHint: false,\n      //   advanced: true,\n      // },\n      // allowDrop: {\n      //   type: \"boolean\",\n      //   defaultValueHint: false,\n      //   advanced: true,\n      //   description: \"Whether to allow dropping on the node\",\n      // },\n      onSelect: {\n        type: \"eventHandler\",\n        argTypes: [\n          { name: \"selectedKeys\", type: { type: \"array\" } },\n          {\n            name: \"selectedNodes\",\n            type: { type: \"array\" },\n          },\n        ],\n      },\n      onCheck: {\n        type: \"eventHandler\",\n        argTypes: [\n          { name: \"checkedKeys\", type: { type: \"array\" } },\n          {\n            name: \"checkDetails\",\n            type: { type: \"object\" },\n          },\n        ],\n      },\n      onExpand: {\n        type: \"eventHandler\",\n        argTypes: [\n          { name: \"expandedKeys\", type: { type: \"array\" } },\n          {\n            name: \"expandDetails\",\n            type: { type: \"object\" },\n          },\n        ],\n      },\n    },\n    states: {\n      checkedKeys: {\n        type: \"writable\",\n        valueProp: \"checkedKeys\",\n        onChangeProp: \"onCheck\",\n        variableType: \"array\",\n        ...treeHelpers_.states.checkedKeys,\n      },\n      checkedNodes: {\n        type: \"readonly\",\n        onChangeProp: \"onCheck\",\n        variableType: \"array\",\n        initVal: [],\n        ...treeHelpers_.states.checkedNodes,\n      },\n      checkedDetails: {\n        type: \"readonly\",\n        onChangeProp: \"onCheck\",\n        variableType: \"object\",\n        initVal: {\n          checkedNodesPositions: [],\n          halfCheckedKeys: [],\n        } as CheckedDetails,\n        ...treeHelpers_.states.checkedDetails,\n      },\n      selectedKeys: {\n        type: \"writable\",\n        valueProp: \"selectedKeys\",\n        onChangeProp: \"onSelect\",\n        variableType: \"array\",\n        ...treeHelpers_.states.selectedKeys,\n      },\n      selectedNodes: {\n        type: \"readonly\",\n        onChangeProp: \"onSelect\",\n        variableType: \"array\",\n        initVal: [],\n        ...treeHelpers_.states.selectedNodes,\n      },\n      expandedKeys: {\n        type: \"writable\",\n        valueProp: \"expandedKeys\",\n        onChangeProp: \"onExpand\",\n        variableType: \"array\",\n        ...treeHelpers_.states.expandedKeys,\n      },\n    },\n    componentHelpers: {\n      helpers: treeHelpers_,\n      importName: \"treeHelpers\",\n      importPath: \"@plasmicpkgs/antd5/skinny/registerTree\",\n    },\n    importPath: \"@plasmicpkgs/antd5/skinny/registerTree\",\n    importName: importName,\n  });\n}\n\nexport function registerTree(loader?: Registerable) {\n  registerTreeHelper({\n    loader,\n    component: AntdTree,\n    name: \"plasmic-antd5-tree\",\n    displayName: \"Tree\",\n    importName: \"AntdTree\",\n    checkableDefaultValue: true,\n    expandActionDefaultValue: false,\n  });\n}\n\nexport function registerDirectoryTree(loader?: Registerable) {\n  registerTreeHelper({\n    loader,\n    component: AntdDirectoryTree,\n    name: \"plasmic-antd5-directory-tree\",\n    displayName: \"Directory Tree\",\n    importName: \"AntdDirectoryTree\",\n    checkableDefaultValue: false,\n    expandActionDefaultValue: \"click\",\n  });\n}\n"],"names":[],"mappings":"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"}