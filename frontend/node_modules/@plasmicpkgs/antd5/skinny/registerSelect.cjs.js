'use strict';

var antd = require('antd');
var React = require('react');
var names = require('./names-3aea627b.cjs.js');
var reactUtils = require('./react-utils-11b0221a.cjs.js');
var utils = require('./utils-7711f93b.cjs.js');
require('classnames');
require('@plasmicapp/host/registerComponent');
require('@plasmicapp/host/registerGlobalContext');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var React__default = /*#__PURE__*/_interopDefault(React);

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const AntdOption = antd.Select.Option;
const AntdOptionGroup = antd.Select.OptGroup;
function AntdSelect(props) {
  const _a = props, {
    popupClassName,
    popupScopeClassName,
    defaultStylesClassName,
    suffixIcon,
    mode,
    useChildren
  } = _a, rest = __objRest(_a, [
    "popupClassName",
    "popupScopeClassName",
    "defaultStylesClassName",
    "suffixIcon",
    "mode",
    "useChildren"
  ]);
  const curated = __spreadValues({}, rest);
  if (useChildren) {
    curated.options = void 0;
  }
  return /* @__PURE__ */ React__default.default.createElement(
    antd.Select,
    __spreadValues(__spreadProps(__spreadValues({}, curated), {
      mode: !mode || mode === "single" ? void 0 : mode,
      popupClassName: `${defaultStylesClassName} ${popupScopeClassName} ${popupClassName}`,
      optionFilterProp: curated.options ? "label" : void 0,
      filterOption: (input, option) => {
        var _a2;
        return (useChildren ? reactUtils.reactNodeToString(option == null ? void 0 : option.children) : (_a2 = option == null ? void 0 : option.label) != null ? _a2 : "").toLowerCase().includes(input.toLowerCase());
      }
    }), suffixIcon && { suffixIcon })
  );
}
function registerSelect(loader) {
  utils.registerComponentHelper(loader, AntdSelect, __spreadProps(__spreadValues({
    name: names.selectComponentName,
    displayName: "Select",
    props: {
      options: {
        type: "array",
        hidden: (ps) => !!ps.useChildren,
        itemType: {
          type: "object",
          nameFunc: (item) => item.label || item.value,
          fields: {
            type: {
              type: "choice",
              options: [
                { value: "option", label: "Option" },
                { value: "option-group", label: "Option Group" }
              ],
              defaultValue: "option"
            },
            value: {
              type: "string",
              hidden: (_ps, _ctx, { item }) => item.type !== "option"
            },
            label: "string",
            options: {
              type: "array",
              hidden: (_ps, _ctx, { item }) => {
                return item.type !== "option-group";
              },
              itemType: {
                type: "object",
                nameFunc: (item) => item.label || item.value,
                fields: {
                  value: "string",
                  label: "string"
                }
              }
            }
          }
        },
        defaultValue: [
          {
            value: "option1",
            label: "Option 1",
            type: "option"
          },
          {
            value: "option2",
            label: "Option 2",
            type: "option"
          }
        ]
      },
      useChildren: {
        displayName: "Use slot",
        type: "boolean",
        defaultValueHint: false,
        advanced: true,
        description: "Instead of configuring a list of options, customize the contents of the Select by dragging and dropping options in the outline/canvas, inside the 'children' slot. Lets you use any content or formatting within the Options, and also use Option Groups."
      },
      children: {
        type: "slot",
        allowedComponents: [names.optionComponentName, names.optionGroupComponentName],
        hidden: (ps) => !ps.useChildren
      },
      placeholder: {
        type: "slot",
        defaultValue: "Select..."
      },
      suffixIcon: {
        type: "slot",
        hidePlaceholder: true
      },
      open: {
        type: "boolean",
        editOnly: true,
        uncontrolledProp: "defaultOpen"
      },
      value: {
        type: "choice",
        displayName: "Selected value",
        editOnly: true,
        uncontrolledProp: "defaultValue",
        description: "Initial selected option",
        multiSelect: (ps) => ps.mode === "multiple",
        options: (ps) => {
          var _a;
          const options = /* @__PURE__ */ new Set();
          if (!ps.useChildren) {
            const rec = (op) => {
              var _a2;
              if (typeof op === "string") {
                return [{ value: op, label: op }];
              } else if ("options" in op) {
                return ((_a2 = op.options) != null ? _a2 : []).flatMap((sub) => rec(sub));
              } else {
                return [{ value: op.value, label: op.label || op.value }];
              }
            };
            return ((_a = ps.options) != null ? _a : []).flatMap((o) => rec(o));
          } else {
            utils.traverseReactEltTree(ps.children, (elt) => {
              var _a2;
              if ((elt == null ? void 0 : elt.type) === antd.Select.Option && typeof ((_a2 = elt == null ? void 0 : elt.props) == null ? void 0 : _a2.value) === "string") {
                options.add(elt.props.value);
              }
            });
          }
          return Array.from(options.keys());
        },
        hidden: (ps) => !!ps.__plasmicFormField
      },
      mode: {
        type: "choice",
        options: ["single", "multiple", "tags"],
        defaultValueHint: "single",
        description: "Whether to allow single or multiple selection. Tags mode additionally allows selecting options outside the specified set of options."
      },
      size: {
        type: "choice",
        options: ["small", "middle", "large"]
      },
      disabled: {
        type: "boolean",
        defaultValueHint: false
      },
      showSearch: {
        type: "boolean",
        defaultValueHint: false,
        advanced: true
      },
      status: {
        type: "choice",
        options: ["error", "warning"],
        advanced: true
      },
      bordered: {
        type: "boolean",
        defaultValueHint: true
      },
      autoFocus: {
        type: "boolean",
        displayName: "Focus automatically",
        defaultValueHint: false,
        advanced: true
      },
      onChange: {
        type: "eventHandler",
        argTypes: [
          { name: "value", type: "string" },
          { name: "option", type: "object" }
        ]
      },
      dropdownMatchSelectWidth: {
        type: "boolean",
        displayName: "Should dropdown match trigger button width?",
        defaultValueHint: true,
        advanced: true
      },
      allowClear: {
        type: "boolean",
        displayName: "Allow clearing the Select",
        defaultValueHint: false,
        advanced: true
      },
      triggerClassName: {
        type: "class",
        displayName: "Trigger styles",
        noSelf: true,
        selectors: [
          {
            selector: ":component .ant-select-selector.ant-select-selector",
            label: "Base"
          },
          {
            selector: ":component .ant-select-selector:hover",
            label: "Hovered"
          }
        ],
        advanced: true
      },
      popupScopeClassName: {
        type: "styleScopeClass",
        scopeName: "popup"
      },
      popupClassName: {
        type: "class",
        displayName: "Popup styles",
        selectors: [],
        advanced: true
      },
      optionClassName: {
        type: "class",
        displayName: "Option styles",
        noSelf: true,
        selectors: [
          {
            selector: ":popup.ant-select-dropdown .ant-select-item-option",
            label: "Base"
          },
          {
            selector: ":popup.ant-select-dropdown .ant-select-item-option-active",
            label: "Focused"
          },
          {
            selector: ":popup.ant-select-dropdown .ant-select-item-option-selected",
            label: "Selected"
          }
        ],
        advanced: true
      },
      placeholderClassName: {
        type: "class",
        displayName: "Placeholder styles",
        selectors: [
          {
            selector: ":component .ant-select-selector .ant-select-selection-placeholder",
            label: "Base"
          }
        ],
        advanced: true
      },
      defaultStylesClassName: {
        type: "themeResetClass"
      }
    },
    states: {
      value: {
        type: "writable",
        valueProp: "value",
        onChangeProp: "onChange",
        variableType: "text",
        hidden: (ps) => !!ps.__plasmicFormField
      }
    }
  }, { trapsSelection: true }), {
    importPath: "@plasmicpkgs/antd5/skinny/registerSelect",
    importName: "AntdSelect"
  }));
  utils.registerComponentHelper(loader, AntdOption, {
    name: names.optionComponentName,
    displayName: "Option",
    parentComponentName: names.selectComponentName,
    props: {
      children: __spreadValues({
        type: "slot",
        defaultValue: "Option"
      }, { mergeWithParent: true }),
      value: {
        type: "string"
      }
    },
    importPath: "@plasmicpkgs/antd5/skinny/registerSelect",
    importName: "AntdOption"
  });
  utils.registerComponentHelper(loader, AntdOptionGroup, {
    name: names.optionGroupComponentName,
    displayName: "Option Group",
    parentComponentName: names.selectComponentName,
    props: {
      children: {
        type: "slot",
        defaultValue: [
          {
            type: "component",
            name: "plasmic-antd5-option",
            props: {
              value: "option1",
              children: {
                type: "text",
                value: "Option 1"
              }
            }
          },
          {
            type: "component",
            name: "plasmic-antd5-option",
            props: {
              value: "option2",
              children: {
                type: "text",
                value: "Option 1"
              }
            }
          }
        ]
      },
      label: {
        type: "slot",
        defaultValue: "Group label"
      }
    },
    importPath: "@plasmicpkgs/antd5/skinny/registerSelect",
    importName: "AntdOptionGroup"
  });
}

exports.AntdOption = AntdOption;
exports.AntdOptionGroup = AntdOptionGroup;
exports.AntdSelect = AntdSelect;
exports.registerSelect = registerSelect;
//# sourceMappingURL=registerSelect.cjs.js.map
