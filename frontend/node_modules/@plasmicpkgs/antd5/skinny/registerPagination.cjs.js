'use strict';

var antd = require('antd');
var React = require('react');
var utils = require('./utils-7711f93b.cjs.js');
require('@plasmicapp/host/registerComponent');
require('@plasmicapp/host/registerGlobalContext');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var React__default = /*#__PURE__*/_interopDefault(React);

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
function AntdPagination(props) {
  const _a = props, { paginatedUrl, pageSizeOptions } = _a, rest = __objRest(_a, ["paginatedUrl", "pageSizeOptions"]);
  React.useEffect(() => {
    if (props.current && props.pageSize && props.onChange) {
      props.onChange(props.current, props.pageSize);
    }
  }, []);
  return /* @__PURE__ */ React__default.default.createElement(
    antd.Pagination,
    __spreadValues({
      pageSizeOptions: pageSizeOptions == null ? void 0 : pageSizeOptions.filter((i) => i == null ? void 0 : i.pageSize).map((i) => i.pageSize),
      itemRender: paginatedUrl ? (pageNo, _, originalElement) => {
        var _a2, _b;
        if (!React__default.default.isValidElement(originalElement) || !props.pageSize) {
          return originalElement;
        }
        let rel = void 0;
        if (props.current) {
          rel = pageNo === props.current ? "self" : pageNo === props.current - 1 ? "prev" : pageNo === props.current + 1 ? "next" : void 0;
        }
        const href = paginatedUrl(pageNo, props.pageSize);
        return React__default.default.cloneElement(originalElement, __spreadProps(__spreadValues({}, originalElement.props), {
          rel,
          href,
          style: __spreadProps(__spreadValues({}, (_b = (_a2 = originalElement.props) == null ? void 0 : _a2.style) != null ? _b : {}), {
            pointerEvents: "none"
          })
        }));
      } : void 0
    }, rest)
  );
}
const paginationComponentName = "plasmic-antd5-pagination";
const paginationHelpers = {
  states: {
    pageSize: {
      onChangeArgsToValue: (_, pageSize) => pageSize
    },
    startIndex: {
      onChangeArgsToValue: (currentPage, pageSize) => (currentPage - 1) * pageSize
    },
    endIndex: {
      onChangeArgsToValue: (currentPage, pageSize) => pageSize * currentPage - 1
    }
  }
};
function registerPagination(loader) {
  utils.registerComponentHelper(loader, AntdPagination, {
    name: paginationComponentName,
    displayName: "Pagination",
    props: {
      current: {
        editOnly: true,
        uncontrolledProp: "defaultCurrent",
        type: "number",
        displayName: "Current Page",
        description: `Default current page`,
        defaultValue: 1
      },
      total: {
        type: "number",
        defaultValueHint: 0,
        description: `Total number of data items`
      },
      pageSize: {
        editOnly: true,
        uncontrolledProp: "defaultPageSize",
        type: "number",
        displayName: "Page size",
        description: `Default number of items per page`,
        defaultValue: 10
      },
      disabled: {
        type: "boolean",
        defaultValueHint: false,
        description: `Disable pagination controls`
      },
      hideOnSinglePage: {
        type: "boolean",
        defaultValueHint: false,
        advanced: true,
        description: `Hide pager on single page`
      },
      showLessItems: {
        type: "boolean",
        defaultValueHint: false,
        advanced: true,
        description: `Show less page items`,
        hidden: (ps) => !!ps.simple
      },
      showQuickJumper: {
        type: "boolean",
        defaultValueHint: false,
        advanced: true,
        description: `Show "Go to page" control to enable jumping to pages directly`,
        hidden: (ps) => !!ps.simple
      },
      showSizeChanger: {
        type: "boolean",
        defaultValueHint: (ps) => ps.total ? ps.total > 50 : false,
        advanced: true,
        description: `Show page size selector`,
        hidden: (ps) => !!ps.simple
      },
      //   showTitle prop seems to be doing nothing, so this is skipped
      //   showTitle: {
      //     type: "boolean",
      //     defaultValueHint: true,
      //     description: `Show page item's title`,
      //   },
      showTotal: {
        type: "function",
        displayName: "Show total",
        description: "Display the total number and range",
        advanced: true,
        argNames: ["total", "range"],
        argValues: (_ps, ctx) => [ctx.data[0], ctx.data[1]]
      },
      simple: {
        type: "boolean",
        defaultValueHint: false,
        description: `Uuse simple mode (i.e. minimal controls)`
      },
      size: {
        type: "choice",
        defaultValueHint: "default",
        description: `Size of the pager`,
        options: ["default", "small"]
      },
      pageSizeOptions: {
        type: "array",
        defaultValue: [
          {
            pageSize: 10
          },
          {
            pageSize: 20
          },
          {
            pageSize: 50
          },
          {
            pageSize: 100
          }
        ],
        description: "The list of available page sizes",
        advanced: true,
        itemType: {
          type: "object",
          nameFunc: (item) => item.pageSize,
          fields: {
            pageSize: {
              type: "number",
              min: 1
            }
          }
        }
      },
      paginatedUrl: {
        type: "function",
        advanced: true,
        description: "Helps generate SEO-friendly pagination links. These links will include appropriate href attributes, ensuring that search engines can effectively crawl and index your paginated content",
        control: {
          type: "href"
        },
        argNames: ["pageNo", "pageSize"],
        argValues: (_props, ctx) => {
          var _a;
          return [
            (_a = ctx == null ? void 0 : ctx.data) == null ? void 0 : _a[0],
            _props.pageSize
          ];
        }
      },
      onChange: {
        type: "eventHandler",
        advanced: true,
        argTypes: [
          {
            name: "page",
            type: "number"
          },
          {
            name: "pageSize",
            type: "number"
          }
        ]
      },
      onShowSizeChange: {
        type: "eventHandler",
        advanced: true,
        argTypes: [
          {
            name: "current",
            type: "number"
          },
          {
            name: "size",
            type: "number"
          }
        ]
      }
    },
    states: {
      currentPage: {
        type: "writable",
        valueProp: "current",
        onChangeProp: "onChange",
        variableType: "number"
      },
      pageSize: __spreadValues({
        type: "writable",
        valueProp: "pageSize",
        onChangeProp: "onShowSizeChange",
        variableType: "number"
      }, paginationHelpers.states.pageSize),
      startIndex: __spreadValues({
        type: "readonly",
        variableType: "number",
        onChangeProp: "onChange"
      }, paginationHelpers.states.startIndex),
      endIndex: __spreadValues({
        type: "readonly",
        variableType: "number",
        onChangeProp: "onChange"
      }, paginationHelpers.states.endIndex)
    },
    componentHelpers: {
      helpers: paginationHelpers,
      importName: "paginationHelpers",
      importPath: "@plasmicpkgs/antd5/skinny/registerPagination"
    },
    importPath: "@plasmicpkgs/antd5/skinny/registerPagination",
    importName: "AntdPagination"
  });
}

exports.AntdPagination = AntdPagination;
exports.paginationComponentName = paginationComponentName;
exports.paginationHelpers = paginationHelpers;
exports.registerPagination = registerPagination;
//# sourceMappingURL=registerPagination.cjs.js.map
