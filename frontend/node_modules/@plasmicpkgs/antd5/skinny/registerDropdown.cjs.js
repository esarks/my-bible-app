'use strict';

var antd = require('antd');
var React = require('react');
var registerMenu = require('./registerMenu.cjs.js');
var utils = require('./utils-7711f93b.cjs.js');
require('@plasmicapp/host/registerComponent');
require('@plasmicapp/host/registerGlobalContext');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var React__default = /*#__PURE__*/_interopDefault(React);

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
function addKeysToUnkeyedMenuItems(unkeyedMenuItems, maybeGenKey) {
  const genKey = maybeGenKey != null ? maybeGenKey : (() => {
    let key = 0;
    return () => {
      return `${key++}`;
    };
  })();
  return unkeyedMenuItems == null ? void 0 : unkeyedMenuItems.map((item) => {
    if (!item) {
      return null;
    }
    const newItem = __spreadValues({}, item);
    if (!newItem.key) {
      newItem.key = genKey();
    }
    if ("children" in newItem && newItem.children) {
      newItem.children = addKeysToUnkeyedMenuItems(newItem.children, genKey);
    }
    return newItem;
  });
}
function AntdDropdown(props) {
  const _a = props, {
    children,
    onAction,
    menuItems,
    useMenuItemsSlot = false,
    menuItemsJson: unkeyedMenuItems,
    trigger = "click",
    dropdownMenuScopeClassName
  } = _a, rest = __objRest(_a, [
    "children",
    "onAction",
    "menuItems",
    "useMenuItemsSlot",
    "menuItemsJson",
    "trigger",
    "dropdownMenuScopeClassName"
  ]);
  const keyedMenuItems = addKeysToUnkeyedMenuItems(unkeyedMenuItems);
  return /* @__PURE__ */ React__default.default.createElement(
    antd.Dropdown,
    __spreadProps(__spreadValues({}, rest), {
      trigger: [trigger],
      overlay: () => {
        var _a2;
        const itemsChildren = useMenuItemsSlot ? (_a2 = menuItems == null ? void 0 : menuItems()) != null ? _a2 : [] : void 0;
        const items = useMenuItemsSlot ? void 0 : keyedMenuItems;
        return /* @__PURE__ */ React__default.default.createElement(
          antd.Menu,
          {
            className: `${dropdownMenuScopeClassName}`,
            onClick: (event) => onAction == null ? void 0 : onAction(event.key),
            items
          },
          itemsChildren
        );
      }
    }),
    typeof children === "string" ? /* @__PURE__ */ React__default.default.createElement("div", null, children) : children
  );
}
function registerDropdown(loader) {
  utils.registerComponentHelper(loader, AntdDropdown, {
    name: "plasmic-antd5-dropdown",
    displayName: "Dropdown",
    props: {
      menuItems: {
        type: "slot",
        displayName: "Menu items",
        hidden: (ps) => !ps.useMenuItemsSlot,
        allowedComponents: [
          "plasmic-antd5-menu-item",
          "plasmic-antd5-menu-item-group",
          "plasmic-antd5-menu-divider",
          "plasmic-antd5-submenu"
        ],
        defaultValue: [
          {
            type: "component",
            name: "plasmic-antd5-menu-item",
            props: {
              key: "menu-item-1"
            }
          },
          {
            type: "component",
            name: "plasmic-antd5-menu-item",
            props: {
              key: "menu-item-2"
            }
          }
        ],
        renderPropParams: []
      },
      menuItemsJson: {
        type: "array",
        displayName: "Menu Items",
        hidden: (ps) => !!ps.useMenuItemsSlot,
        itemType: registerMenu.UNKEYED_MENU_ITEM_TYPE,
        defaultValue: [
          {
            type: "item",
            value: "action1",
            label: "Action 1"
          },
          {
            type: "item",
            value: "action2",
            label: "Action 2"
          }
        ]
      },
      dropdownMenuScopeClassName: {
        type: "styleScopeClass",
        scopeName: "dropdownMenu"
      },
      menuClassName: {
        type: "class",
        displayName: "Menu",
        selectors: [
          {
            selector: ":dropdownMenu.ant-dropdown-menu",
            label: "Base"
          }
        ]
      },
      menuItemClassName: {
        type: "class",
        displayName: "Menu item",
        selectors: [
          {
            selector: ":dropdownMenu.ant-dropdown-menu .ant-dropdown-menu-item",
            label: "Base"
          },
          {
            selector: ":dropdownMenu.ant-dropdown-menu .ant-dropdown-menu-item-active",
            label: "Focused"
          }
        ]
      },
      open: {
        type: "boolean",
        description: "Toggle visibility of dropdown menu in Plasmic Editor",
        editOnly: true,
        uncontrolledProp: "fakeOpen",
        defaultValueHint: false
      },
      disabled: {
        type: "boolean",
        description: "Whether the dropdown menu is disabled",
        defaultValueHint: false
      },
      placement: {
        type: "choice",
        options: [
          "bottomLeft",
          "bottomCenter",
          "bottomRight",
          "topLeft",
          "topCenter",
          "topRight"
        ],
        description: "Placement of popup menu",
        defaultValueHint: "bottomLeft",
        advanced: true
      },
      trigger: {
        type: "choice",
        options: [
          { value: "click", label: "Click" },
          { value: "hover", label: "Hover" },
          { value: "contextMenu", label: "Right-click" }
        ],
        description: "The trigger mode which executes the dropdown action",
        defaultValueHint: "click"
      },
      useMenuItemsSlot: {
        type: "boolean",
        displayName: "Use menu items slot",
        advanced: true,
        description: "Instead of configuring a list of menu items, build the menu items using MenuItem elements. This gives you greater control over item styling."
      },
      children: __spreadValues({
        type: "slot",
        defaultValue: [
          {
            type: "component",
            name: "plasmic-antd5-button",
            props: {
              children: {
                type: "text",
                value: "Dropdown"
              }
            }
          }
        ]
      }, { mergeWithParent: true }),
      onAction: {
        type: "eventHandler",
        argTypes: [{ name: "key", type: "string" }]
      }
    },
    importPath: "@plasmicpkgs/antd5/skinny/registerDropdown",
    importName: "AntdDropdown"
  });
}

exports.AntdDropdown = AntdDropdown;
exports.registerDropdown = registerDropdown;
//# sourceMappingURL=registerDropdown.cjs.js.map
