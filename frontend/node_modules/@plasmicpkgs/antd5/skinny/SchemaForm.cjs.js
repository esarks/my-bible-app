'use strict';

var dataSources = require('@plasmicapp/data-sources');
var antd = require('antd');
var React = require('react');
var registerCheckbox = require('./registerCheckbox.cjs.js');
var registerDatePicker = require('./registerDatePicker.cjs.js');
var registerRadio = require('./registerRadio.cjs.js');
var registerSelect = require('./registerSelect.cjs.js');
var utils = require('./utils-7711f93b.cjs.js');
var Form = require('./Form.cjs.js');
var FormItem = require('./FormItem.cjs.js');
require('./names-3aea627b.cjs.js');
require('dayjs');
require('./react-utils-11b0221a.cjs.js');
require('classnames');
require('@plasmicapp/host/registerComponent');
require('@plasmicapp/host/registerGlobalContext');
require('fast-deep-equal');
require('./contexts-a2387bed.cjs.js');
require('@plasmicapp/host');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var React__default = /*#__PURE__*/_interopDefault(React);

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
function deriveFormFieldConfigs(dataFormItems, schema, data) {
  return dataSources.deriveFieldConfigs(
    dataFormItems,
    schema,
    (field) => {
      var _a;
      return __spreadValues({
        inputType: Form.InputType.Text
      }, field && {
        key: field.id,
        fieldId: field.id,
        label: (_a = field.label) != null ? _a : field.id,
        name: field.id,
        inputType: field.type === "string" ? Form.InputType.Text : field.type === "number" ? Form.InputType.Number : field.type === "boolean" ? Form.InputType.Checkbox : Form.InputType.Text,
        //missing date and date-time
        initialValue: data ? data[field.id] : void 0
      });
    }
  );
}
function useFormItemDefinitions(rawData, props) {
  const { mode, dataFormItems, setControlContextData } = props;
  return React__default.default.useMemo(() => {
    const data = rawData && dataSources.normalizeData(rawData);
    const schema = data && (data == null ? void 0 : data.schema);
    if (mode !== "simplified" || !rawData || rawData.isLoading || rawData.error || !data || !schema || !data.data) {
      return void 0;
    }
    const row = data.data.length > 0 ? data.data[0] : void 0;
    return deriveFormFieldConfigs(dataFormItems != null ? dataFormItems : [], schema, row);
  }, [mode, setControlContextData, dataFormItems, rawData]);
}
const useRawData = (props) => {
  const rawData = dataSources.usePlasmicDataOp(props.data);
  return props.data ? rawData : void 0;
};
const SchemaForm = React__default.default.forwardRef(
  (props, ref) => {
    const [remountKey, setRemountKey] = React__default.default.useState(0);
    const forceRemount = React__default.default.useCallback(
      () => setRemountKey((k) => k + 1),
      [setRemountKey]
    );
    const wrapperRef = React__default.default.useRef(null);
    React__default.default.useImperativeHandle(
      ref,
      () => wrapperRef.current ? __spreadValues({}, wrapperRef.current) : {}
    );
    const rawData = useRawData(props);
    const formItemDefinitions = useFormItemDefinitions(rawData, props);
    React__default.default.useEffect(() => {
      if (rawData && !rawData.isLoading) {
        forceRemount();
      }
    }, [rawData]);
    const previousDataOp = utils.usePrevious(props.data);
    React__default.default.useEffect(() => {
      if (previousDataOp == null && props.data != null || previousDataOp != null && props.data == null) {
        forceRemount();
      }
    }, [props.data]);
    const _a = props, { dataFormItems, formItems, data } = _a, rest = __objRest(_a, ["dataFormItems", "formItems", "data"]);
    const actualFormItems = props.mode === "simplified" && formItemDefinitions ? formItemDefinitions.mergedFields : data ? dataFormItems : formItems;
    const previousFormItems = React__default.default.useRef([]);
    React__default.default.useEffect(() => {
      if (!(rawData && rawData.isLoading)) {
        previousFormItems.current = actualFormItems != null ? actualFormItems : [];
      }
    }, [rawData, actualFormItems]);
    if (props.mode === "simplified" && rawData && "error" in rawData) {
      return /* @__PURE__ */ React__default.default.createElement("div", null, "Error when fetching data: ", rawData.error.message);
    }
    const childrenNode = props.mode === "simplified" ? /* @__PURE__ */ React__default.default.createElement(React__default.default.Fragment, null, (actualFormItems != null ? actualFormItems : []).map((formItem) => {
      var _a2, _b, _c;
      return /* @__PURE__ */ React__default.default.createElement(
        utils.ErrorBoundary,
        {
          canvasEnvId: props["data-plasmic-canvas-envs"],
          message: `Error rendering input for ${(_b = (_a2 = formItem.label) != null ? _a2 : formItem.name) != null ? _b : "undefined"}`
        },
        /* @__PURE__ */ React__default.default.createElement(
          FormItem.FormItemWrapper,
          __spreadProps(__spreadValues({}, utils.omit(formItem, "key")), {
            noLabel: formItem.inputType === Form.InputType.Checkbox || formItem.noLabel,
            valuePropName: (_c = formItem.valuePropName) != null ? _c : formItem.inputType === Form.InputType.Checkbox ? "checked" : void 0,
            style: { width: "100%" }
          }),
          formItem.inputType === Form.InputType.Text ? /* @__PURE__ */ React__default.default.createElement(antd.Input, null) : formItem.inputType === Form.InputType.Password ? /* @__PURE__ */ React__default.default.createElement(antd.Input.Password, null) : formItem.inputType === Form.InputType.TextArea ? /* @__PURE__ */ React__default.default.createElement(antd.Input.TextArea, null) : formItem.inputType === Form.InputType.Number ? /* @__PURE__ */ React__default.default.createElement(antd.InputNumber, null) : formItem.inputType === Form.InputType.Checkbox ? /* @__PURE__ */ React__default.default.createElement(registerCheckbox.AntdCheckbox, null, formItem.label) : formItem.inputType === Form.InputType.Select ? /* @__PURE__ */ React__default.default.createElement(registerSelect.AntdSelect, { options: formItem.options }) : formItem.inputType === Form.InputType.DatePicker ? /* @__PURE__ */ React__default.default.createElement(registerDatePicker.AntdDatePicker, { showTime: formItem.showTime }) : formItem.inputType === Form.InputType.RadioGroup ? /* @__PURE__ */ React__default.default.createElement(
            registerRadio.AntdRadioGroup,
            {
              options: formItem.options,
              optionType: formItem.optionType,
              style: { padding: "8px" }
            }
          ) : null
        )
      );
    }), props.submitSlot) : props.children;
    const isSchemaForm = props.mode === "simplified" && !!props.data;
    const isLoadingData = rawData == null ? void 0 : rawData.isLoading;
    return /* @__PURE__ */ React__default.default.createElement(
      Form.SchemaFormContext.Provider,
      {
        value: {
          mergedFields: formItemDefinitions == null ? void 0 : formItemDefinitions.mergedFields,
          minimalFullLengthFields: formItemDefinitions == null ? void 0 : formItemDefinitions.mergedFields,
          schema: rawData == null ? void 0 : rawData.schema
        }
      },
      /* @__PURE__ */ React__default.default.createElement(
        Form.FormWrapper,
        __spreadProps(__spreadValues({
          key: remountKey
        }, rest), {
          children: childrenNode,
          formItems: rawData && rawData.isLoading ? previousFormItems.current : actualFormItems,
          ref: wrapperRef,
          style: isSchemaForm && isLoadingData ? {
            opacity: 0.5,
            transitionDelay: "250ms",
            transition: "1s"
          } : {}
        })
      ),
      isSchemaForm && isLoadingData && /* @__PURE__ */ React__default.default.createElement(
        "div",
        {
          style: {
            position: "absolute",
            width: "100%",
            height: "100%"
          }
        }
      )
    );
  }
);

exports.FormWrapper = SchemaForm;
exports.SchemaForm = SchemaForm;
exports.deriveFormFieldConfigs = deriveFormFieldConfigs;
//# sourceMappingURL=SchemaForm.cjs.js.map
