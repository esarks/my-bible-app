import { Radio } from 'antd';
import React from 'react';
import { r as radioComponentName, e as radioGroupComponentName, g as radioButtonComponentName } from './names-73583568.esm.js';
import { r as registerComponentHelper, t as traverseReactEltTree } from './utils-5ebcaa63.esm.js';
import '@plasmicapp/host/registerComponent';
import '@plasmicapp/host/registerGlobalContext';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const RadioGroup = Radio.Group;
const AntdRadio = Radio;
const AntdRadioButton = Radio.Button;
function AntdRadioGroup(props) {
  const _a = props, { onChange, useChildren } = _a, rest = __objRest(_a, ["onChange", "useChildren"]);
  const wrappedOnChange = React.useMemo(() => {
    if (onChange) {
      return (event) => onChange(event.target.value);
    } else {
      return void 0;
    }
  }, [onChange]);
  return /* @__PURE__ */ React.createElement(
    RadioGroup,
    __spreadProps(__spreadValues({}, rest), {
      onChange: wrappedOnChange,
      options: useChildren ? void 0 : rest.options
    })
  );
}
function registerRadio(loader) {
  registerComponentHelper(loader, AntdRadio, {
    name: radioComponentName,
    displayName: "Radio",
    props: {
      value: {
        type: "string",
        description: "The radio option value"
      },
      disabled: {
        type: "boolean",
        defaultValueHint: false
      },
      autoFocus: {
        type: "boolean",
        description: "If focused when first shown",
        defaultValueHint: false,
        advanced: true
      },
      children: __spreadValues({
        type: "slot",
        defaultValue: [
          {
            type: "text",
            value: "Radio"
          }
        ]
      }, { mergeWithParent: true })
    },
    importPath: "@plasmicpkgs/antd5/skinny/registerRadio",
    importName: "AntdRadio",
    parentComponentName: radioGroupComponentName
  });
  registerComponentHelper(loader, AntdRadioButton, {
    name: radioButtonComponentName,
    displayName: "Radio Button",
    props: {
      value: {
        type: "string",
        description: "The radio option value"
      },
      disabled: {
        type: "boolean",
        defaultValueHint: false
      },
      autoFocus: {
        type: "boolean",
        description: "If focused when first shown",
        defaultValueHint: false,
        advanced: true
      },
      children: __spreadValues({
        type: "slot",
        defaultValue: [
          {
            type: "text",
            value: "Radio"
          }
        ]
      }, { mergeWithParent: true })
    },
    importPath: "@plasmicpkgs/antd5/skinny/registerRadio",
    importName: "AntdRadioButton",
    parentComponentName: radioGroupComponentName
  });
  registerComponentHelper(loader, AntdRadioGroup, __spreadValues({
    name: radioGroupComponentName,
    displayName: "Radio Group",
    props: {
      options: {
        type: "array",
        hidden: (ps) => !!ps.useChildren,
        itemType: {
          type: "object",
          nameFunc: (item) => item.label || item.value,
          fields: {
            value: "string",
            label: "string"
          }
        },
        defaultValue: [
          {
            value: "option1",
            label: "Option 1"
          },
          {
            value: "option2",
            label: "Option 2"
          }
        ]
      },
      optionType: {
        type: "choice",
        options: [
          { value: "default", label: "Radio" },
          { value: "button", label: "Button" }
        ],
        hidden: (ps) => !!ps.useChildren,
        defaultValueHint: "default"
      },
      value: {
        type: "choice",
        editOnly: true,
        uncontrolledProp: "defaultValue",
        description: "Default selected value",
        options: (ps) => {
          var _a;
          if (ps.useChildren) {
            const options = /* @__PURE__ */ new Set();
            traverseReactEltTree(ps.children, (elt) => {
              var _a2;
              if (typeof ((_a2 = elt == null ? void 0 : elt.props) == null ? void 0 : _a2.value) === "string") {
                options.add(elt.props.value);
              }
            });
            return Array.from(options.keys());
          } else {
            return (_a = ps.options) != null ? _a : [];
          }
        },
        hidden: (ps) => !!ps.__plasmicFormField
      },
      disabled: {
        type: "boolean",
        description: "Disables all radios",
        defaultValueHint: false
      },
      useChildren: {
        displayName: "Use slot",
        type: "boolean",
        defaultValueHint: false,
        advanced: true,
        description: "Instead of configuring a list of options, customize the contents of the RadioGroup by dragging and dropping Radio in the outline/canvas, inside the 'children' slot. Lets you use any content or formatting within the Radio and RadioButton."
      },
      children: {
        type: "slot",
        allowedComponents: [
          "plasmic-antd5-radio",
          "plasmic-antd5-radio-button"
        ],
        defaultValue: [
          {
            type: "component",
            name: "plasmic-antd5-radio",
            props: {
              value: "op1",
              children: {
                type: "text",
                value: "Option 1"
              }
            }
          },
          {
            type: "component",
            name: "plasmic-antd5-radio",
            props: {
              value: "op2",
              children: {
                type: "text",
                value: "Option 2"
              }
            }
          }
        ]
      },
      onChange: {
        type: "eventHandler",
        argTypes: [{ name: "value", type: "string" }]
      }
    },
    states: {
      value: {
        type: "writable",
        valueProp: "value",
        onChangeProp: "onChange",
        variableType: "text",
        hidden: (ps) => !!ps.__plasmicFormField
      }
    },
    importPath: "@plasmicpkgs/antd5/skinny/registerRadio",
    importName: "AntdRadioGroup",
    defaultStyles: {
      layout: "hbox"
    }
  }, {
    trapsSelection: true
  }));
}

export { AntdRadio, AntdRadioButton, AntdRadioGroup, registerRadio };
//# sourceMappingURL=registerRadio.esm.js.map
