import { Upload, Image } from 'antd';
import React, { useRef, useState, useMemo } from 'react';
import { r as registerComponentHelper } from './utils-5ebcaa63.esm.js';
import '@plasmicapp/host/registerComponent';
import '@plasmicapp/host/registerGlobalContext';

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
function getThumbUrl(file) {
  var _a;
  if (!((_a = file == null ? void 0 : file.type) == null ? void 0 : _a.startsWith("image"))) {
    return void 0;
  }
  return `data:${file.type};base64,${file.contents}`;
}
function UploadWrapper(props) {
  const _a = props, { files, dragAndDropFiles, onFilesChange, maxCount } = _a, rest = __objRest(_a, ["files", "dragAndDropFiles", "onFilesChange", "maxCount"]);
  const filesRef = useRef();
  filesRef.current = files;
  const [previewFileId, setPreviewFileId] = useState();
  const [previewOpen, setPreviewOpen] = useState(false);
  const handleChange = (info) => {
    var _a2;
    const { file } = info;
    if (file.status === "removed") {
      return;
    }
    const metadata = {
      uid: file.uid,
      name: file.name,
      size: file.size,
      type: file.type,
      lastModified: file.lastModified
    };
    onFilesChange == null ? void 0 : onFilesChange([
      ...((_a2 = filesRef.current) != null ? _a2 : []).slice(0, (maxCount || Infinity) - 1),
      __spreadProps(__spreadValues({}, metadata), {
        status: "uploading"
      })
    ]);
    const reader = new FileReader();
    reader.onload = () => {
      var _a3, _b;
      if (!((_a3 = filesRef.current) == null ? void 0 : _a3.map((f) => f.uid).includes(metadata.uid))) {
        return;
      }
      onFilesChange == null ? void 0 : onFilesChange([
        ...((_b = filesRef.current) != null ? _b : []).filter((f) => f.uid !== file.uid),
        __spreadProps(__spreadValues({}, metadata), {
          contents: reader.result.replace(
            /^data:[^;]+;base64,/,
            ""
          ),
          status: "done"
        })
      ]);
    };
    reader.onerror = () => {
      var _a3, _b;
      if (!((_a3 = filesRef.current) == null ? void 0 : _a3.map((f) => f.uid).includes(metadata.uid))) {
        return;
      }
      onFilesChange == null ? void 0 : onFilesChange([
        ...((_b = filesRef.current) != null ? _b : []).filter((f) => f.uid !== file.uid),
        __spreadProps(__spreadValues({}, metadata), {
          status: "error"
        })
      ]);
    };
    reader.readAsDataURL(info.file);
  };
  const handleRemove = (file) => {
    onFilesChange == null ? void 0 : onFilesChange((files != null ? files : []).filter((f) => f.uid !== file.uid));
  };
  const handlePreview = async (file) => {
    var _a2;
    setPreviewFileId((_a2 = files == null ? void 0 : files.filter((f) => file.uid === f.uid)[0]) == null ? void 0 : _a2.uid);
    setPreviewOpen(true);
  };
  const handleCancel = () => setPreviewFileId(void 0);
  const previewFile = useMemo(
    () => files == null ? void 0 : files.filter((f) => previewFileId === f.uid)[0],
    [files, previewFileId]
  );
  const UploadComponent = useMemo(
    () => dragAndDropFiles ? Upload.Dragger : Upload,
    [dragAndDropFiles]
  );
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(
    UploadComponent,
    __spreadProps(__spreadValues({}, rest), {
      fileList: files == null ? void 0 : files.map((f) => __spreadProps(__spreadValues({}, f), {
        thumbUrl: getThumbUrl(f)
      })),
      onPreview: handlePreview,
      beforeUpload: () => {
        return false;
      },
      onChange: (info) => {
        handleChange(info);
      },
      onRemove: (file) => {
        handleRemove(file);
      }
    })
  ), previewFile && /* @__PURE__ */ React.createElement(
    Image,
    {
      wrapperStyle: { display: "none" },
      preview: {
        visible: previewOpen,
        onVisibleChange: (visible) => setPreviewOpen(visible),
        afterOpenChange: (visible) => !visible && handleCancel()
      },
      alt: previewFile == null ? void 0 : previewFile.name,
      src: getThumbUrl(previewFile)
    }
  ));
}
UploadWrapper.__plasmicFormFieldMeta = {
  valueProp: "files",
  onChangeProp: "onFilesChange"
};
function registerUpload(loader) {
  registerComponentHelper(loader, UploadWrapper, __spreadProps(__spreadValues({
    name: "plasmic-antd5-upload",
    displayName: "Upload",
    props: {
      accept: {
        type: "choice",
        displayName: "Allowed types",
        options: [
          {
            value: "",
            label: "Any kind of file"
          },
          {
            value: "image/*",
            label: "Image"
          },
          {
            value: "video/*",
            label: "Video"
          },
          {
            value: "audio/*",
            label: "Audio"
          },
          {
            value: "application/pdf",
            label: "PDF"
          }
        ],
        defaultValue: ""
      },
      listType: {
        type: "choice",
        options: ["text", "picture", "picture-card", "picture-circle"],
        defaultValueHint: "text"
      },
      dragAndDropFiles: {
        type: "boolean",
        defaultValueHint: false,
        advanced: true,
        description: "You can drag files to a specific area, to upload. Alternatively, you can also upload by selecting."
      },
      multiple: {
        type: "boolean",
        advanced: true,
        defaultValueHint: false,
        description: "Upload several files at once in modern browsers"
      },
      files: {
        type: "object",
        displayName: "Files",
        defaultValue: [],
        hidden: (ps) => !!ps.__plasmicFormField
      },
      children: {
        type: "slot",
        defaultValue: [
          {
            type: "component",
            name: "plasmic-antd5-button",
            props: {
              children: {
                type: "text",
                value: "Upload"
              }
            }
          }
        ]
      },
      maxCount: {
        type: "number",
        displayName: "Limit of files",
        advanced: true
      },
      onFilesChange: {
        type: "eventHandler",
        displayName: "On file uploaded",
        argTypes: [
          {
            name: "files",
            type: "array"
          }
        ]
      },
      showUploadList: {
        type: "boolean",
        displayName: "List files",
        defaultValue: true
      }
    },
    states: {
      files: {
        type: "writable",
        valueProp: "files",
        variableType: "array",
        onChangeProp: "onFilesChange",
        hidden: (ps) => !!ps.__plasmicFormField
      }
    }
  }, { trapsSelection: true }), {
    importPath: "@plasmicpkgs/antd5/skinny/registerUpload",
    importName: "UploadWrapper"
  }));
}

export { UploadWrapper, registerUpload };
//# sourceMappingURL=registerUpload.esm.js.map
