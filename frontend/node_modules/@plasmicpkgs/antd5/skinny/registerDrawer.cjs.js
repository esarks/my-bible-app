'use strict';

var antd = require('antd');
var React = require('react');
var utils = require('./utils-7711f93b.cjs.js');
require('@plasmicapp/host/registerComponent');
require('@plasmicapp/host/registerGlobalContext');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var React__default = /*#__PURE__*/_interopDefault(React);

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
function AntdDrawer(props) {
  const _a = props, { onOpenChange, onClose, open, footer, drawerScopeClassName } = _a, rest = __objRest(_a, ["onOpenChange", "onClose", "open", "footer", "drawerScopeClassName"]);
  const memoOnClose = React__default.default.useMemo(() => {
    if (onOpenChange || onClose) {
      return (e) => {
        onOpenChange == null ? void 0 : onOpenChange(false);
        onClose == null ? void 0 : onClose(e);
      };
    } else {
      return void 0;
    }
  }, [onOpenChange, onClose]);
  return /* @__PURE__ */ React__default.default.createElement(
    antd.Drawer,
    __spreadProps(__spreadValues({}, rest), {
      onClose: memoOnClose,
      rootClassName: drawerScopeClassName,
      open,
      footer: footer != null ? footer : void 0,
      className: `${props.className} ${props.defaultStylesClassName}`
    })
  );
}
function registerDrawer(loader) {
  utils.registerComponentHelper(loader, AntdDrawer, {
    name: "plasmic-antd5-drawer",
    displayName: "Drawer",
    props: {
      open: {
        type: "boolean"
      },
      placement: {
        type: "choice",
        options: ["top", "right", "bottom", "left"],
        defaultValueHint: "right"
      },
      children: {
        type: "slot",
        defaultValue: {
          type: "vbox",
          children: ["Drawer content"]
        }
      },
      title: {
        type: "slot",
        defaultValue: "Drawer title"
      },
      footer: {
        type: "slot",
        hidePlaceholder: true
      },
      closeIcon: {
        type: "slot",
        hidePlaceholder: true
      },
      onOpenChange: {
        type: "eventHandler",
        argTypes: [{ name: "open", type: "boolean" }]
      },
      drawerScopeClassName: {
        type: "styleScopeClass",
        scopeName: "drawer"
      },
      drawerHeaderClassName: {
        type: "class",
        displayName: "Drawer header",
        noSelf: true,
        selectors: [
          {
            selector: ":drawer .ant-drawer-header",
            label: "Base"
          }
        ]
      },
      drawerBodyClassName: {
        type: "class",
        displayName: "Drawer body",
        noSelf: true,
        selectors: [
          {
            selector: ":drawer .ant-drawer-body",
            label: "Base"
          }
        ]
      },
      drawerFooterClassName: {
        type: "class",
        displayName: "Drawer footer",
        noSelf: true,
        selectors: [
          {
            selector: ":drawer .ant-drawer-footer",
            label: "Base"
          }
        ]
      },
      drawerTitleClassName: {
        type: "class",
        displayName: "Drawer title",
        noSelf: true,
        selectors: [
          {
            selector: ":drawer .ant-drawer-title",
            label: "Base"
          }
        ]
      },
      drawerMaskClassName: {
        type: "class",
        displayName: "Drawer mask",
        styleSections: ["background"],
        noSelf: true,
        selectors: [
          {
            selector: ":drawer .ant-drawer-mask",
            label: "Base"
          }
        ]
      },
      drawerContentWrapperClassName: {
        type: "class",
        displayName: "Drawer content wrapper",
        noSelf: true,
        selectors: [
          {
            selector: ":drawer .ant-drawer-content-wrapper",
            label: "Base"
          }
        ],
        advanced: true
      },
      closeButtonClassName: {
        type: "class",
        displayName: "Close button",
        noSelf: true,
        selectors: [
          {
            selector: ":drawer .ant-drawer-close",
            label: "Base"
          }
        ],
        advanced: true
      },
      forceRender: {
        advanced: true,
        type: "boolean"
      },
      defaultStylesClassName: {
        type: "themeResetClass"
      }
    },
    states: {
      open: {
        type: "writable",
        valueProp: "open",
        onChangeProp: "onOpenChange",
        variableType: "boolean"
      }
    },
    importPath: "@plasmicpkgs/antd5/skinny/registerDrawer",
    importName: "AntdDrawer"
  });
}

exports.AntdDrawer = AntdDrawer;
exports.registerDrawer = registerDrawer;
//# sourceMappingURL=registerDrawer.cjs.js.map
