'use strict';

var antd = require('antd');
var dayjs = require('dayjs');
var kebabCase = require('lodash/kebabCase');
var React = require('react');
var utils = require('./utils-7711f93b.cjs.js');
var localeData = require('dayjs/plugin/localeData');
var weekday = require('dayjs/plugin/weekday');
require('@plasmicapp/host/registerComponent');
require('@plasmicapp/host/registerGlobalContext');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var dayjs__default = /*#__PURE__*/_interopDefault(dayjs);
var kebabCase__default = /*#__PURE__*/_interopDefault(kebabCase);
var React__default = /*#__PURE__*/_interopDefault(React);
var localeData__default = /*#__PURE__*/_interopDefault(localeData);
var weekday__default = /*#__PURE__*/_interopDefault(weekday);

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
dayjs__default.default.extend(weekday__default.default);
dayjs__default.default.extend(localeData__default.default);
const { RangePicker } = antd.DatePicker;
function getDayjsRange(dateRange) {
  return Array.isArray(dateRange) ? [
    dateRange[0] ? dayjs__default.default(dateRange[0]) : null,
    dateRange[1] ? dayjs__default.default(dateRange[1]) : null
  ] : [null, null];
}
function getStrRange(dateRange) {
  return Array.isArray(dateRange) ? dateRange.map(
    (date) => date && !(typeof date === "string") && "toISOString" in date ? date.toISOString() : date === null ? void 0 : date
  ) : void 0;
}
function AntdDateRangePicker(props) {
  const _a = props, {
    defaultStartDate,
    defaultEndDate,
    startDate,
    endDate,
    allowEmpty,
    allowEmptyEndDate,
    allowEmptyStartDate,
    disabled,
    renderExtraFooter,
    disableStartDate,
    disableEndDate,
    presets,
    picker,
    placeholder,
    onChange,
    popupScopeClassName,
    className
  } = _a, rest = __objRest(_a, [
    "defaultStartDate",
    "defaultEndDate",
    "startDate",
    "endDate",
    "allowEmpty",
    "allowEmptyEndDate",
    "allowEmptyStartDate",
    "disabled",
    "renderExtraFooter",
    "disableStartDate",
    "disableEndDate",
    "presets",
    "picker",
    "placeholder",
    "onChange",
    "popupScopeClassName",
    "className"
  ]);
  const css = `
    @media(max-width: 500px) {
      .ant-picker-dropdown {
        top: 20px !important;
        left: 10px !important;
        right: 10px !important;
        max-height: 95vh;
        position: fixed;
        overflow-y: scroll;
      }

      .ant-picker-panel-layout {
        flex-direction: column;
      }

      .ant-picker-presets {
        min-height: 50px;
        min-width: 100% !important;
      }

      .ant-picker-presets > ul {
        overflow-y: hidden;
        overflow-x: auto;
        display: flex;
        align-items: center;
        justify-content: center;
        flex-wrap: wrap;
        flex-direction: column;
      }

      .ant-picker-presets > ul > li {
        margin: 0 !important;
      }

      .ant-picker-panel-container {
        width: 300px;
      }

      .ant-picker-datetime-panel {
        flex-direction: column;
      }

      .${className} .ant-picker-input > input {
        font-size: 16px !important;
      }

      .ant-picker-header-view {
        line-height: unset !important;
      }

      .ant-picker-content {
        height: unset !important;
      }

      .ant-picker-time-panel-column {
        height: 100px;
      }

      .ant-picker-time-panel-column::after {
        height: 0px !important;
      }

      .ant-picker-range-arrow {
        display: none;
      }
    }
  `;
  const presetsDayjs = React.useMemo(
    () => presets == null ? void 0 : presets.map((p) => __spreadProps(__spreadValues({}, p), { value: getDayjsRange([p.startDate, p.endDate]) })).filter((p) => {
      var _a2, _b;
      return ((_a2 = p.value[0]) == null ? void 0 : _a2.isValid()) && ((_b = p.value[1]) == null ? void 0 : _b.isValid());
    }),
    [presets]
  );
  return /* @__PURE__ */ React__default.default.createElement(React__default.default.Fragment, null, /* @__PURE__ */ React__default.default.createElement(
    RangePicker,
    __spreadProps(__spreadValues({}, rest), {
      picker,
      presets: presetsDayjs,
      allowEmpty: allowEmpty ? [allowEmpty, allowEmpty] : [allowEmptyStartDate, allowEmptyEndDate],
      value: getDayjsRange([startDate, endDate]),
      defaultValue: getDayjsRange([defaultStartDate, defaultEndDate]),
      renderExtraFooter: renderExtraFooter ? () => renderExtraFooter : void 0,
      className,
      inputReadOnly: true,
      disabled: disabled ? disabled : [disableStartDate, disableEndDate],
      placeholder: placeholder == null ? void 0 : placeholder.split(/,\s*/).slice(0, 2),
      popupClassName: popupScopeClassName,
      onChange: (values, _dateStrings) => {
        onChange == null ? void 0 : onChange(getStrRange(values) || [null, null]);
      }
    })
  ), /* @__PURE__ */ React__default.default.createElement("style", { dangerouslySetInnerHTML: { __html: css } }));
}
const dateRangePickerComponentName = "plasmic-antd5-date-range-picker";
const dateRangePickerHelpers = {
  states: {
    startDate: {
      onChangeArgsToValue: (value) => value[0],
      hidden: (ps) => !!ps.__plasmicFormField
    },
    endDate: {
      onChangeArgsToValue: (value) => value[1],
      hidden: (ps) => !!ps.__plasmicFormField
    }
  }
};
function registerDateRangePicker(loader) {
  utils.registerComponentHelper(loader, AntdDateRangePicker, {
    name: dateRangePickerComponentName,
    displayName: "Date Range Picker",
    props: {
      startDate: {
        type: "dateString",
        editOnly: true,
        uncontrolledProp: "defaultStartDate",
        description: "The default start date as ISO strings",
        // TODO: Can there be a default validator attached to each prop type, so dynamic values can be checked?
        hidden: (ps) => !!ps.__plasmicFormField
      },
      endDate: {
        type: "dateString",
        editOnly: true,
        uncontrolledProp: "defaultEndDate",
        description: "The default end date as ISO strings",
        // TODO: Can there be a default validator attached to each prop type, so dynamic values can be checked?
        hidden: (ps) => !!ps.__plasmicFormField
      },
      allowClear: {
        type: "boolean",
        advanced: true,
        defaultValueHint: true,
        description: "Whether to show the clear button"
      },
      autoFocus: {
        type: "boolean",
        description: "Focus when component is rendered",
        defaultValueHint: false,
        advanced: true
      },
      bordered: {
        type: "boolean",
        advanced: true,
        defaultValueHint: true
      },
      changeOnBlur: {
        type: "boolean",
        advanced: true,
        description: "Trigger change when blur. e.g. datetime picker no need click confirm button",
        defaultValueHint: false,
        hidden: (ps) => !ps.showTime
      },
      disabled: {
        type: "boolean",
        description: "Disable date range inputs",
        defaultValueHint: false
      },
      disableStartDate: {
        type: "boolean",
        defaultValueHint: false,
        advanced: true,
        description: "Disable start date input only",
        hidden: (ps) => ps.disabled
      },
      disableEndDate: {
        type: "boolean",
        defaultValueHint: false,
        advanced: true,
        description: "Disable end date input only",
        hidden: (ps) => ps.disabled
      },
      picker: {
        type: "choice",
        options: ["date", "week", "month", "quarter", "year"].map((value) => ({
          value,
          label: utils.capitalize(value)
        })),
        defaultValueHint: "date"
      },
      placeholder: {
        type: "string",
        advanced: true,
        defaultValueHint: "Start date, End date",
        description: "The placeholders of the start and end date inputs, separated by a comma"
      },
      placement: {
        type: "choice",
        options: ["bottomLeft", "bottomRight", "topLeft", "topRight"].map(
          (value) => ({
            value,
            label: kebabCase__default.default(value)
          })
        ),
        advanced: true,
        defaultValueHint: "bottom-left",
        description: "The position where the selection box pops up"
      },
      presets: {
        type: "array",
        advanced: true,
        description: "The preset ranges for quick selection",
        itemType: {
          type: "object",
          nameFunc: (item) => item.label,
          fields: {
            label: "string",
            startDate: {
              type: "dateString"
            },
            endDate: {
              type: "dateString"
            }
          }
        }
      },
      size: {
        type: "choice",
        advanced: true,
        options: ["small", "middle", "large"].map((value) => ({
          value,
          label: utils.capitalize(value)
        })),
        defaultValueHint: "middle"
      },
      status: {
        type: "choice",
        advanced: true,
        options: ["error", "warning"].map((value) => ({
          value,
          label: utils.capitalize(value)
        })),
        description: "Set validation status"
      },
      allowEmpty: {
        type: "boolean",
        advanced: true,
        description: "Allow leaving start or end input empty",
        defaultValueHint: false
      },
      allowEmptyStartDate: {
        type: "boolean",
        advanced: true,
        description: "Allow leaving start input empty",
        defaultValueHint: false,
        hidden: (ps) => ps.allowEmpty
      },
      allowEmptyEndDate: {
        type: "boolean",
        advanced: true,
        description: "Allow leaving end input empty",
        defaultValueHint: false,
        hidden: (ps) => ps.allowEmpty
      },
      renderExtraFooter: {
        type: "slot",
        displayName: "Extra footer",
        hidePlaceholder: true
      },
      showTime: {
        type: "boolean",
        description: "Enable time selection",
        defaultValueHint: false,
        hidden: (ps) => ps.picker !== void 0 && ps.picker !== "date"
      },
      popupScopeClassName: {
        type: "styleScopeClass",
        scopeName: "dateRangePickerPopup"
      },
      popupClassName: {
        type: "class",
        displayName: "Popup container",
        selectors: [
          {
            selector: ":dateRangePickerPopup .ant-picker-panel-container",
            label: "Base"
          }
        ]
      },
      popupHeaderClassName: {
        type: "class",
        displayName: "Popup header",
        selectors: [
          {
            selector: ":dateRangePickerPopup .ant-picker-header",
            label: "Base"
          }
        ]
      },
      popupBodyClassName: {
        type: "class",
        displayName: "Popup body",
        selectors: [
          {
            selector: ":dateRangePickerPopup .ant-picker-body",
            label: "Base"
          }
        ]
      },
      popupFooterClassName: {
        type: "class",
        displayName: "Popup footer",
        selectors: [
          {
            selector: ":dateRangePickerPopup .ant-picker-footer",
            label: "Base"
          }
        ]
      },
      onChange: {
        type: "eventHandler",
        advanced: true,
        argTypes: [{ name: "value", type: "object" }]
      }
    },
    states: {
      startDate: __spreadValues({
        type: "writable",
        valueProp: "startDate",
        onChangeProp: "onChange",
        variableType: "text"
      }, dateRangePickerHelpers.states.startDate),
      endDate: __spreadValues({
        type: "writable",
        valueProp: "endDate",
        onChangeProp: "onChange",
        variableType: "text"
      }, dateRangePickerHelpers.states.endDate)
    },
    componentHelpers: {
      helpers: dateRangePickerHelpers,
      importName: "dateRangePickerHelpers",
      importPath: "@plasmicpkgs/antd5/skinny/registerDateRangePicker"
    },
    importPath: "@plasmicpkgs/antd5/skinny/registerDateRangePicker",
    importName: "AntdDateRangePicker"
  });
}

exports.AntdDateRangePicker = AntdDateRangePicker;
exports.dateRangePickerComponentName = dateRangePickerComponentName;
exports.dateRangePickerHelpers = dateRangePickerHelpers;
exports.registerDateRangePicker = registerDateRangePicker;
//# sourceMappingURL=registerDateRangePicker.cjs.js.map
