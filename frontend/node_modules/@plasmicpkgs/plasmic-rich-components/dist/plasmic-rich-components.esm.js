import 'lodash/get';
import registerComponent from '@plasmicapp/host/registerComponent';
import '@plasmicapp/host/registerGlobalContext';
import { parseDate } from '@plasmicpkgs/luxon-parser';
import dayjs from 'dayjs';
import customParseFormat from 'dayjs/plugin/customParseFormat';
import React, { useRef, useState, useEffect, useMemo } from 'react';
import { Result, Checkbox, Switch, Empty, Descriptions, theme, ConfigProvider, Dropdown, Button, Input, List, Tag, Card, Calendar, Badge } from 'antd';
import { useNormalizedData, deriveFieldConfigs } from '@plasmicapp/data-sources';
import { tinycolor } from '@ctrl/tinycolor';
import { LogoutOutlined, PlusOutlined, EllipsisOutlined } from '@ant-design/icons';
import { ProLayout, ProConfigProvider, ProTable } from '@ant-design/pro-components';
import { useDataEnv, usePlasmicLink } from '@plasmicapp/host';
import { createObjectCsvStringifier } from 'csv-writer-browser';
import fastStringify from 'fast-stringify';
import classNames from 'classnames';
import groupBy from 'lodash/groupBy';
import localeData from 'dayjs/plugin/localeData';
import weekday from 'dayjs/plugin/weekday';

function registerComponentHelper(loader, component, meta) {
  if (loader) {
    loader.registerComponent(component, meta);
  } else {
    registerComponent(component, meta);
  }
}
function ensure(x) {
  if (x === null || x === void 0) {
    throw new Error("Expected non-null or non-undefined value");
  }
  return x;
}
function isOneOf(elem, arr) {
  return arr.includes(elem);
}
function maybe(x, f) {
  if (x === void 0 || x === null)
    return void 0;
  return f(x);
}
function isValidIsoDate(str, extendedOnly = false) {
  if (!str)
    return false;
  if (typeof str !== "string")
    return false;
  if (str.includes(" "))
    return false;
  if (str.length === 10) {
    if (extendedOnly)
      return false;
    dayjs.extend(customParseFormat);
    return dayjs(str, "YYYY-MM-DD", true).isValid();
  }
  if (!dayjs(str).isValid())
    return false;
  if (isNaN(new Date(str).getTime()))
    return false;
  return true;
}
function isLikeDate(value) {
  const parsed = parseDate(value);
  return parsed ? true : false;
}
function isLikeImage(value) {
  return typeof value === "string" ? value.match(/\.(png|jpg|jpeg|gif|svg|webp|avif|ico|bmp|tiff)$/i) : false;
}
function isLikeColor(value) {
  if (typeof value !== "string")
    return false;
  const hex = /^#?([0-9a-fA-F]{3}([0-9a-fA-F]{3})?|[0-9a-fA-F]{4}([0-9a-fA-F]{4})?)$/;
  const rgba = /^rgba?\((\s*\d+\s*,\s*\d+\s*,\s*\d+\s*(,\s*(1|0?(\.\d+)?))?\s*)\)$/;
  const cssNamed = /^(aliceblue|antiquewhite|aqua|aquamarine|azure|beige|bisque|black|blanchedalmond|blue|blueviolet|brown|burlywood|cadetblue|chartreuse|chocolate|coral|cornflowerblue|cornsilk|crimson|cyan|darkblue|darkcyan|darkgoldenrod|darkgray|darkgreen|darkgrey|darkkhaki|darkmagenta|darkolivegreen|darkorange|darkorchid|darkred|darksalmon|darkseagreen|darkslateblue|darkslategray|darkslategrey|darkturquoise|darkviolet|deeppink|deepskyblue|dimgray|dimgrey|dodgerblue|firebrick|floralwhite|forestgreen|fuchsia|gainsboro|ghostwhite|gold|goldenrod|gray|green|greenyellow|grey|honeydew|hotpink|indianred|indigo|ivory|khaki|lavender|lavenderblush|lawngreen|lemonchiffon|lightblue|lightcoral|lightcyan|lightgoldenrodyellow|lightgray|lightgreen|lightgrey|lightpink|lightsalmon|lightseagreen|lightskyblue|lightslategray|lightslategrey|lightsteelblue|lightyellow|lime|limegreen|linen|magenta|maroon|mediumaquamarine|mediumblue|mediumorchid|mediumpurple|mediumseagreen|mediumslateblue|mediumspringgreen|mediumturquoise|mediumvioletred|midnightblue|mintcream|mistyrose|moccasin|navajowhite|navy|oldlace|olive|olivedrab|orange|orangered|orchid|palegoldenrod|palegreen|paleturquoise|palevioletred|papayawhip|peachpuff|peru|pink|plum|powderblue|purple|rebeccapurple|red|rosybrown|royalblue|saddlebrown|salmon|sandybrown|seagreen|seashell|sienna|silver|skyblue|slateblue|slategray|slategrey|snow|springgreen|steelblue|tan|teal|thistle|tomato|turquoise|violet|wheat|white|whitesmoke|yellow|yellowgreen)$/;
  const hsla = /^hsla?\((\s*\d+(\.\d+)?\s*,\s*\d+(\.\d+)?%\s*,\s*\d+(\.\d+)?%\s*(,\s*(1|0?\.\d+))?\s*)\)$/;
  const cmyk = /^cmyka?\((\s*\d+(\.\d+)?%\s*,\s*\d+(\.\d+)?%\s*,\s*\d+(\.\d+)?%\s*,\s*\d+(\.\d+)?%\s*(,\s*(1|0?\.\d+))?\s*)\)$/;
  const hsv = /^hsva?\((\s*\d+(\.\d+)?\s*,\s*\d+(\.\d+)?%\s*,\s*\d+(\.\d+)?%\s*(,\s*(1|0?\.\d+))?\s*)\)$/;
  if (value.match(hex) || value.match(rgba) || value.match(cssNamed) || value.match(hsla) || value.match(cmyk) || value.match(hsv)) {
    return true;
  }
  return false;
}
function isInteractable(target) {
  if (["A", "BUTTON", "INPUT", "TEXTAREA", "SELECT"].includes(target.tagName)) {
    return true;
  }
  if (target.contentEditable === "true") {
    return true;
  }
  return false;
}
function ensureArray(xs) {
  return Array.isArray(xs) ? xs : [xs];
}
const mkShortId = () => `${Math.random()}`;
function withoutFalsey(xs) {
  return xs.filter((x) => !!x);
}
class ErrorBoundary extends React.Component {
  constructor() {
    super(...arguments);
    this.state = { hasError: false, errorInfo: "" };
  }
  static getDerivedStateFromError(error) {
    return { hasError: true, errorInfo: error.message };
  }
  componentDidCatch(error, errorInfo) {
    console.log(error, errorInfo);
  }
  componentDidUpdate(prevProps, prevState) {
    if (prevProps.canvasEnvId !== this.props.canvasEnvId && prevState.hasError) {
      this.setState({ hasError: false });
    }
  }
  render() {
    if (this.state.hasError) {
      return /* @__PURE__ */ React.createElement(
        Result,
        {
          status: "error",
          title: "Something went wrong.",
          extra: this.state.errorInfo
        }
      );
    }
    return this.props.children;
  }
}

var __defProp$c = Object.defineProperty;
var __defProps$9 = Object.defineProperties;
var __getOwnPropDescs$9 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols$c = Object.getOwnPropertySymbols;
var __hasOwnProp$c = Object.prototype.hasOwnProperty;
var __propIsEnum$c = Object.prototype.propertyIsEnumerable;
var __defNormalProp$c = (obj, key, value) => key in obj ? __defProp$c(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues$c = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$c.call(b, prop))
      __defNormalProp$c(a, prop, b[prop]);
  if (__getOwnPropSymbols$c)
    for (var prop of __getOwnPropSymbols$c(b)) {
      if (__propIsEnum$c.call(b, prop))
        __defNormalProp$c(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps$9 = (a, b) => __defProps$9(a, __getOwnPropDescs$9(b));
var __objRest$3 = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp$c.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols$c)
    for (var prop of __getOwnPropSymbols$c(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum$c.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const DEFAULT_CURRENCY_SETTINGS = {
  dataType: "currency",
  currency: "USD",
  currencyDisplay: "narrowSymbol"
};
const NUMBER_TYPES = ["number", "percent", "currency"];
const DEFAULT_DATETIME_SETTINGS = {
  dataType: "datetime",
  locale: "en-US",
  dateStyle: "short",
  timeStyle: "short",
  hour12: true
};
const DEFAULT_RELATIVE_DATETIME_SETTINGS = {
  dataType: "relative-datetime",
  locale: "en-US",
  numeric: "always",
  style: "long",
  unit: "day"
};
const DATETIME_TYPES = ["datetime", "relative-datetime"];
const DEFAULT_BOOLEAN_SETTINGS = {
  dataType: "boolean",
  showAs: "checkbox"
};
function deriveValueType(cconfig) {
  return cconfig.dataType === "auto" ? void 0 : cconfig.dataType === "string" ? "text" : cconfig.dataType === "number" ? "digit" : cconfig.dataType === "boolean" ? "switch" : void 0;
}
const NoneField = "||NoneField||";
const CustomField = "";
function getFieldSubprops(opts) {
  return __spreadValues$c(__spreadValues$c({
    key: {
      type: "string",
      hidden: () => true
    },
    fieldId: {
      type: "choice",
      displayName: "Field name",
      readOnly: !opts.canChangeField,
      options: (_props, ctx) => {
        var _a, _b;
        return withoutFalsey([
          opts.canPickNoneField && { value: NoneField, label: "None" },
          ...((_b = (_a = ctx == null ? void 0 : ctx.schema) == null ? void 0 : _a.fields) != null ? _b : []).map((f) => {
            var _a2;
            return {
              value: f.id,
              label: (_a2 = f.label) != null ? _a2 : f.id
            };
          }),
          { value: CustomField, label: "Custom value" }
        ]);
      },
      hidden: (ps, ctx, { path: _controlPath }) => {
        if (opts.canChangeField) {
          return false;
        }
        return true;
      }
    },
    title: {
      type: "string",
      displayName: "Title",
      defaultValueHint: getDefaultValueHint("title"),
      hidden: () => !!opts.noTitle
    },
    expr: __spreadProps$9(__spreadValues$c({}, rowDataType("Custom value")), {
      hidden: (ps, ctx, { item, path: _controlPath }) => {
        return false;
      }
    }),
    isHidden: {
      type: "boolean",
      displayName: "Is hidden",
      defaultValueHint: getDefaultValueHint("isHidden")
    }
  }, !opts.noDataType ? {
    dataType: {
      type: "choice",
      displayName: "Data type",
      options: [
        {
          value: "auto",
          label: "Auto"
        },
        {
          value: "number",
          label: "Number"
        },
        {
          value: "percent",
          label: "Percentage"
        },
        {
          value: "currency",
          label: "Currency"
        },
        {
          value: "string",
          label: "String"
        },
        {
          value: "boolean",
          label: "Boolean"
        },
        {
          value: "datetime",
          label: "Date / Time"
        },
        {
          value: "relative-datetime",
          label: "Date / Time relative to now"
        }
      ],
      defaultValueHint: getDefaultValueHint("dataType")
    },
    currency: {
      displayName: "Currency",
      description: "Must be a valid currency code",
      type: "string",
      defaultValueHint: "USD",
      hidden: (ps, ctx, { item }) => item.dataType !== "currency"
    },
    locale: {
      displayName: "Locale",
      description: "Must be a valid locale code",
      type: "string",
      defaultValueHint: "en-US",
      hidden: (ps, ctx, { item }) => !isOneOf(item.dataType, NUMBER_TYPES) && !isOneOf(item.dataType, DATETIME_TYPES)
    },
    notation: {
      displayName: "Notation",
      type: "choice",
      options: [
        {
          value: "standard",
          label: "Standard"
        },
        {
          value: "scientific",
          label: "Scientific notation (like 1E3)"
        },
        {
          value: "compact",
          label: "Compact (like 10K)"
        }
      ],
      defaultValueHint: "standard",
      hidden: (ps, ctx, { item }) => !isOneOf(item.dataType, NUMBER_TYPES)
    },
    signDisplay: {
      type: "choice",
      displayName: "Number sign",
      options: [
        {
          value: "auto",
          label: "Only for negative numbers (10, -10)"
        },
        {
          value: "exceptZero",
          label: "Positive or negative (+10, -10)"
        }
      ],
      defaultValueHint: "auto",
      hidden: (ps, ctx, { item }) => !isOneOf(item.dataType, NUMBER_TYPES)
    },
    maximumFractionDigits: {
      type: "number",
      displayName: "Max decimal places",
      defaultValueHint: 3,
      min: 0,
      max: 20,
      hidden: (ps, ctx, { item }) => !isOneOf(item.dataType, NUMBER_TYPES)
    },
    minimumFractionDigits: {
      type: "number",
      displayName: "Min decimal places",
      defaultValueHint: 0,
      min: 0,
      max: 20,
      hidden: (ps, ctx, { item }) => !isOneOf(item.dataType, NUMBER_TYPES)
    },
    showAs: {
      type: "choice",
      options: [
        {
          value: "checkbox",
          label: "Checkboxes"
        },
        {
          value: "switch",
          label: "Toggle switches"
        },
        {
          value: "text",
          label: "Text"
        }
      ],
      displayName: "Show as",
      defaultValueHint: "checkbox",
      hidden: (ps, ctx, { item }) => item.dataType !== "boolean"
    },
    dateStyle: {
      displayName: "Date style",
      type: "choice",
      options: [
        {
          value: "none",
          label: "None (don't display date)"
        },
        {
          value: "short",
          label: "Short (like 12/25/2023)"
        },
        {
          value: "medium",
          label: "Medium (like Dec 25, 2023)"
        },
        {
          value: "long",
          label: "Long (like December 25, 2023)"
        },
        {
          value: "full",
          label: "Full (like Monday, December 25, 2023)"
        }
      ],
      defaultValueHint: DEFAULT_DATETIME_SETTINGS.dateStyle,
      hidden: (ps, ctx, { item }) => item.dataType !== "datetime"
    },
    timeStyle: {
      displayName: "Time style",
      type: "choice",
      options: [
        {
          value: "none",
          label: "None (don't display time)"
        },
        {
          value: "short",
          label: "Short (like 4:00 PM)"
        },
        {
          value: "medium",
          label: "Medium (like 4:00:00 PM)"
        },
        {
          value: "long",
          label: "Long (like 4:00:00 PM PST)"
        },
        {
          value: "full",
          label: "Full (like 4:00:00 PM Pacific Standard Time)"
        }
      ],
      defaultValueHint: DEFAULT_DATETIME_SETTINGS.timeStyle,
      hidden: (ps, ctx, { item }) => item.dataType !== "datetime"
    },
    hour12: {
      displayName: "Use AM/PM?",
      description: "Whether to use AM/PM or 24-hour clock",
      type: "boolean",
      defaultValueHint: DEFAULT_DATETIME_SETTINGS.hour12,
      hidden: (ps, ctx, { item }) => item.dataType !== "datetime"
    },
    numeric: {
      type: "choice",
      displayName: "Use numbers?",
      options: [
        { value: "always", label: "Always use numbers" },
        {
          value: "auto",
          label: "Use words like 'Yesterday' or 'Tomorrow'"
        }
      ],
      defaultValueHint: DEFAULT_RELATIVE_DATETIME_SETTINGS.numeric,
      hidden: (ps, ctx, { item }) => item.dataType !== "relative-datetime"
    },
    unit: {
      type: "choice",
      displayName: "Time unit",
      options: [
        {
          value: "second",
          label: "Seconds"
        },
        {
          value: "minute",
          label: "Minutes"
        },
        {
          value: "hour",
          label: "Hours"
        },
        {
          value: "day",
          label: "Days"
        },
        {
          value: "week",
          label: "Weeks"
        },
        {
          value: "month",
          label: "Months"
        },
        {
          value: "year",
          label: "Years"
        }
      ],
      defaultValueHint: DEFAULT_RELATIVE_DATETIME_SETTINGS.unit,
      hidden: (ps, ctx, { item }) => item.dataType !== "relative-datetime"
    }
  } : {}), opts.fieldTypes);
}
function getDefaultValueHint(field) {
  return (_props, contextData, { item }) => {
    if (item == null ? void 0 : item.fieldId) {
      const fieldSetting = contextData == null ? void 0 : contextData.mergedFields.find(
        (f) => f.fieldId === item.fieldId
      );
      return fieldSetting == null ? void 0 : fieldSetting[field];
    }
    return void 0;
  };
}
const rowDataType = (displayName, control) => ({
  type: "function",
  displayName,
  control,
  argNames: ["currentItem", "currentValue"],
  argValues: (_props, ctx, { item }) => {
    var _a;
    const row = (_a = ctx == null ? void 0 : ctx.data) == null ? void 0 : _a[0];
    const cell = item.fieldId ? row == null ? void 0 : row[item.fieldId] : void 0;
    return [row, cell];
  }
});
function buildFieldsPropType(_a) {
  var _b = _a, {
    advanced,
    displayName,
    minimalValue = (_props, contextData) => contextData == null ? void 0 : contextData.minimalFullLengthFields
  } = _b, opts = __objRest$3(_b, [
    "advanced",
    "displayName",
    "minimalValue"
  ]);
  return {
    type: "array",
    advanced,
    displayName,
    hidden: (ps) => !ps.data,
    unstable__keyFunc: (x) => x.key,
    unstable__minimalValue: minimalValue,
    unstable__canDelete: (ps, _props, ctx, { item }) => {
      if (opts.canChangeField) {
        return true;
      }
      if (!(ctx == null ? void 0 : ctx.schema)) {
        return false;
      }
      if (item.fieldId && ctx.schema.fields.some((f) => f.id === item.fieldId)) {
        return false;
      }
      return true;
    },
    itemType: {
      type: "object",
      nameFunc: (_item) => {
        return _item.fieldId || _item.title || "Custom value";
      },
      fields: getFieldSubprops(opts)
    }
  };
}

var __defProp$b = Object.defineProperty;
var __defProps$8 = Object.defineProperties;
var __getOwnPropDescs$8 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols$b = Object.getOwnPropertySymbols;
var __hasOwnProp$b = Object.prototype.hasOwnProperty;
var __propIsEnum$b = Object.prototype.propertyIsEnumerable;
var __defNormalProp$b = (obj, key, value) => key in obj ? __defProp$b(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues$b = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$b.call(b, prop))
      __defNormalProp$b(a, prop, b[prop]);
  if (__getOwnPropSymbols$b)
    for (var prop of __getOwnPropSymbols$b(b)) {
      if (__propIsEnum$b.call(b, prop))
        __defNormalProp$b(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps$8 = (a, b) => __defProps$8(a, __getOwnPropDescs$8(b));
function multiRenderValue(record, cconfigs) {
  return cconfigs == null ? void 0 : cconfigs.flatMap(
    (cc) => cc.isHidden ? [] : [` \u2022 `, /* @__PURE__ */ React.createElement(React.Fragment, null, renderValue(record, cc))]
  ).slice(1);
}
function maybeRenderString(record, cconfig) {
  return cconfig && !cconfig.isHidden ? maybe(getFieldValue(record, cconfig), asString) : void 0;
}
function getFieldValue(record, cconfig) {
  let value = cconfig.fieldId ? record[cconfig.fieldId] : void 0;
  if (cconfig.expr) {
    value = cconfig.expr(record, value);
  }
  return value;
}
function getFieldAggregateValue(record, cconfigs, separator = ", ") {
  if (!(cconfigs == null ? void 0 : cconfigs.length))
    return void 0;
  return (cconfigs == null ? void 0 : cconfigs.length) ? cconfigs.map((item) => getFieldValue(record, item)).join(separator) : void 0;
}
function renderValue(record, cconfig) {
  const value = getFieldValue(record, cconfig);
  if (value == null) {
    return "";
  }
  if (cconfig.dataType === "auto") {
    return renderAuto(value);
  } else {
    const coerced = coerceValue(value, cconfig.dataType);
    if (isOneOf(cconfig.dataType, NUMBER_TYPES) && typeof coerced === "number") {
      return renderNumber(coerced, cconfig);
    } else if (cconfig.dataType === "boolean" && typeof coerced === "boolean") {
      return renderBoolean(coerced, cconfig);
    } else if (cconfig.dataType === "datetime" && coerced instanceof Date) {
      return renderDate(coerced, cconfig);
    } else if (cconfig.dataType === "relative-datetime" && coerced instanceof Date) {
      return renderRelativeDate(coerced, cconfig);
    }
    return asString(value);
  }
}
function renderAuto(value) {
  if (typeof value === "number") {
    return renderNumber(value, { dataType: "number" });
  } else if (typeof value === "boolean") {
    return renderBoolean(value, DEFAULT_BOOLEAN_SETTINGS);
  } else if (value instanceof Date) {
    return renderDate(value, DEFAULT_DATETIME_SETTINGS);
  } else {
    const coerced = tryCoerceAuto(value);
    if (coerced === CANNOT_COERCE) {
      return asString(value);
    } else {
      return renderAuto(coerced);
    }
  }
}
function tryCoerceAuto(value) {
  for (const dataType of [
    "number",
    "datetime"
  ]) {
    const coerced = coerceValue(value, dataType);
    if (coerced !== CANNOT_COERCE) {
      return coerced;
    }
  }
  return CANNOT_COERCE;
}
function renderNumber(value, cconfig) {
  if (cconfig.dataType === "number") {
    return new Intl.NumberFormat(cconfig.locale, cconfig).format(value);
  } else if (cconfig.dataType === "percent") {
    return new Intl.NumberFormat(cconfig.locale, __spreadProps$8(__spreadValues$b({}, cconfig), {
      style: "percent"
    })).format(value);
  } else if (cconfig.dataType === "currency") {
    return new Intl.NumberFormat(cconfig.locale, __spreadProps$8(__spreadValues$b(__spreadValues$b({}, DEFAULT_CURRENCY_SETTINGS), cconfig), {
      style: "currency"
    })).format(value);
  } else {
    throw new Error(`Unexpected dataType ${cconfig.dataType}`);
  }
}
function renderDate(value, cconfig) {
  const opts = __spreadValues$b(__spreadValues$b({}, DEFAULT_DATETIME_SETTINGS), cconfig);
  if (opts.dateStyle === "none") {
    delete opts["dateStyle"];
  }
  if (opts.timeStyle === "none") {
    delete opts["timeStyle"];
  }
  return new Intl.DateTimeFormat(cconfig.locale, opts).format(value);
}
const SECOND_MS = 1e3;
const MINUTE_MS = 60 * SECOND_MS;
const HOUR_MS = 60 * MINUTE_MS;
const DAY_MS = 24 * HOUR_MS;
const WEEK_MS = 7 * DAY_MS;
const UNIT_TO_MS = {
  second: SECOND_MS,
  minute: MINUTE_MS,
  hour: HOUR_MS,
  day: DAY_MS,
  week: WEEK_MS
};
const UNITS_BY_MS = Object.keys(UNIT_TO_MS);
function renderRelativeDate(value, cconfig) {
  var _a;
  const opts = __spreadValues$b(__spreadValues$b({}, DEFAULT_RELATIVE_DATETIME_SETTINGS), cconfig);
  const unit = (_a = cconfig.unit) != null ? _a : "day";
  const formatter = new Intl.RelativeTimeFormat(cconfig.locale, opts);
  if (isOneOf(unit, UNITS_BY_MS)) {
    const diff = value.getTime() - (/* @__PURE__ */ new Date()).getTime();
    return formatter.format(Math.round(diff / UNIT_TO_MS[unit]), unit);
  } else {
    if (unit === "year") {
      const diff = value.getFullYear() - (/* @__PURE__ */ new Date()).getFullYear();
      return formatter.format(diff, unit);
    } else if (unit === "month") {
      const months = (d) => d.getFullYear() * 12 + d.getMonth() + 1;
      const diff = months(value) - months(/* @__PURE__ */ new Date());
      return formatter.format(diff, unit);
    } else {
      throw new Error(`Unexpected relative time unit ${unit}`);
    }
  }
}
function renderBoolean(value, cconfig) {
  var _a;
  const showAs = (_a = cconfig.showAs) != null ? _a : DEFAULT_BOOLEAN_SETTINGS.showAs;
  if (showAs === "checkbox") {
    return /* @__PURE__ */ React.createElement(Checkbox, { checked: value });
  } else if (showAs === "switch") {
    return /* @__PURE__ */ React.createElement(Switch, { checked: value });
  } else {
    return value ? "true" : "false";
  }
}
const CANNOT_COERCE = Symbol("plasmic-cannot-coerce");
function coerceValue(value, dataType) {
  if (value == null) {
    return null;
  }
  try {
    if (isOneOf(dataType, NUMBER_TYPES)) {
      if (typeof value === "number") {
        return value;
      } else if (typeof value === "string") {
        const maybeNumber = +value;
        if (!isNaN(maybeNumber)) {
          return maybeNumber;
        }
      }
    } else if (isOneOf(dataType, DATETIME_TYPES)) {
      if (value instanceof Date) {
        return value;
      } else if (typeof value === "number") {
        return new Date(value);
      } else if (typeof value === "string") {
        const parsed = parseDate(value);
        return parsed ? parsed : CANNOT_COERCE;
      }
    } else if (dataType === "boolean") {
      if (value === true || value === false) {
        return value;
      } else if (typeof value === "number") {
        return value !== 0;
      } else if (typeof value === "string") {
        return value.toLowerCase() === "true";
      }
    } else if (dataType === "string") {
      return asString(value);
    } else if (dataType === "auto") {
      return value;
    }
  } catch (err) {
  }
  return CANNOT_COERCE;
}
function asString(value) {
  if (value == null) {
    return "";
  } else if (typeof value === "string") {
    return value;
  } else if (typeof value === "object") {
    if ("toString" in value && typeof value.toString === "function") {
      return value.toString();
    } else {
      return JSON.stringify(value);
    }
  } else {
    return `${value}`;
  }
}

var __defProp$a = Object.defineProperty;
var __defProps$7 = Object.defineProperties;
var __getOwnPropDescs$7 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols$a = Object.getOwnPropertySymbols;
var __hasOwnProp$a = Object.prototype.hasOwnProperty;
var __propIsEnum$a = Object.prototype.propertyIsEnumerable;
var __defNormalProp$a = (obj, key, value) => key in obj ? __defProp$a(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues$a = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$a.call(b, prop))
      __defNormalProp$a(a, prop, b[prop]);
  if (__getOwnPropSymbols$a)
    for (var prop of __getOwnPropSymbols$a(b)) {
      if (__propIsEnum$a.call(b, prop))
        __defNormalProp$a(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps$7 = (a, b) => __defProps$7(a, __getOwnPropDescs$7(b));
function RichDetails(props) {
  var _a;
  const {
    className,
    data: rawData,
    size,
    bordered,
    layout,
    column = 2
  } = props;
  const data = useNormalizedData(rawData);
  const { columnDefinitions } = useColumnDefinitions$1(data, props);
  if (!data || !((_a = data.data) == null ? void 0 : _a[0])) {
    return /* @__PURE__ */ React.createElement(Empty, { className, image: Empty.PRESENTED_IMAGE_SIMPLE });
  }
  const row = data.data[0];
  return /* @__PURE__ */ React.createElement(
    Descriptions,
    {
      className,
      size,
      bordered,
      layout,
      column: {
        xs: 1,
        sm: 1,
        md: column
      }
    },
    columnDefinitions.map((col) => /* @__PURE__ */ React.createElement(Descriptions.Item, { label: col.title, key: col.key, span: col.span }, col.render(row)))
  );
}
function useColumnDefinitions$1(data, props) {
  const { fields, setControlContextData } = props;
  return React.useMemo(() => {
    const schema = data == null ? void 0 : data.schema;
    if (!data || !schema) {
      return { normalized: [], columnDefinitions: [] };
    }
    const { mergedFields, minimalFullLengthFields } = deriveFieldConfigs(
      fields != null ? fields : [],
      schema,
      (field) => __spreadValues$a({
        key: mkShortId(),
        isHidden: false,
        dataType: "auto"
      }, field && {
        key: field.id,
        fieldId: field.id,
        title: field.label || field.id,
        expr: (currentItem) => currentItem[field.id]
      })
    );
    setControlContextData == null ? void 0 : setControlContextData(__spreadProps$7(__spreadValues$a({}, data), { mergedFields, minimalFullLengthFields }));
    const normalized = mergedFields;
    const columnDefinitions = normalized.filter((cconfig) => !cconfig.isHidden).map((cconfig, _columnIndex, _columnsArray) => {
      const columnDefinition = {
        dataIndex: cconfig.fieldId,
        title: cconfig.title,
        key: cconfig.key,
        span: cconfig.span,
        render: (record) => {
          return renderValue(record, cconfig);
        }
      };
      return columnDefinition;
    });
    return { normalized, columnDefinitions };
  }, [fields, data, setControlContextData]);
}

function registerRichDetails(loader) {
  registerComponentHelper(loader, RichDetails, {
    name: "hostless-rich-details",
    displayName: "Data details",
    defaultStyles: {
      width: "stretch",
      maxHeight: "100%"
    },
    props: {
      data: {
        type: "dataSourceOpData",
        description: "The data to display"
      },
      fields: buildFieldsPropType({
        fieldTypes: {
          span: {
            type: "number",
            displayName: "Number of columns to span",
            defaultValueHint: 1
          }
        }
      }),
      layout: {
        displayName: "Layout",
        type: "choice",
        options: [
          { value: "horizontal", label: "Horizontal" },
          { value: "vertical", label: "Vertical" }
        ],
        defaultValueHint: "horizontal"
      },
      column: {
        displayName: "Items per row",
        type: "number",
        description: "Number of items to display per row",
        defaultValueHint: 2
      },
      size: {
        displayName: "Spacing",
        type: "choice",
        options: [
          { value: "small", label: "Small" },
          { value: "middle", label: "Medium" },
          { value: "default", label: "Large" }
        ],
        defaultValueHint: "default"
      },
      bordered: {
        displayName: "Show borders?",
        type: "boolean",
        defaultValue: true
      }
    },
    importPath: "@plasmicpkgs/plasmic-rich-components/skinny/rich-details",
    importName: "RichDetails"
  });
}

function useIsClient() {
  const [loaded, setLoaded] = React.useState(false);
  useIsomorphicLayoutEffect(() => {
    setLoaded(true);
  });
  return loaded;
}
const isBrowser = typeof window !== "undefined";
const useIsomorphicLayoutEffect = isBrowser ? React.useLayoutEffect : React.useEffect;
function capitalize(text) {
  return text.slice(0, 1).toUpperCase() + text.slice(1);
}
function isLight(color) {
  const { r, g, b } = tinycolor(color).toRgb();
  return r * 0.299 + g * 0.587 + b * 0.114 > 186;
}

var __defProp$9 = Object.defineProperty;
var __defProps$6 = Object.defineProperties;
var __getOwnPropDescs$6 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols$9 = Object.getOwnPropertySymbols;
var __hasOwnProp$9 = Object.prototype.hasOwnProperty;
var __propIsEnum$9 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$9 = (obj, key, value) => key in obj ? __defProp$9(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues$9 = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$9.call(b, prop))
      __defNormalProp$9(a, prop, b[prop]);
  if (__getOwnPropSymbols$9)
    for (var prop of __getOwnPropSymbols$9(b)) {
      if (__propIsEnum$9.call(b, prop))
        __defNormalProp$9(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps$6 = (a, b) => __defProps$6(a, __getOwnPropDescs$6(b));
const AnchorLink = React.forwardRef(function AnchorLink2(props, ref) {
  return /* @__PURE__ */ React.createElement("a", __spreadProps$6(__spreadValues$9({}, props), { ref }));
});

var __defProp$8 = Object.defineProperty;
var __defProps$5 = Object.defineProperties;
var __getOwnPropDescs$5 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols$8 = Object.getOwnPropertySymbols;
var __hasOwnProp$8 = Object.prototype.hasOwnProperty;
var __propIsEnum$8 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$8 = (obj, key, value) => key in obj ? __defProp$8(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues$8 = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$8.call(b, prop))
      __defNormalProp$8(a, prop, b[prop]);
  if (__getOwnPropSymbols$8)
    for (var prop of __getOwnPropSymbols$8(b)) {
      if (__propIsEnum$8.call(b, prop))
        __defNormalProp$8(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps$5 = (a, b) => __defProps$5(a, __getOwnPropDescs$5(b));
var __objRest$2 = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp$8.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols$8)
    for (var prop of __getOwnPropSymbols$8(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum$8.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
function omitUndefined(x) {
  return Object.fromEntries(
    Object.entries(x).filter(([k, v]) => v !== void 0)
  );
}
function processNavItems(navMenuItems) {
  return navMenuItems.filter((item) => item.condition === void 0 || item.condition).map((item) => __spreadProps$5(__spreadValues$8({}, item), {
    // We fill a default path because otherwise the item doesn't appear at all.
    path: item.path || "/",
    routes: item.routes ? processNavItems(item.routes) : void 0
  }));
}
const baseStyles = `
.ant-pro-layout-bg-list {
  display: none;
}
.ant-pro-layout {
  display: flex;
  width: 100%;
}
.ant-pro-layout .ant-pro-layout-content {
  padding: 0;
}
`;
function RichLayout(_a) {
  var _b = _a, {
    children,
    navMenuItems,
    rootUrl = "/",
    actionsChildren,
    footerChildren,
    avatarLabel,
    avatarImage,
    showAvatarMenu,
    className,
    simpleNavTheme,
    logo,
    logoElement
  } = _b, layoutProps = __objRest$2(_b, [
    "children",
    "navMenuItems",
    "rootUrl",
    "actionsChildren",
    "footerChildren",
    "avatarLabel",
    "avatarImage",
    "showAvatarMenu",
    "className",
    "simpleNavTheme",
    "logo",
    "logoElement"
  ]);
  var _a2, _b2, _c, _d, _e;
  const $ctx = useDataEnv();
  const ref = useRef(null);
  const isClient = useIsClient();
  const [pathname, setPathname] = useState(void 0);
  const [openKeys, setOpenKeys] = useState([]);
  const [ready, setReady] = useState(false);
  useEffect(() => {
    setTimeout(() => {
      setReady(true);
    }, 500);
    if (typeof location !== "undefined") {
      setPathname(location.pathname);
    }
  }, []);
  useEffect(() => {
    if (!ready)
      return;
    if (!ref.current)
      return;
    const selectedSubmenus = Array.from(
      ref.current.querySelectorAll(
        "ul > li.ant-menu-submenu.ant-menu-submenu-selected > div"
      )
    ).map((el) => {
      var _a3;
      return (_a3 = el.getAttribute("data-menu-id")) == null ? void 0 : _a3.split("/").pop();
    }).filter((i) => i).map((i) => `/${i}`) || [];
    setOpenKeys(selectedSubmenus);
  }, [ready]);
  const PlasmicLink = (_b2 = (_a2 = usePlasmicLink) == null ? void 0 : _a2()) != null ? _b2 : AnchorLink;
  const { token } = theme.useToken();
  const origTextColor = token.colorTextBase;
  function getNavBgColor() {
    var _a3, _b3;
    const scheme = (_a3 = simpleNavTheme == null ? void 0 : simpleNavTheme.scheme) != null ? _a3 : "default";
    switch (scheme) {
      case "primary":
        return token.colorPrimary;
      case "dark":
        return "#011528";
      case "custom":
        return (_b3 = simpleNavTheme == null ? void 0 : simpleNavTheme.customBgColor) != null ? _b3 : token.colorBgBase;
      case "light":
        return "#fff";
      case "default":
        return token.colorBgBase || "#fff";
    }
  }
  const navBgColor = getNavBgColor();
  const isNavBgLight = isLight(navBgColor);
  const isOrigTextLight = isLight(origTextColor);
  const navTextColor = isNavBgLight !== isOrigTextLight ? void 0 : "";
  if (!isClient) {
    return null;
  }
  const layoutColorOverrides = isNavBgLight ? void 0 : {
    colorBgCollapsedButton: navBgColor,
    colorTextCollapsedButtonHover: "rgba(255,255,255,0.85)",
    colorTextCollapsedButton: "rgba(255,255,255,0.65)",
    colorMenuBackground: navBgColor,
    colorBgMenuItemCollapsedHover: "rgba(0,0,0,0.06)",
    colorBgMenuItemCollapsedSelected: "rgba(0,0,0,0.15)",
    colorBgMenuItemCollapsedElevated: "rgba(0,0,0,0.85)",
    colorMenuItemDivider: "rgba(255,255,255,0.15)",
    colorBgMenuItemHover: "rgba(0,0,0,0.06)",
    colorBgMenuItemSelected: "rgba(0,0,0,0.15)",
    colorTextMenuSelected: "#fff",
    colorTextMenuItemHover: "rgba(255,255,255,0.75)",
    colorTextMenu: "rgba(255,255,255,0.75)",
    colorTextMenuSecondary: "rgba(255,255,255,0.65)",
    colorTextMenuTitle: "rgba(255,255,255,0.95)",
    colorTextMenuActive: "rgba(255,255,255,0.95)",
    colorTextSubMenuSelected: "#fff"
  };
  return /* @__PURE__ */ React.createElement("div", { ref, className, style: { display: "flex" } }, /* @__PURE__ */ React.createElement("style", null, baseStyles), /* @__PURE__ */ React.createElement(
    ProLayout,
    __spreadProps$5(__spreadValues$8({}, layoutProps), {
      pageTitleRender: () => "",
      logo: logo != null ? logo : logoElement,
      headerRender: (_props, defaultDom) => /* @__PURE__ */ React.createElement(
        ConfigProvider,
        {
          theme: { token: omitUndefined({ colorTextBase: navTextColor }) }
        },
        /* @__PURE__ */ React.createElement(ProConfigProvider, { dark: !isNavBgLight }, defaultDom)
      ),
      token: {
        header: omitUndefined(__spreadValues$8({
          colorBgHeader: navBgColor
        }, layoutColorOverrides)),
        // Ideally, we'd do something similar to headerRender above, and just specify general dark mode to specify
        // whether all components/text should be light.
        // But for some reason it doesn't work, causing the bg color to be ignored (just the default dark Menu color),
        // *and* the text is just dark as well.
        // Haven't yet been able to unravel the pro components code to figure out the proper way to do this, so just
        // bluntly specifying tokens here, as recommended in some GitHub issue.
        sider: omitUndefined(__spreadValues$8({
          colorMenuBackground: navBgColor
        }, layoutColorOverrides))
      },
      layout: (_c = layoutProps.layout) != null ? _c : "top",
      fixedHeader: (_d = layoutProps.fixedHeader) != null ? _d : false,
      fixSiderbar: (
        // Doesn't stretch full height if you set this to false and you're in mix mode.
        layoutProps.layout === "mix" ? void 0 : (_e = layoutProps.fixSiderbar) != null ? _e : false
      ),
      splitMenus: layoutProps.layout === "mix",
      route: {
        path: rootUrl,
        routes: navMenuItems ? processNavItems(navMenuItems) : void 0
      },
      location: {
        pathname
      },
      menu: {
        // collapsedShowGroupTitle: true,
        defaultOpenAll: false
        // hideMenuWhenCollapsed: true,
      },
      avatarProps: showAvatarMenu ? {
        src: avatarImage,
        size: "small",
        title: avatarLabel,
        render: (_props, dom) => {
          return /* @__PURE__ */ React.createElement(
            Dropdown,
            {
              menu: {
                items: [
                  {
                    key: "logout",
                    icon: /* @__PURE__ */ React.createElement(LogoutOutlined, null),
                    label: "Sign out"
                  }
                ]
              }
            },
            dom
          );
        }
      } : void 0,
      actionsRender: (_props) => {
        return [actionsChildren];
      },
      menuFooterRender: (props) => {
        if (props == null ? void 0 : props.collapsed)
          return void 0;
        return footerChildren;
      },
      onMenuHeaderClick: (e) => console.log(e),
      openKeys,
      onOpenChange: (keys) => keys === false || !ready ? [] : setOpenKeys(keys),
      selectedKeys: [$ctx == null ? void 0 : $ctx.pagePath],
      menuItemRender: (item, dom) => /* @__PURE__ */ React.createElement(PlasmicLink, { href: item.path }, dom),
      headerTitleRender: (logoEl, title, _) => {
        return /* @__PURE__ */ React.createElement(PlasmicLink, { href: rootUrl }, logoEl, title);
      }
    }),
    children
  ));
}

var __defProp$7 = Object.defineProperty;
var __getOwnPropSymbols$7 = Object.getOwnPropertySymbols;
var __hasOwnProp$7 = Object.prototype.hasOwnProperty;
var __propIsEnum$7 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$7 = (obj, key, value) => key in obj ? __defProp$7(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues$7 = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$7.call(b, prop))
      __defNormalProp$7(a, prop, b[prop]);
  if (__getOwnPropSymbols$7)
    for (var prop of __getOwnPropSymbols$7(b)) {
      if (__propIsEnum$7.call(b, prop))
        __defNormalProp$7(a, prop, b[prop]);
    }
  return a;
};
function generateNavMenuType(isNested, remainingDepth, displayName, defaultValue) {
  return {
    displayName: displayName ? displayName : "Nested items",
    type: "array",
    defaultValue,
    advanced: isNested,
    itemType: {
      type: "object",
      nameFunc: (item) => item.name || (!displayName ? "Unnamed nested item" : "Unnamed item"),
      fields: __spreadValues$7({
        path: "href",
        name: "string",
        condition: {
          advanced: true,
          displayName: "Show only if",
          type: "exprEditor"
        }
      }, remainingDepth === 0 ? {} : {
        routes: generateNavMenuType(true, remainingDepth - 1)
      })
    }
  };
}
const richLayoutMeta = {
  name: "hostless-rich-layout",
  displayName: "Rich App Layout",
  props: {
    children: {
      type: "slot",
      unstable__isMainContentSlot: true
    },
    actionsChildren: {
      type: "slot",
      hidePlaceholder: true
    },
    title: {
      displayName: "Title",
      type: "string",
      defaultValue: "App title"
    },
    logo: {
      displayName: "Logo",
      type: "imageUrl",
      hidden: (ps) => !ps.logo
    },
    logoElement: {
      type: "slot",
      displayName: "Logo",
      defaultValue: {
        type: "img",
        src: "https://static1.plasmic.app/fake-logo.svg"
      },
      hidden: (ps) => !!ps.logo
    },
    navMenuItems: generateNavMenuType(false, 2, "Nav menu items", [
      {
        path: "/",
        name: "Home"
      }
    ]),
    layout: {
      displayName: "Layout",
      type: "choice",
      options: ["side", "top", "mix"].map((value) => ({
        value,
        label: capitalize(value)
      })),
      defaultValueHint: "top"
    },
    simpleNavTheme: {
      displayName: "Theme",
      type: "object",
      fields: {
        scheme: {
          type: "choice",
          options: ["default", "primary", "light", "dark", "custom"].map(
            (v) => ({
              label: capitalize(v),
              value: v
            })
          ),
          defaultValueHint: "default"
        },
        customBgColor: {
          type: "color",
          displayName: "Custom color",
          hidden: (props) => {
            var _a;
            return !(((_a = props.simpleNavTheme) == null ? void 0 : _a.scheme) === "custom");
          },
          defaultValue: "#D73B58"
        }
      }
    },
    // Advanced, show later
    /*
    siderMenuType: {
      displayName: "Sidebar mode",
      type: "choice",
      options: ["sub", "group"].map((value) => ({
        value,
        label: capitalize(value),
      })),
      defaultValue: "sub",
    },
    contentWidth: {
      displayName: "Content width",
      type: "choice",
      options: ["Fluid", "Fixed"],
      defaultValueHint: "Fluid",
    },
    */
    fixedHeader: {
      displayName: "Sticky header",
      type: "boolean",
      hidden: (ps) => {
        var _a;
        return ((_a = ps.layout) != null ? _a : "top") !== "top";
      },
      defaultValueHint: false
    },
    fixSiderbar: {
      displayName: "Sticky sidebar",
      type: "boolean",
      hidden: (ps) => {
        var _a;
        return ((_a = ps.layout) != null ? _a : "top") !== "side";
      },
      defaultValueHint: false
    },
    /*
    showAvatarMenu: {
      displayName: "Show avatar",
      type: "boolean",
      defaultValue: true,
    },
    avatarLabel: {
      displayName: "Avatar label",
      type: "string",
      defaultValue: "User Name",
    },
    avatarImage: {
      displayName: "Avatar image",
      type: "imageUrl",
      defaultValue:
        "https://gw.alipayobjects.com/zos/antfincdn/efFD%24IOql2/weixintupian_20170331104822.jpg",
    },
     */
    menu: {
      displayName: "Menu",
      type: "object",
      fields: {
        defaultOpenAll: {
          displayName: "Default open all",
          type: "boolean"
        },
        hideMenuWhenCollapsed: {
          // displayName: "",
          type: "boolean"
        }
      }
    }
  },
  defaultStyles: {
    width: "full-bleed",
    height: "stretch",
    minHeight: "100vh"
  },
  importName: "RichLayout",
  importPath: "@plasmicpkgs/plasmic-rich-components/skinny/rich-layout"
};
function registerRichLayout(loader) {
  registerComponentHelper(loader, RichLayout, richLayoutMeta);
}

function roleProp({
  role,
  singular = false,
  advanced = false,
  displayName
}) {
  return singular ? {
    type: "object",
    displayName: displayName || `${capitalize(role)} field`,
    advanced,
    hidden: (ps) => !ps.data,
    nameFunc: (item) => maybe(
      item,
      (i) => i.isHidden ? "Hidden" : i.fieldId || "Custom value"
    ),
    fields: getFieldSubprops({
      canChangeField: true,
      noTitle: true
    }),
    defaultValueHint: (_props, contextData) => {
      var _a;
      return ((_a = contextData == null ? void 0 : contextData.minimalFullLengthFields) != null ? _a : []).find(
        (f) => f.role === role
      );
    }
  } : buildFieldsPropType({
    displayName: displayName || `${capitalize(role)} fields`,
    advanced,
    noTitle: true,
    canChangeField: true,
    minimalValue: (_props, contextData) => {
      var _a;
      return ((_a = contextData == null ? void 0 : contextData.minimalFullLengthFields) != null ? _a : []).filter(
        (f) => f.role === role
      );
    }
  });
}
function dataProp() {
  return {
    type: "dataSourceOpData",
    description: "The data to display"
  };
}
function commonProps() {
  return {
    pagination: {
      type: "boolean",
      advanced: true,
      defaultValueHint: true
    },
    pageSize: {
      type: "number",
      defaultValueHint: 10,
      advanced: true
    },
    hideSearch: {
      type: "boolean",
      description: "Hides the search toolbar",
      advanced: true
    }
  };
}
function rowActionsProp() {
  return {
    type: "array",
    displayName: "Row actions",
    advanced: true,
    itemType: {
      type: "object",
      nameFunc: (item) => item.label,
      fields: {
        type: {
          type: "choice",
          options: ["item", "menu"],
          defaultValue: "item"
        },
        label: {
          type: "string",
          displayName: "Action label"
        },
        children: {
          type: "array",
          displayName: "Menu items",
          itemType: {
            type: "object",
            fields: {
              label: {
                type: "string",
                displayName: "Action label"
              },
              onClick: {
                type: "eventHandler",
                argTypes: [
                  { name: "rowKey", type: "string" },
                  { name: "row", type: "object" }
                ]
              }
            }
          },
          hidden: (_ps, _ctx, { item }) => item.type !== "menu"
        },
        onClick: {
          type: "eventHandler",
          displayName: "Action",
          argTypes: [
            { name: "rowKey", type: "string" },
            { name: "row", type: "object" }
          ],
          hidden: (_ps, _ctx, { item }) => item.type !== "item"
        }
      }
    }
  };
}
function onRowClickProp() {
  return {
    type: "eventHandler",
    displayName: "On row clicked",
    argTypes: [
      { name: "rowKey", type: "string" },
      { name: "row", type: "object" },
      { name: "event", type: "object" }
    ]
  };
}

var __defProp$6 = Object.defineProperty;
var __defProps$4 = Object.defineProperties;
var __getOwnPropDescs$4 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols$6 = Object.getOwnPropertySymbols;
var __hasOwnProp$6 = Object.prototype.hasOwnProperty;
var __propIsEnum$6 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$6 = (obj, key, value) => key in obj ? __defProp$6(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues$6 = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$6.call(b, prop))
      __defNormalProp$6(a, prop, b[prop]);
  if (__getOwnPropSymbols$6)
    for (var prop of __getOwnPropSymbols$6(b)) {
      if (__propIsEnum$6.call(b, prop))
        __defNormalProp$6(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps$4 = (a, b) => __defProps$4(a, __getOwnPropDescs$4(b));
function useSortedFilteredData(data, columns) {
  const [search, setSearch] = useState("");
  const [sortState, setSortState] = useState(void 0);
  const finalData = React.useMemo(() => {
    var _a;
    const filtered = (_a = data == null ? void 0 : data.data) == null ? void 0 : _a.filter(
      (row) => fastStringify(Object.values(row)).toLowerCase().includes(search.toLowerCase())
    );
    const sorted = (sortState == null ? void 0 : sortState.sorter.column) ? (
      // We use .sort() rather than sortBy to use localeCompare
      (() => {
        var _a2;
        const cconfig = columns.find(
          (cc) => {
            var _a3;
            return cc.key === ((_a3 = sortState == null ? void 0 : sortState.sorter.column) == null ? void 0 : _a3.key);
          }
        );
        const expr = (_a2 = cconfig.expr) != null ? _a2 : (x) => x;
        return (filtered != null ? filtered : []).sort((aa, bb) => {
          var _a3, _b;
          const a = (_a3 = expr(aa, cconfig.fieldId ? aa == null ? void 0 : aa[cconfig.fieldId] : null)) != null ? _a3 : null, b = (_b = expr(bb, cconfig.fieldId ? bb == null ? void 0 : bb[cconfig.fieldId] : null)) != null ? _b : null;
          return typeof a === "string" ? a.localeCompare(b != null ? b : "") : typeof b === "string" ? -b.localeCompare(a != null ? a : "") : a - b;
        });
      })()
    ) : filtered;
    const reversed = (sortState == null ? void 0 : sortState.sorter.order) === "descend" ? sorted == null ? void 0 : sorted.reverse() : sorted;
    return reversed;
  }, [data, columns, sortState, search]);
  return {
    finalData,
    search,
    setSearch,
    setSortState
  };
}
function tagDataArray(xs) {
  return xs.map((x, i) => __spreadProps$4(__spreadValues$6({}, x), { __tag: i + 1 }));
}
function getTag(x) {
  return x.__tag;
}
function deriveRowKey(_data, rowKey) {
  if (rowKey) {
    return rowKey;
  }
  return (x) => {
    return ensure(getTag(x));
  };
}
function deriveKeyOfRow(row, rowKey) {
  if (typeof rowKey === "function") {
    return rowKey(row);
  } else if (typeof rowKey === "string") {
    return row[rowKey];
  } else {
    return void 0;
  }
}
function renderActions(rowActions, row, data, rowKey) {
  return rowActions.map((_action) => {
    var _a;
    if (_action.type === "item") {
      return /* @__PURE__ */ React.createElement(
        "a",
        {
          key: _action.label,
          style: {
            whiteSpace: "nowrap"
          },
          onClick: () => {
            var _a2;
            return (_a2 = _action.onClick) == null ? void 0 : _a2.call(
              _action,
              deriveKeyOfRow(row, deriveRowKey(data, rowKey)),
              row
            );
          }
        },
        _action.label
      );
    } else {
      return /* @__PURE__ */ React.createElement(
        Dropdown,
        {
          key: _action.label,
          menu: {
            items: ((_a = _action.children) != null ? _a : []).map((child) => ({
              key: child.label,
              label: child.label,
              onClick: () => {
                var _a2;
                return (_a2 = child.onClick) == null ? void 0 : _a2.call(
                  child,
                  deriveKeyOfRow(row, deriveRowKey(data, rowKey)),
                  row
                );
              }
            }))
          }
        },
        /* @__PURE__ */ React.createElement(
          "a",
          {
            href: "javascript: void 0",
            style: {
              whiteSpace: "nowrap"
            }
          },
          _action.label
        )
      );
    }
  });
}

var __defProp$5 = Object.defineProperty;
var __defProps$3 = Object.defineProperties;
var __getOwnPropDescs$3 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols$5 = Object.getOwnPropertySymbols;
var __hasOwnProp$5 = Object.prototype.hasOwnProperty;
var __propIsEnum$5 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$5 = (obj, key, value) => key in obj ? __defProp$5(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues$5 = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$5.call(b, prop))
      __defNormalProp$5(a, prop, b[prop]);
  if (__getOwnPropSymbols$5)
    for (var prop of __getOwnPropSymbols$5(b)) {
      if (__propIsEnum$5.call(b, prop))
        __defNormalProp$5(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps$3 = (a, b) => __defProps$3(a, __getOwnPropDescs$3(b));
function RichTable(props) {
  const {
    className,
    data: rawData = {
      data: [],
      schema: {
        id: "inferred",
        fields: [
          {
            id: "id",
            type: "string",
            readOnly: false
          }
        ]
      }
    },
    // children,
    pagination = true,
    defaultSize,
    title,
    addHref,
    pageSize = 10,
    hideSearch,
    hideDensity = true,
    hideColumnPicker,
    hideExports,
    hideSelectionBar = true,
    rowKey,
    scopeClassName
  } = props;
  const isClient = useIsClient();
  const normalizedData = useNormalizedData(isClient ? rawData : []);
  const data = useMemo(() => {
    if (!(normalizedData == null ? void 0 : normalizedData.data)) {
      return normalizedData;
    }
    return __spreadProps$3(__spreadValues$5({}, normalizedData), { data: tagDataArray(normalizedData.data) });
  }, [normalizedData]);
  const { columnDefinitions, normalized } = useColumnDefinitions(data, props);
  const actionRef = useRef();
  const { finalData, search, setSearch, setSortState } = useSortedFilteredData(
    data,
    normalized
  );
  const rowSelectionProps = useRowSelectionProps(data, props);
  if (!isClient) {
    return null;
  }
  return /* @__PURE__ */ React.createElement("div", { className: `${className} ${scopeClassName != null ? scopeClassName : ""}` }, /* @__PURE__ */ React.createElement(ErrorBoundary, { canvasEnvId: props["data-plasmic-canvas-envs"] }, /* @__PURE__ */ React.createElement(
    ProTable,
    __spreadProps$3(__spreadValues$5({
      ErrorBoundary: false,
      rowClassName: props.onRowClick || props.canSelectRows === "click" ? "plasmic-table-row-clickable" : void 0,
      actionRef,
      columns: columnDefinitions,
      onChange: (_pagination, _filters, sorter, _extra) => {
        setSortState({ sorter });
      },
      style: {
        width: "100%"
      },
      cardProps: {
        ghost: true
      }
    }, rowSelectionProps), {
      dataSource: finalData,
      rowKey: deriveRowKey(data, rowKey),
      defaultSize,
      editable: { type: "multiple" },
      search: false,
      options: {
        setting: hideColumnPicker ? false : {
          listsHeight: 400
        },
        reload: false,
        density: !hideDensity
      },
      pagination: pagination ? {
        pageSize,
        onChange: (page) => console.log(page),
        showSizeChanger: false
      } : false,
      dateFormatter: "string",
      headerTitle: title,
      toolbar: {
        search: !hideSearch ? {
          value: search,
          onChange: (e) => setSearch(e.target.value),
          onSearch: () => {
            return;
          },
          placeholder: "Search"
        } : void 0
      },
      toolBarRender: () => [
        addHref && /* @__PURE__ */ React.createElement(
          Button,
          {
            key: "button",
            icon: /* @__PURE__ */ React.createElement(PlusOutlined, null),
            type: "primary",
            href: addHref
          },
          "Add"
        ),
        !hideExports && /* @__PURE__ */ React.createElement(ExportMenu, { data })
      ].filter((x) => !!x)
    })
  )), /* @__PURE__ */ React.createElement(
    "style",
    {
      dangerouslySetInnerHTML: {
        __html: `
          :where(.css-dev-only-do-not-override-1p704s4).ant-pro-table-column-setting-overlay .ant-tree-treenode:hover .ant-pro-table-column-setting-list-item-option {
            display: none;
          }
          .plasmic-table-row-clickable {
            cursor: pointer;
          }
          .ant-pro-table-list-toolbar-right {
            flex-wrap: initial;
            flex-shrink: 0;
          }
          .ant-pro-table, .ant-pro-table > .ant-pro-card, .ant-pro-table .ant-table-wrapper, .ant-pro-table .ant-spin-nested-loading, .ant-pro-table .ant-table-container {
            height: 100%;
          }
          .ant-pro-table .ant-spin-container {
            height: 100%;
            display: flex;
            flex-direction: column;
          }
          .ant-pro-table .ant-table {
            flex-grow: 1;
            min-height: 0;
          }
          .ant-pro-table .ant-pagination {
            flex-shrink: 0;
          }
          .ant-pro-table .ant-table-content {
            overflow: auto !important;
            height: 100%;
          }
          .ant-pro-table > .ant-pro-card > .ant-pro-card-body {
            display: flex;
            flex-direction: column;
          }
          .ant-pro-table .ant-table-wrapper {
            flex-grow: 1;
            min-height: 0;
          }
          .ant-pro-table .ant-table-thead > tr > th, .ant-pro-table .ant-table-thead > tr > td.ant-table-selection-column {
            position: sticky;
            top: 0;
            z-index: 2;
          }
          .ant-pro-table .ant-table-thead > tr > th.ant-table-cell-fix-left, .ant-pro-table .ant-table-thead > tr > th.ant-table-cell-fix-right {
            z-index: 3;
          }
          .ant-pro-table .ant-table-tbody > tr > td {
            z-index: 0;
          }
          .ant-pro-table .ant-table-tbody > tr > td.ant-table-cell-fix-left,.ant-pro-table .ant-table-tbody > tr > td.ant-table-cell-fix-right {
            z-index: 1;
          }
          ${scopeClassName && hideSelectionBar ? `
          .${scopeClassName} .ant-pro-table-alert {
            display: none;
          }
          ` : ""}
      `
      }
    }
  ));
}
const defaultColumnConfig$2 = () => ({
  key: mkShortId(),
  isEditableExpr: () => false,
  disableSorting: false,
  sortByExpr: void 0,
  isHidden: false,
  formatting: {
    styles: {},
    align: "left",
    freeze: "off"
  },
  dataType: "auto"
});
function useColumnDefinitions(data, props) {
  const { fields, setControlContextData, rowActions } = props;
  return React.useMemo(() => {
    const schema = data == null ? void 0 : data.schema;
    if (!data || !schema) {
      return { normalized: [], columnDefinitions: [] };
    }
    const { mergedFields, minimalFullLengthFields } = deriveFieldConfigs(fields != null ? fields : [], schema, (field) => __spreadValues$5(__spreadValues$5({}, defaultColumnConfig$2()), field && {
      key: field.id,
      fieldId: field.id,
      title: field.label || field.id,
      expr: (currentItem) => currentItem[field.id]
    }));
    setControlContextData == null ? void 0 : setControlContextData(__spreadProps$3(__spreadValues$5({}, data), { mergedFields, minimalFullLengthFields }));
    const normalized = mergedFields;
    const columnDefinitions = normalized.filter((cconfig) => !cconfig.isHidden).map((cconfig, _columnIndex, _columnsArray) => {
      const columnDefinition = {
        dataIndex: cconfig.fieldId,
        title: cconfig.title,
        // dataIndex: cconfig,
        key: cconfig.key,
        valueType: deriveValueType(cconfig),
        // To come later
        readonly: false,
        sorter: !cconfig.disableSorting,
        copyable: false,
        ellipsis: false,
        tip: void 0,
        formItemProps: {
          rules: []
        },
        disable: false,
        valueEnum: void 0,
        search: void 0,
        hideInSearch: false,
        renderFormItem: (_, { defaultRender }) => {
          return defaultRender(_);
        },
        render: (_value, record, _rowIndex) => {
          return renderValue(record, cconfig);
        }
      };
      return columnDefinition;
    });
    const rowKey = props.rowKey;
    if (rowActions && rowActions.length > 0) {
      columnDefinitions.push({
        title: "Actions",
        valueType: "option",
        key: "__plasmicActions",
        fixed: "right",
        className: props.themeResetClassName,
        render: (_text, row) => [
          ...renderActions(rowActions, row, data, rowKey)
        ]
      });
    }
    return { normalized, columnDefinitions };
  }, [fields, data, setControlContextData, rowActions]);
}
function useRowSelectionProps(data, props) {
  const {
    canSelectRows,
    selectedRowKey,
    selectedRowKeys,
    onRowSelectionChanged,
    rowKey,
    onRowClick
  } = props;
  const deriveSelectedRowKeys = () => {
    if (!canSelectRows || canSelectRows === "none" || !deriveRowKey(data, rowKey)) {
      return [];
    }
    if (canSelectRows === "multiple") {
      return selectedRowKeys != null ? selectedRowKeys : [];
    } else if (selectedRowKey) {
      return [selectedRowKey];
    } else {
      return [];
    }
  };
  const rowSelection = canSelectRows && canSelectRows !== "none" ? __spreadValues$5({
    type: canSelectRows === "single" || canSelectRows === "click" ? "radio" : "checkbox",
    selectedRowKeys: deriveSelectedRowKeys(),
    onChange: (rowKeys, rows) => {
      onRowSelectionChanged == null ? void 0 : onRowSelectionChanged(rowKeys, rows);
    },
    alwaysShowAlert: true
  }, canSelectRows === "click" && {
    renderCell: () => null,
    columnWidth: 0,
    columnTitle: null,
    hideSelectAll: true
  }) : void 0;
  return {
    rowSelection,
    onRow: (row) => ({
      onClick: (event) => {
        const key = deriveKeyOfRow(row, deriveRowKey(data, rowKey));
        if (key != null && !isInteractable(event.target)) {
          if (canSelectRows === "click") {
            onRowSelectionChanged == null ? void 0 : onRowSelectionChanged([key], [row]);
          }
          onRowClick == null ? void 0 : onRowClick(key, row, event);
        }
      }
    })
  };
}
function ExportMenu(props) {
  const { data } = props;
  return /* @__PURE__ */ React.createElement(
    Dropdown,
    {
      key: "menu",
      menu: {
        items: [
          {
            label: "Download as CSV",
            key: "csv",
            onClick: async () => {
              var _a, _b;
              const writer = createObjectCsvStringifier({
                header: (_b = (_a = data == null ? void 0 : data.schema) == null ? void 0 : _a.fields.map((f) => ({
                  id: f.id,
                  title: f.id
                }))) != null ? _b : []
              });
              const dataStr = writer.getHeaderString() + writer.stringifyRecords(data == null ? void 0 : data.data);
              const filename = "data.csv";
              const blob = new Blob([dataStr], {
                type: "text/csv;charset=utf-8;"
              });
              if (navigator.msSaveBlob) {
                navigator.msSaveBlob(blob, filename);
              } else {
                const link = document.createElement("a");
                if (link.download !== void 0) {
                  const url = URL.createObjectURL(blob);
                  link.setAttribute("href", url);
                  link.setAttribute("download", filename);
                  link.style.visibility = "hidden";
                  document.body.appendChild(link);
                  link.click();
                  document.body.removeChild(link);
                }
              }
            }
          },
          {
            label: "Download as JSON",
            key: "json",
            onClick: () => {
              const dataStr = fastStringify(data == null ? void 0 : data.data);
              const dataUri = `data:application/json;charset=utf-8, ${encodeURIComponent(
                dataStr
              )}`;
              const exportFileDefaultName = "data.json";
              const linkElement = document.createElement("a");
              linkElement.setAttribute("href", dataUri);
              linkElement.setAttribute("download", exportFileDefaultName);
              linkElement.click();
            }
          }
        ]
      }
    },
    /* @__PURE__ */ React.createElement(Button, null, /* @__PURE__ */ React.createElement(EllipsisOutlined, null))
  );
}

var __defProp$4 = Object.defineProperty;
var __defProps$2 = Object.defineProperties;
var __getOwnPropDescs$2 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols$4 = Object.getOwnPropertySymbols;
var __hasOwnProp$4 = Object.prototype.hasOwnProperty;
var __propIsEnum$4 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$4 = (obj, key, value) => key in obj ? __defProp$4(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues$4 = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$4.call(b, prop))
      __defNormalProp$4(a, prop, b[prop]);
  if (__getOwnPropSymbols$4)
    for (var prop of __getOwnPropSymbols$4(b)) {
      if (__propIsEnum$4.call(b, prop))
        __defNormalProp$4(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps$2 = (a, b) => __defProps$2(a, __getOwnPropDescs$2(b));
const tableHelpers = {
  states: {
    selectedRow: {
      onChangeArgsToValue: (rowKeys, rows) => {
        return rows[0];
      }
    },
    selectedRows: {
      onChangeArgsToValue: (rowKeys, rows) => {
        return rows;
      }
    },
    selectedRowKey: {
      onChangeArgsToValue: (rowKeys, rows) => {
        return rowKeys[0];
      }
    },
    selectedRowKeys: {
      onChangeArgsToValue: (rowKeys, rows) => {
        return rowKeys;
      }
    }
  }
};
const dataTableMeta = {
  name: "hostless-rich-table",
  displayName: "Table",
  defaultStyles: {
    width: "stretch",
    padding: "16px",
    maxHeight: "100%"
  },
  props: __spreadProps$2(__spreadValues$4({
    data: dataProp(),
    fields: buildFieldsPropType({
      fieldTypes: {
        disableSorting: {
          type: "boolean",
          displayName: "Disable sorting?",
          defaultValueHint: false
        }
      }
    }),
    canSelectRows: {
      type: "choice",
      displayName: "Select rows?",
      options: [
        { label: "No", value: "none" },
        { label: "By clicking a row", value: "click" },
        { label: "Using radio buttons", value: "single" },
        { label: "Using checkboxes", value: "multiple" }
      ],
      defaultValueHint: "none",
      description: "Lets user select table rows by clicking on a row, or using radio buttons, or checkboxes if multiple rows can be selected together. If you have interactive elements in your row and you don't want clicking on them to select the row, you may use radio buttons instead."
    },
    rowKey: {
      type: "string",
      displayName: "Row key",
      helpText: "Column key to use as row key; can also be a function that takes in a row and returns a key value",
      hidden: (ps) => !ps.canSelectRows || ps.canSelectRows === "none"
    },
    selectedRowKey: {
      type: "string",
      displayName: "Selected Row Key",
      hidden: (ps) => ps.canSelectRows !== "single" && ps.canSelectRows !== "click",
      advanced: true
    },
    selectedRowKeys: {
      type: "array",
      displayName: "Selected Row Keys",
      hidden: (ps) => ps.canSelectRows !== "multiple",
      advanced: true
    },
    onRowSelectionChanged: {
      type: "eventHandler",
      displayName: "On row selection changed",
      argTypes: [
        { name: "rowKeys", type: "object" },
        { name: "rows", type: "object" }
      ]
    },
    onRowClick: onRowClickProp(),
    rowActions: rowActionsProp(),
    defaultSize: {
      displayName: "Density",
      type: "choice",
      options: [
        {
          value: "large",
          label: "Larger"
        },
        {
          value: "middle",
          label: "Medium"
        },
        {
          value: "small",
          label: "Compact"
        }
      ],
      defaultValueHint: "large",
      advanced: true
    }
  }, commonProps()), {
    hideExports: {
      type: "boolean",
      description: "Hides the button for exporting table data to CSV",
      advanced: true
    },
    hideDensity: {
      type: "boolean",
      description: "Hides the control for changing the density of the table",
      advanced: true,
      defaultValueHint: true
    },
    hideColumnPicker: {
      type: "boolean",
      description: "Hides the control for reordering and pinning columns",
      advanced: true
    },
    hideSelectionBar: {
      type: "boolean",
      description: "Hides the toolbar that allows the user to clear selection",
      advanced: true,
      hidden: (ps) => !ps.canSelectRows || ps.canSelectRows === "none",
      defaultValueHint: true
    },
    scopeClassName: {
      type: "styleScopeClass",
      scopeName: "instance"
    },
    themeResetClassName: {
      type: "themeResetClass",
      targetAllTags: true
    }
  }),
  states: {
    selectedRowKey: __spreadValues$4({
      type: "writable",
      valueProp: "selectedRowKey",
      onChangeProp: "onRowSelectionChanged",
      variableType: "text",
      hidden: (ps) => !(ps.canSelectRows === "click" || ps.canSelectRows === "single")
    }, tableHelpers.states.selectedRowKey),
    selectedRowKeys: __spreadValues$4({
      type: "writable",
      valueProp: "selectedRowKeys",
      onChangeProp: "onRowSelectionChanged",
      variableType: "array",
      hidden: (ps) => !(ps.canSelectRows === "multiple")
    }, tableHelpers.states.selectedRowKeys),
    selectedRow: __spreadValues$4({
      type: "readonly",
      onChangeProp: "onRowSelectionChanged",
      variableType: "object",
      hidden: (ps) => !(ps.canSelectRows === "click" || ps.canSelectRows === "single")
    }, tableHelpers.states.selectedRow),
    selectedRows: __spreadValues$4({
      type: "readonly",
      onChangeProp: "onRowSelectionChanged",
      variableType: "array",
      hidden: (ps) => !(ps.canSelectRows === "multiple")
    }, tableHelpers.states.selectedRows)
  },
  componentHelpers: {
    helpers: tableHelpers,
    importName: "tableHelpers",
    importPath: "@plasmicpkgs/plasmic-rich-components/skinny/rich-table"
  },
  importName: "RichTable",
  importPath: "@plasmicpkgs/plasmic-rich-components/skinny/rich-table"
};
function registerRichTable(loader) {
  registerComponentHelper(loader, RichTable, dataTableMeta);
}

var __defProp$3 = Object.defineProperty;
var __defProps$1 = Object.defineProperties;
var __getOwnPropDescs$1 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols$3 = Object.getOwnPropertySymbols;
var __hasOwnProp$3 = Object.prototype.hasOwnProperty;
var __propIsEnum$3 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$3 = (obj, key, value) => key in obj ? __defProp$3(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues$3 = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$3.call(b, prop))
      __defNormalProp$3(a, prop, b[prop]);
  if (__getOwnPropSymbols$3)
    for (var prop of __getOwnPropSymbols$3(b)) {
      if (__propIsEnum$3.call(b, prop))
        __defNormalProp$3(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps$1 = (a, b) => __defProps$1(a, __getOwnPropDescs$1(b));
var __objRest$1 = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp$3.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols$3)
    for (var prop of __getOwnPropSymbols$3(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum$3.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const listCss = `
.plasmic-list--grid .ant-list-items {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
  gap: 16px;
}

.plasmic-list-search {
  /* Matches RichTable search. */
  max-width: 200px;
  margin-bottom: 8px;
}

.plasmic-list-item-content--unbordered {
  padding-left: 8px;
  padding-right: 8px;
}

.ant-list .plasmic-list-item {
  align-items: stretch;
}

.plasmic-list-item--clickable:hover {
  background-color: #8881;
}

.plasmic-list-item-image {
  max-width: 80px;
  max-height: 80px;
  aspect-ratio: 1/1;
  object-fit: cover;
  border-radius: 8px;
}

.plasmic-list-item-card {
  /* Unsure why needed, but cards otherwise can be much narrower. */
  width: 100%;
  /* For the body to fill the height, so all cards are the same height. */
  display: flex;
  flex-direction: column;
}

.plasmic-list-item-card > .ant-card-body {
  flex: 1;
}

.plasmic-list-item-card-cover {
  max-height: 300px;
  aspect-ratio: 1/1;
  object-fit: cover;
}
`;
function RichList(props) {
  const _a = props, {
    data: rawData = {
      data: [],
      schema: {
        id: "inferred",
        fields: [
          {
            id: "id",
            type: "string",
            readOnly: false
          }
        ]
      }
    },
    type = "list",
    bordered = true,
    className,
    size,
    header,
    footer,
    rowActions = [],
    title,
    pageSize = 10,
    hideSearch,
    rowKey,
    pagination = true,
    onRowClick
  } = _a; __objRest$1(_a, [
    "data",
    "type",
    "bordered",
    "className",
    "size",
    "header",
    "footer",
    "rowActions",
    "title",
    "pageSize",
    "hideSearch",
    "rowKey",
    "pagination",
    "onRowClick"
  ]);
  const normalizedData = useNormalizedData(rawData);
  const data = React.useMemo(() => {
    if (!(normalizedData == null ? void 0 : normalizedData.data)) {
      return normalizedData;
    }
    return __spreadProps$1(__spreadValues$3({}, normalizedData), { data: tagDataArray(normalizedData.data) });
  }, [normalizedData]);
  const { normalized, finalRoles: roleConfigs } = useRoleDefinitions$1(
    data,
    props
  );
  useRef();
  const linkTo = typeof props.linkTo === "function" ? props.linkTo : void 0;
  const { finalData, search, setSearch, setSortState } = useSortedFilteredData(
    data,
    normalized
  );
  const actuallyBordered = type === "list" ? bordered : false;
  return /* @__PURE__ */ React.createElement("div", { className }, /* @__PURE__ */ React.createElement("style", { dangerouslySetInnerHTML: { __html: listCss } }), !hideSearch && /* @__PURE__ */ React.createElement(
    Input.Search,
    {
      className: "plasmic-list-search",
      onChange: (e) => setSearch(e.target.value),
      value: search,
      placeholder: "Search"
    }
  ), /* @__PURE__ */ React.createElement(
    List,
    {
      className: classNames({
        // We use CSS grid instead of the built-in Ant grid which can only define fixed # columns, and only at screen (and not container) breakpoints.
        "plasmic-list--grid": type === "grid"
      }),
      size,
      header,
      footer,
      dataSource: finalData,
      itemLayout: "horizontal",
      bordered: actuallyBordered,
      pagination: pagination ? {
        pageSize,
        showSizeChanger: false
      } : false,
      renderItem: (record, index) => {
        var _a2;
        const actions = renderActions(rowActions, record, data, rowKey);
        const image = maybe(
          maybeRenderString(record, (_a2 = roleConfigs.image) == null ? void 0 : _a2[0]),
          (src) => /* @__PURE__ */ React.createElement(
            "img",
            {
              src,
              className: type === "list" ? "plasmic-list-item-image" : "plasmic-list-item-card-cover"
            }
          )
        );
        const content = /* @__PURE__ */ React.createElement(
          ListItemContent,
          {
            bordered: actuallyBordered,
            image: type === "list" ? image : void 0,
            title: multiRenderValue(record, roleConfigs.title),
            subtitle: multiRenderValue(record, roleConfigs.subtitle),
            beforeTitle: multiRenderValue(record, roleConfigs.beforeTitle),
            afterTitle: multiRenderValue(record, roleConfigs.afterTitle),
            content: multiRenderValue(record, roleConfigs.content)
          }
        );
        function makeLinkWrapper() {
          if ((actions != null ? actions : []).length > 0)
            return void 0;
          const href = linkTo == null ? void 0 : linkTo(record);
          if (!href && !onRowClick)
            return void 0;
          const _linkWrapper = (x) => /* @__PURE__ */ React.createElement(
            "a",
            {
              href,
              onClick: (event) => {
                const key = deriveKeyOfRow(
                  record,
                  deriveRowKey(data, rowKey)
                );
                if (key != null && !isInteractable(event.target)) {
                  onRowClick == null ? void 0 : onRowClick(key, record, event);
                }
              }
            },
            x
          );
          return _linkWrapper;
        }
        const linkWrapper = makeLinkWrapper();
        const hasLink = !!linkWrapper;
        function maybeLink(x) {
          var _a3;
          return (_a3 = linkWrapper == null ? void 0 : linkWrapper(x)) != null ? _a3 : x;
        }
        return type === "grid" ? /* @__PURE__ */ React.createElement(List.Item, { className: "plasmic-list-item" }, maybeLink(
          /* @__PURE__ */ React.createElement(
            Card,
            {
              className: "plasmic-list-item-card",
              size: "small",
              cover: image,
              hoverable: hasLink,
              actions
            },
            content
          )
        )) : maybeLink(
          /* @__PURE__ */ React.createElement(
            List.Item,
            {
              actions,
              className: classNames({
                "plasmic-list-item": true,
                "plasmic-list-item--clickable": hasLink
              })
            },
            content
          )
        );
      }
    }
  ));
}
function ListItemContent(_a) {
  var _b = _a, {
    className,
    title,
    subtitle,
    image,
    beforeTitle,
    afterTitle,
    content,
    bordered
  } = _b, others = __objRest$1(_b, [
    "className",
    "title",
    "subtitle",
    "image",
    "beforeTitle",
    "afterTitle",
    "content",
    "bordered"
  ]);
  const prefixCls = "ant-list";
  const classString = classNames(`${prefixCls}-item-meta`, className);
  return /* @__PURE__ */ React.createElement(
    "div",
    __spreadProps$1(__spreadValues$3({}, others), {
      className: classNames(
        {
          "plasmic-list-item-content--unbordered": !bordered
        },
        classString
      )
    }),
    image && /* @__PURE__ */ React.createElement("div", { className: `${prefixCls}-item-meta-avatar` }, image),
    /* @__PURE__ */ React.createElement(
      "div",
      {
        className: `${prefixCls}-item-meta-content`,
        style: { display: "flex", flexDirection: "column", gap: 4 }
      },
      beforeTitle && /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement(Tag, null, beforeTitle)),
      /* @__PURE__ */ React.createElement("div", { style: { display: "flex", gap: 8 } }, title && /* @__PURE__ */ React.createElement(
        "h4",
        {
          className: `${prefixCls}-item-meta-title`,
          style: { margin: 0 }
        },
        title
      ), afterTitle && /* @__PURE__ */ React.createElement("div", { className: `${prefixCls}-item-meta-description` }, afterTitle)),
      subtitle && /* @__PURE__ */ React.createElement("div", { className: `${prefixCls}-item-meta-description` }, subtitle),
      content && /* @__PURE__ */ React.createElement("div", null, content)
    )
  );
}
const defaultColumnConfig$1 = () => ({
  key: mkShortId(),
  isEditableExpr: () => false,
  disableSorting: false,
  sortByExpr: void 0,
  isHidden: false,
  formatting: {
    styles: {},
    align: "left",
    freeze: "off"
  },
  dataType: "auto",
  role: void 0
});
const roles$1 = [
  "content",
  "title",
  "subtitle",
  "beforeTitle",
  "afterTitle",
  "image",
  "unset"
];
function useRoleDefinitions$1(data, props) {
  const { fields, setControlContextData, rowActions } = props;
  return React.useMemo(() => {
    var _a, _b, _c, _d;
    const schema = data == null ? void 0 : data.schema;
    const schemaMap = new Map((_a = data == null ? void 0 : data.schema) == null ? void 0 : _a.fields.map((f) => [f.id, f]));
    if (!data || !schema) {
      return { normalized: [], finalRoles: {} };
    }
    function tagFieldConfigs(role) {
      var _a2;
      if (role !== "unset") {
        return ensureArray((_a2 = props[role]) != null ? _a2 : []).map((field) => {
          return __spreadProps$1(__spreadValues$3({}, field), {
            role
          });
        });
      } else {
        return [];
      }
    }
    const specifiedFieldsPartial = [
      ...tagFieldConfigs("image"),
      ...tagFieldConfigs("content"),
      ...tagFieldConfigs("title"),
      ...tagFieldConfigs("beforeTitle"),
      ...tagFieldConfigs("afterTitle"),
      ...tagFieldConfigs("subtitle")
    ];
    function doDeriveFieldConfigs(mode) {
      return deriveFieldConfigs(
        mode === "defaults" ? [] : specifiedFieldsPartial,
        schema,
        (field) => __spreadValues$3(__spreadValues$3({}, defaultColumnConfig$1()), field && {
          key: field.id,
          fieldId: field.id,
          title: field.label || field.id,
          // undefined means not yet determined in this routine, not 'unset'
          role: void 0,
          expr: (currentItem) => currentItem[field.id]
        })
      );
    }
    const {
      mergedFields: defaultMergedFields,
      minimalFullLengthFields: defaultMinimalFullLengthFields
    } = doDeriveFieldConfigs("defaults");
    if (data.data.length > 0 && !defaultMergedFields.some((field) => field.role === "image")) {
      const sampleRows = Array.from(
        new Set(
          [0, 1, 2, 3, 4, 5, 6, 7, 8, 9].map(
            (i) => Math.round(i / 9 * (data.data.length - 1))
          )
        )
      ).map((i) => data.data[i]);
      const imageFieldCandidates = defaultMergedFields.filter(
        (field) => !field.role && sampleRows.filter(
          (row) => field.fieldId && isLikeImage(row[field.fieldId])
        ).length >= sampleRows.length / 2
      );
      const imageField = (_c = (_b = imageFieldCandidates.find(
        (f) => {
          var _a2;
          return (_a2 = f.fieldId) == null ? void 0 : _a2.match(
            /^(image|picture|pic|img|avatar|profile|photo|icon)$/i
          );
        }
      )) != null ? _b : imageFieldCandidates.find(
        (f) => {
          var _a2;
          return (_a2 = f.fieldId) == null ? void 0 : _a2.match(
            /.*(image|picture|pic|img|avatar|profile|photo|icon).*/i
          );
        }
      )) != null ? _c : imageFieldCandidates[0];
      if (imageField) {
        imageField.role = "image";
      }
    }
    if (!defaultMergedFields.some((field) => field.role === "title")) {
      const titleField = defaultMergedFields.find(
        (field) => {
          var _a2;
          return !field.role && ((_a2 = field.fieldId) == null ? void 0 : _a2.toLowerCase().match(/^(title|name|first[ _-]?name|full[ _-]?name)$/));
        }
      );
      if (titleField) {
        titleField.role = "title";
      }
    }
    if (!defaultMergedFields.some((field) => field.role === "content")) {
      const contentField = defaultMergedFields.find(
        (field) => {
          var _a2;
          return !field.role && field.fieldId && ((_a2 = schemaMap.get(field.fieldId)) == null ? void 0 : _a2.type) === "string";
        }
      );
      if (contentField) {
        contentField.role = "content";
      }
    }
    const fieldIdToDefaultRole = new Map(
      defaultMergedFields.map((f) => [f.fieldId, f.role])
    );
    for (const f of defaultMinimalFullLengthFields) {
      f.role = fieldIdToDefaultRole.get(f.fieldId);
    }
    const { mergedFields, minimalFullLengthFields } = doDeriveFieldConfigs("existing");
    const minimalFullLengthFieldsWithDefaults = [
      ...minimalFullLengthFields.filter((f) => f.role && f.role !== "unset"),
      ...defaultMinimalFullLengthFields.filter(
        (f) => f.role && f.role !== "unset" && !props[f.role]
      )
    ];
    const mergedFieldsWithDefaults = [
      ...mergedFields.filter((f) => f.role && f.role !== "unset"),
      ...defaultMergedFields.filter(
        (f) => f.role && f.role !== "unset" && !props[f.role]
      )
    ];
    const roleConfigs = ensure(
      groupBy(mergedFieldsWithDefaults, (f) => f.role)
    );
    const finalRoles = {};
    for (const role of roles$1) {
      if (role !== "unset") {
        finalRoles[role] = (_d = maybe(props[role], ensureArray)) != null ? _d : roleConfigs[role];
      }
    }
    setControlContextData == null ? void 0 : setControlContextData(__spreadProps$1(__spreadValues$3({}, data), {
      mergedFields: mergedFieldsWithDefaults,
      minimalFullLengthFields: minimalFullLengthFieldsWithDefaults
    }));
    const normalized = mergedFieldsWithDefaults;
    return { normalized, finalRoles };
  }, [fields, data, setControlContextData, rowActions]);
}

var __defProp$2 = Object.defineProperty;
var __getOwnPropSymbols$2 = Object.getOwnPropertySymbols;
var __hasOwnProp$2 = Object.prototype.hasOwnProperty;
var __propIsEnum$2 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$2 = (obj, key, value) => key in obj ? __defProp$2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues$2 = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$2.call(b, prop))
      __defNormalProp$2(a, prop, b[prop]);
  if (__getOwnPropSymbols$2)
    for (var prop of __getOwnPropSymbols$2(b)) {
      if (__propIsEnum$2.call(b, prop))
        __defNormalProp$2(a, prop, b[prop]);
    }
  return a;
};
const richListMeta = {
  name: "hostless-rich-list",
  displayName: "Data List",
  defaultStyles: {
    width: "stretch",
    padding: "16px",
    maxHeight: "100%"
  },
  defaultDisplay: "block",
  props: __spreadValues$2({
    data: dataProp(),
    type: {
      type: "choice",
      options: [
        { value: "list", label: "List" },
        { value: "grid", label: "Grid" }
      ],
      defaultValueHint: "list"
    },
    header: {
      type: "slot",
      hidePlaceholder: true
    },
    footer: {
      type: "slot",
      hidePlaceholder: true
    },
    title: roleProp({ role: "title" }),
    content: roleProp({ role: "content" }),
    image: roleProp({ role: "image", singular: true }),
    subtitle: roleProp({
      role: "subtitle",
      advanced: true
    }),
    // Haven't styled these yet!
    // beforeTitle: roleProp({ role: "beforeTitle", advanced: true }),
    // afterTitle: roleProp({ role: "afterTitle", advanced: true }),
    linkTo: {
      type: "function",
      control: {
        type: "href"
      },
      argNames: ["currentItem"],
      argValues: (_props, ctx) => {
        var _a;
        return [(_a = ctx == null ? void 0 : ctx.data) == null ? void 0 : _a[0]];
      }
    },
    onRowClick: onRowClickProp(),
    rowActions: rowActionsProp(),
    bordered: {
      type: "boolean",
      defaultValue: true,
      hidden: (ps) => {
        var _a;
        return ((_a = ps.type) != null ? _a : "list") !== "list";
      }
    }
  }, commonProps()),
  importName: "RichList",
  importPath: "@plasmicpkgs/plasmic-rich-components/skinny/rich-list"
};
function registerRichList(loader) {
  registerComponentHelper(loader, RichList, richListMeta);
}

var __defProp$1 = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols$1 = Object.getOwnPropertySymbols;
var __hasOwnProp$1 = Object.prototype.hasOwnProperty;
var __propIsEnum$1 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$1 = (obj, key, value) => key in obj ? __defProp$1(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues$1 = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$1.call(b, prop))
      __defNormalProp$1(a, prop, b[prop]);
  if (__getOwnPropSymbols$1)
    for (var prop of __getOwnPropSymbols$1(b)) {
      if (__propIsEnum$1.call(b, prop))
        __defNormalProp$1(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp$1.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols$1)
    for (var prop of __getOwnPropSymbols$1(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum$1.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
dayjs.extend(weekday);
dayjs.extend(localeData);
function getEventFullDate(date) {
  const parsed = parseDate(date);
  if (!parsed)
    return void 0;
  const yyyy = parsed.getFullYear();
  const mm = (parsed.getMonth() + 1).toString().padStart(2, "0");
  const dd = parsed.getDate().toString().padStart(2, "0");
  return `${yyyy}-${mm}-${dd}`;
}
function getEventMonthYear(date) {
  var _a;
  return (_a = getEventFullDate(date)) == null ? void 0 : _a.substring(0, 7);
}
function EventCell({ events }) {
  if (!events || !events.length)
    return null;
  return /* @__PURE__ */ React.createElement("ul", { style: { all: "unset" } }, events.map((e) => /* @__PURE__ */ React.createElement("li", { key: JSON.stringify(e), style: { all: "unset", display: "block" } }, /* @__PURE__ */ React.createElement(Badge, { color: e.color || "green", text: e.title }))));
}
function RichCalendar(props) {
  const _a = props, {
    data: rawData = {
      data: [],
      schema: {
        id: "inferred",
        fields: [
          {
            id: "id",
            type: "string",
            readOnly: false
          }
        ]
      }
    },
    value: isoValue,
    defaultValue: isoDefaultValue,
    validRange: isoValidRange,
    dateCellRender,
    dateFullCellRender,
    monthCellRender,
    monthFullCellRender
  } = _a, rest = __objRest(_a, [
    "data",
    "value",
    "defaultValue",
    "validRange",
    "dateCellRender",
    "dateFullCellRender",
    "monthCellRender",
    "monthFullCellRender"
  ]);
  const data = useNormalizedData(rawData);
  const { normalized, finalRoles: roleConfigs } = useRoleDefinitions(
    data,
    props
  );
  const {
    eventsByDate,
    eventsByMonth
  } = useMemo(() => {
    if (!data)
      return { eventsByDate: {}, eventsByMonth: {} };
    return data == null ? void 0 : data.data.reduce(
      (acc, item) => {
        const date = getFieldAggregateValue(item, roleConfigs.date);
        const title = getFieldAggregateValue(item, roleConfigs.title);
        const color = getFieldAggregateValue(item, roleConfigs.color);
        const event = {
          date,
          title,
          color
        };
        const keyDate = getEventFullDate(date);
        const keyMonth = getEventMonthYear(date);
        if (keyDate && keyMonth) {
          acc.eventsByDate[keyDate] = [
            ...acc.eventsByDate[keyDate] || [],
            event
          ];
          acc.eventsByMonth[keyMonth] = [
            ...acc.eventsByMonth[keyMonth] || [],
            event
          ];
        }
        return acc;
      },
      { eventsByDate: {}, eventsByMonth: {} }
    );
  }, [data, roleConfigs.color, roleConfigs.date, roleConfigs.title]);
  const value = useMemo(
    () => isValidIsoDate(isoValue) ? dayjs(isoValue) : dayjs(),
    [isoValue]
  );
  const defaultValue = useMemo(
    () => isValidIsoDate(isoDefaultValue) ? dayjs(isoDefaultValue) : dayjs(),
    [isoDefaultValue]
  );
  const validRange = useMemo(() => {
    if (!isoValidRange)
      return void 0;
    const range = isoValidRange.filter((dateIso) => isValidIsoDate(dateIso)).map((d) => dayjs(d));
    if (range.length !== 2)
      return void 0;
    return [range[0], range[1]];
  }, [isoValidRange]);
  const key = useMemo(() => JSON.stringify(roleConfigs), [roleConfigs]);
  return /* @__PURE__ */ React.createElement(
    Calendar,
    __spreadProps(__spreadValues$1({}, rest), {
      key,
      validRange,
      defaultValue,
      value,
      dateCellRender: dateCellRender ? dateCellRender : (date) => /* @__PURE__ */ React.createElement(
        EventCell,
        {
          events: eventsByDate[getEventFullDate(date.toISOString())]
        }
      ),
      monthCellRender: monthCellRender ? monthCellRender : (date) => /* @__PURE__ */ React.createElement(
        EventCell,
        {
          events: eventsByMonth[getEventMonthYear(date.toISOString())]
        }
      ),
      dateFullCellRender,
      monthFullCellRender
    })
  );
}
const defaultColumnConfig = () => ({
  key: mkShortId(),
  isEditableExpr: () => false,
  disableSorting: false,
  sortByExpr: void 0,
  isHidden: false,
  formatting: {
    styles: {},
    align: "left",
    freeze: "off"
  },
  dataType: "auto",
  role: void 0
});
const roles = ["date", "title", "color", "unset"];
function useRoleDefinitions(data, props) {
  const { fields, setControlContextData } = props;
  return React.useMemo(() => {
    var _a, _b, _c, _d, _e;
    const schema = data == null ? void 0 : data.schema;
    if (!data || !schema) {
      return { normalized: [], finalRoles: {} };
    }
    function tagFieldConfigs(role) {
      var _a2;
      if (role !== "unset") {
        return ensureArray((_a2 = props[role]) != null ? _a2 : []).map((field) => {
          return __spreadProps(__spreadValues$1({}, field), {
            role
          });
        });
      } else {
        return [];
      }
    }
    const specifiedFieldsPartial = [
      ...tagFieldConfigs("date"),
      ...tagFieldConfigs("color"),
      ...tagFieldConfigs("title")
    ];
    function doDeriveFieldConfigs(mode) {
      return deriveFieldConfigs(
        mode === "defaults" ? [] : specifiedFieldsPartial,
        schema,
        (field) => __spreadValues$1(__spreadValues$1({}, defaultColumnConfig()), field && {
          key: field.id,
          fieldId: field.id,
          title: field.label || field.id,
          // undefined means not yet determined in this routine, not 'unset'
          role: void 0,
          expr: (currentItem) => currentItem[field.id]
        })
      );
    }
    const {
      mergedFields: defaultMergedFields,
      minimalFullLengthFields: defaultMinimalFullLengthFields
    } = doDeriveFieldConfigs("defaults");
    if (data.data.length > 0 && !defaultMergedFields.some((field) => field.role === "date")) {
      const sampleRows = Array.from(
        new Set(
          [0, 1, 2, 3, 4, 5, 6, 7, 8, 9].map(
            (i) => Math.round(i / 9 * (data.data.length - 1))
          )
        )
      ).map((i) => data.data[i]);
      const dateFieldCandidates = defaultMergedFields.filter(
        (field) => !field.role && sampleRows.filter(
          (row) => field.fieldId && isLikeDate(row[field.fieldId])
        ).length >= sampleRows.length / 2
      );
      const dateField = (_b = (_a = dateFieldCandidates.find(
        (f) => {
          var _a2;
          return (_a2 = f.fieldId) == null ? void 0 : _a2.match(/^(date|datetime|timestamp|eventdate)$/i);
        }
      )) != null ? _a : dateFieldCandidates.find(
        (f) => {
          var _a2;
          return (_a2 = f.fieldId) == null ? void 0 : _a2.match(/.*(date|time|event).*/i);
        }
      )) != null ? _b : dateFieldCandidates[0];
      if (dateField) {
        dateField.role = "date";
      }
    }
    if (data.data.length > 0 && !defaultMergedFields.some((field) => field.role === "color")) {
      const sampleRows = Array.from(
        new Set(
          [0, 1, 2, 3, 4, 5, 6, 7, 8, 9].map(
            (i) => Math.round(i / 9 * (data.data.length - 1))
          )
        )
      ).map((i) => data.data[i]);
      const colorFieldCandidates = defaultMergedFields.filter(
        (field) => !field.role && sampleRows.filter(
          (row) => field.fieldId && isLikeColor(row[field.fieldId])
        ).length >= sampleRows.length / 2
      );
      const colorField = (_d = (_c = colorFieldCandidates.find(
        (f) => {
          var _a2;
          return (_a2 = f.fieldId) == null ? void 0 : _a2.match(/^(color|hex|rgb|hsl|rgba|cmyk|hsv|hsb)$/i);
        }
      )) != null ? _c : colorFieldCandidates.find(
        (f) => {
          var _a2;
          return (_a2 = f.fieldId) == null ? void 0 : _a2.match(/.*(color|hex|rgb|hsl|rgba|cmyk|hsv|hsb).*/i);
        }
      )) != null ? _d : colorFieldCandidates[0];
      if (colorField) {
        colorField.role = "color";
      }
    }
    if (!defaultMergedFields.some((field) => field.role === "title")) {
      const titleField = defaultMergedFields.find(
        (field) => {
          var _a2;
          return !field.role && ((_a2 = field.fieldId) == null ? void 0 : _a2.toLowerCase().match(/^(title|name||event[ _-]?name)$/));
        }
      );
      if (titleField) {
        titleField.role = "title";
      }
    }
    const fieldIdToDefaultRole = new Map(
      defaultMergedFields.map((f) => [f.fieldId, f.role])
    );
    for (const f of defaultMinimalFullLengthFields) {
      f.role = fieldIdToDefaultRole.get(f.fieldId);
    }
    const { mergedFields, minimalFullLengthFields } = doDeriveFieldConfigs("existing");
    const minimalFullLengthFieldsWithDefaults = [
      ...minimalFullLengthFields.filter((f) => f.role && f.role !== "unset"),
      ...defaultMinimalFullLengthFields.filter(
        (f) => f.role && f.role !== "unset" && !props[f.role]
      )
    ];
    const mergedFieldsWithDefaults = [
      ...mergedFields.filter((f) => f.role && f.role !== "unset"),
      ...defaultMergedFields.filter(
        (f) => f.role && f.role !== "unset" && !props[f.role]
      )
    ];
    const roleConfigs = ensure(
      groupBy(mergedFieldsWithDefaults, (f) => f.role)
    );
    const finalRoles = {};
    for (const role of roles) {
      if (role !== "unset") {
        finalRoles[role] = (_e = maybe(props[role], ensureArray)) != null ? _e : roleConfigs[role];
      }
    }
    setControlContextData == null ? void 0 : setControlContextData(__spreadProps(__spreadValues$1({}, data), {
      mergedFields: mergedFieldsWithDefaults,
      minimalFullLengthFields: minimalFullLengthFieldsWithDefaults
    }));
    const normalized = mergedFieldsWithDefaults;
    return { normalized, finalRoles };
  }, [data, setControlContextData, props]);
}

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
const calendarHelpers = {
  states: {
    mode: {
      onChangeArgsToValue: (_date, mode) => mode
    },
    selectedDate: {
      onChangeArgsToValue: (date) => dayjs(date).toISOString()
    }
  }
};
const calendarComponentName = "hostless-rich-calendar";
function registerRichCalendar(loader) {
  registerComponentHelper(loader, RichCalendar, {
    name: calendarComponentName,
    displayName: "Calendar",
    props: {
      data: {
        type: "dataSourceOpData",
        displayName: "Events",
        description: "The events data should be a list of records with some date, title and (optionally) color fields. The component will infer the date field from the provided data, but you can also explicitly specify that below."
      },
      title: roleProp({ role: "title" }),
      date: roleProp({ role: "date", singular: true }),
      color: roleProp({ role: "color", singular: true }),
      value: {
        // Must have a corresponding state and eventhandler for any prop that I want to be able to change in interactive mode.
        editOnly: true,
        uncontrolledProp: "defaultValue",
        type: "dateString",
        description: `The date selected by default as an ISO string`,
        validator: (value, ps) => {
          if (!ps.value)
            return true;
          if (!ps.validRange)
            return true;
          if (!isValidIsoDate(value))
            return "Not a valid ISO string.";
          if (dayjs(value).isBefore(ps.validRange[0]) || dayjs(value).isAfter(ps.validRange[1]))
            return "Not within the valid range";
          return true;
        }
      },
      mode: {
        type: "choice",
        options: ["month", "year"],
        description: "The default display mode of the calendar.",
        defaultValueHint: "month"
      },
      validRange: {
        type: "dateRangeStrings",
        description: "Only allow selection of dates that lie within this range",
        advanced: true,
        validator: (value, ps) => {
          if (!value)
            return true;
          if (!Array.isArray(value) || value.length !== 2)
            return "Not an array with 2 items";
          if (!isValidIsoDate(value[0]) || !isValidIsoDate(value[1]))
            return "Min or max range is not in valid ISO date format.";
          return true;
        }
      },
      headerRender: {
        type: "slot",
        renderPropParams: ["headerProps"],
        hidePlaceholder: true,
        displayName: "Custom Header"
      },
      dateCellRender: {
        type: "slot",
        renderPropParams: ["dateProps"],
        hidePlaceholder: true,
        displayName: "Append Date Cell"
      },
      dateFullCellRender: {
        type: "slot",
        renderPropParams: ["dateProps"],
        hidePlaceholder: true,
        displayName: "Custom Date Cell"
      },
      monthCellRender: {
        type: "slot",
        renderPropParams: ["dateProps"],
        hidePlaceholder: true,
        displayName: "Append Month Cell"
      },
      monthFullCellRender: {
        type: "slot",
        renderPropParams: ["dateProps"],
        hidePlaceholder: true,
        displayName: "Custom Month Cell"
      },
      onPanelChange: {
        type: "eventHandler",
        description: "Triggers when the calendar mode changes (e.g. from month to year mode)",
        argTypes: [
          { name: "date", type: "object" },
          { name: "mode", type: "string" }
        ]
      },
      onChange: {
        type: "eventHandler",
        argTypes: [{ name: "date", type: "object" }]
      }
    },
    states: {
      mode: __spreadValues({
        type: "writable",
        valueProp: "mode",
        onChangeProp: "onPanelChange",
        variableType: "text"
      }, calendarHelpers.states.mode),
      selectedDate: __spreadValues({
        type: "writable",
        valueProp: "value",
        onChangeProp: "onChange",
        variableType: "text"
      }, calendarHelpers.states.selectedDate)
    },
    componentHelpers: {
      helpers: calendarHelpers,
      importName: "calendarHelpers",
      importPath: "@plasmicpkgs/plasmic-rich-components/skinny/rich-calendar"
    },
    importPath: "@plasmicpkgs/plasmic-rich-components/skinny/rich-calendar",
    importName: "RichCalendar"
  });
}

function registerAll(loader) {
  registerRichLayout(loader);
  registerRichList(loader);
  registerRichTable(loader);
  registerRichDetails(loader);
  registerRichCalendar(loader);
}

export { RichCalendar, RichDetails, RichLayout, RichList, RichTable, calendarHelpers, commonProps, dataProp, deriveKeyOfRow, deriveRowKey, ensureArray, isInteractable, isLikeImage, onRowClickProp, registerAll, renderActions, rowActionsProp, tableHelpers, useSortedFilteredData };
//# sourceMappingURL=plasmic-rich-components.esm.js.map
