import { QueryResult, TableSchema } from "@plasmicapp/data-sources";
import { ContextDependentConfig } from "@plasmicapp/host";
import { PropType } from "@plasmicapp/host/registerComponent";
export interface AutoSettings {
    dataType: "auto";
}
interface _SharedNumberSettings {
    notation?: "standard" | "scientific" | "engineering" | "compact";
    signDisplay?: "auto" | "always" | "exceptZero";
    maximumFractionDigits?: number;
    minimumFractionDigits?: number;
    locale?: string;
}
export interface DecimalSettings extends _SharedNumberSettings {
    dataType: "number";
}
export interface PercentSettings extends _SharedNumberSettings {
    dataType: "percent";
}
export interface CurrencySettings extends _SharedNumberSettings {
    dataType: "currency";
    currency?: string;
    currencyDisplay?: "symbol" | "narrowSymbol" | "code" | "name";
}
export declare const DEFAULT_CURRENCY_SETTINGS: CurrencySettings;
export type NumberSettings = DecimalSettings | PercentSettings | CurrencySettings;
export declare const NUMBER_TYPES: readonly ["number", "percent", "currency"];
export interface DateTimeSettings {
    dataType: "datetime";
    locale?: string;
    dateStyle?: "none" | "full" | "long" | "medium" | "short";
    timeStyle?: "none" | "full" | "long" | "medium" | "short";
    hour12?: boolean;
    timeZone?: string;
}
export declare const DEFAULT_DATETIME_SETTINGS: DateTimeSettings;
export interface RelativeDateTimeSettings {
    dataType: "relative-datetime";
    locale?: string;
    numeric?: "always" | "auto";
    style?: "long" | "short" | "narrow";
    unit?: "year" | "month" | "week" | "day" | "hour" | "minute" | "second";
}
export declare const DEFAULT_RELATIVE_DATETIME_SETTINGS: RelativeDateTimeSettings;
export declare const DATETIME_TYPES: readonly ["datetime", "relative-datetime"];
export interface BooleanSettings {
    dataType: "boolean";
    showAs?: "text" | "checkbox" | "switch";
}
export declare const DEFAULT_BOOLEAN_SETTINGS: BooleanSettings;
export interface StringSettings {
    dataType: "string";
}
export type RowFunc<Result> = (row: Record<string, unknown>) => Result;
export type CellFunc<Result> = (row: Record<string, unknown>, value: unknown) => Result;
/**
 * Exprs are for things that can must re-evaluate from row to row.
 *
 * Literal values are for things that are column-level. (But in Plasmic Studio, as with all props, you can still use a dynamic value.)
 */
interface _BaseColumnConfig {
    key: string;
    fieldId?: string;
    title?: string;
    isHidden: boolean;
    expr?: CellFunc<any>;
}
export type BaseColumnConfig = _BaseColumnConfig & (AutoSettings | NumberSettings | StringSettings | BooleanSettings | DateTimeSettings | RelativeDateTimeSettings);
export declare function deriveValueType(cconfig: BaseColumnConfig): "text" | "switch" | "digit" | undefined;
export interface ControlContextData<ColumnConfig extends BaseColumnConfig> {
    data: unknown[];
    schema?: TableSchema;
    mergedFields: ColumnConfig[];
    minimalFullLengthFields: Partial<ColumnConfig>[];
}
export interface FieldfulProps<ColumnConfig extends BaseColumnConfig> {
    className?: string;
    data?: QueryResult;
    fields?: Partial<ColumnConfig>[];
    setControlContextData?: (ctx: ControlContextData<ColumnConfig>) => void;
}
export declare const NoneField = "||NoneField||";
export declare const CustomField = "";
interface FieldSubpropsOpts<ColumnConfig extends BaseColumnConfig> {
    fieldTypes?: Record<string, PropType<any>>;
    canChangeField?: boolean;
    canPickNoneField?: boolean;
    noTitle?: boolean;
    noDataType?: boolean;
    hiddenFieldId?: (ps: Record<string, unknown>, ctx: ControlContextData<ColumnConfig>, extras: {
        path: (string | number)[];
    }) => boolean;
}
export declare function getFieldSubprops<ColumnConfig extends BaseColumnConfig>(opts: FieldSubpropsOpts<ColumnConfig>): Record<string, PropType<any>>;
export declare function buildFieldsPropType<ColumnConfig extends BaseColumnConfig, Props extends FieldfulProps<ColumnConfig>>({ advanced, displayName, minimalValue, ...opts }: {
    advanced?: boolean;
    displayName?: string;
    minimalValue?: ContextDependentConfig<Props, any>;
} & FieldSubpropsOpts<ColumnConfig>): PropType<Props>;
export {};
