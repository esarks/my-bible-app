'use strict';

var registerComponent = require('@plasmicapp/host/registerComponent');
require('@plasmicapp/host/registerGlobalContext');
var luxonParser = require('@plasmicpkgs/luxon-parser');
var dayjs = require('dayjs');
var customParseFormat = require('dayjs/plugin/customParseFormat');
var React = require('react');
var antd = require('antd');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var registerComponent__default = /*#__PURE__*/_interopDefault(registerComponent);
var dayjs__default = /*#__PURE__*/_interopDefault(dayjs);
var customParseFormat__default = /*#__PURE__*/_interopDefault(customParseFormat);
var React__default = /*#__PURE__*/_interopDefault(React);

function registerComponentHelper(loader, component, meta) {
  if (loader) {
    loader.registerComponent(component, meta);
  } else {
    registerComponent__default.default(component, meta);
  }
}
function ensure(x) {
  if (x === null || x === void 0) {
    throw new Error("Expected non-null or non-undefined value");
  }
  return x;
}
function isOneOf(elem, arr) {
  return arr.includes(elem);
}
function maybe(x, f) {
  if (x === void 0 || x === null)
    return void 0;
  return f(x);
}
function isValidIsoDate(str, extendedOnly = false) {
  if (!str)
    return false;
  if (typeof str !== "string")
    return false;
  if (str.includes(" "))
    return false;
  if (str.length === 10) {
    if (extendedOnly)
      return false;
    dayjs__default.default.extend(customParseFormat__default.default);
    return dayjs__default.default(str, "YYYY-MM-DD", true).isValid();
  }
  if (!dayjs__default.default(str).isValid())
    return false;
  if (isNaN(new Date(str).getTime()))
    return false;
  return true;
}
function isLikeDate(value) {
  const parsed = luxonParser.parseDate(value);
  return parsed ? true : false;
}
function isLikeImage(value) {
  return typeof value === "string" ? value.match(/\.(png|jpg|jpeg|gif|svg|webp|avif|ico|bmp|tiff)$/i) : false;
}
function isLikeColor(value) {
  if (typeof value !== "string")
    return false;
  const hex = /^#?([0-9a-fA-F]{3}([0-9a-fA-F]{3})?|[0-9a-fA-F]{4}([0-9a-fA-F]{4})?)$/;
  const rgba = /^rgba?\((\s*\d+\s*,\s*\d+\s*,\s*\d+\s*(,\s*(1|0?(\.\d+)?))?\s*)\)$/;
  const cssNamed = /^(aliceblue|antiquewhite|aqua|aquamarine|azure|beige|bisque|black|blanchedalmond|blue|blueviolet|brown|burlywood|cadetblue|chartreuse|chocolate|coral|cornflowerblue|cornsilk|crimson|cyan|darkblue|darkcyan|darkgoldenrod|darkgray|darkgreen|darkgrey|darkkhaki|darkmagenta|darkolivegreen|darkorange|darkorchid|darkred|darksalmon|darkseagreen|darkslateblue|darkslategray|darkslategrey|darkturquoise|darkviolet|deeppink|deepskyblue|dimgray|dimgrey|dodgerblue|firebrick|floralwhite|forestgreen|fuchsia|gainsboro|ghostwhite|gold|goldenrod|gray|green|greenyellow|grey|honeydew|hotpink|indianred|indigo|ivory|khaki|lavender|lavenderblush|lawngreen|lemonchiffon|lightblue|lightcoral|lightcyan|lightgoldenrodyellow|lightgray|lightgreen|lightgrey|lightpink|lightsalmon|lightseagreen|lightskyblue|lightslategray|lightslategrey|lightsteelblue|lightyellow|lime|limegreen|linen|magenta|maroon|mediumaquamarine|mediumblue|mediumorchid|mediumpurple|mediumseagreen|mediumslateblue|mediumspringgreen|mediumturquoise|mediumvioletred|midnightblue|mintcream|mistyrose|moccasin|navajowhite|navy|oldlace|olive|olivedrab|orange|orangered|orchid|palegoldenrod|palegreen|paleturquoise|palevioletred|papayawhip|peachpuff|peru|pink|plum|powderblue|purple|rebeccapurple|red|rosybrown|royalblue|saddlebrown|salmon|sandybrown|seagreen|seashell|sienna|silver|skyblue|slateblue|slategray|slategrey|snow|springgreen|steelblue|tan|teal|thistle|tomato|turquoise|violet|wheat|white|whitesmoke|yellow|yellowgreen)$/;
  const hsla = /^hsla?\((\s*\d+(\.\d+)?\s*,\s*\d+(\.\d+)?%\s*,\s*\d+(\.\d+)?%\s*(,\s*(1|0?\.\d+))?\s*)\)$/;
  const cmyk = /^cmyka?\((\s*\d+(\.\d+)?%\s*,\s*\d+(\.\d+)?%\s*,\s*\d+(\.\d+)?%\s*,\s*\d+(\.\d+)?%\s*(,\s*(1|0?\.\d+))?\s*)\)$/;
  const hsv = /^hsva?\((\s*\d+(\.\d+)?\s*,\s*\d+(\.\d+)?%\s*,\s*\d+(\.\d+)?%\s*(,\s*(1|0?\.\d+))?\s*)\)$/;
  if (value.match(hex) || value.match(rgba) || value.match(cssNamed) || value.match(hsla) || value.match(cmyk) || value.match(hsv)) {
    return true;
  }
  return false;
}
function isInteractable(target) {
  if (["A", "BUTTON", "INPUT", "TEXTAREA", "SELECT"].includes(target.tagName)) {
    return true;
  }
  if (target.contentEditable === "true") {
    return true;
  }
  return false;
}
function ensureArray(xs) {
  return Array.isArray(xs) ? xs : [xs];
}
const mkShortId = () => `${Math.random()}`;
function withoutFalsey(xs) {
  return xs.filter((x) => !!x);
}
class ErrorBoundary extends React__default.default.Component {
  constructor() {
    super(...arguments);
    this.state = { hasError: false, errorInfo: "" };
  }
  static getDerivedStateFromError(error) {
    return { hasError: true, errorInfo: error.message };
  }
  componentDidCatch(error, errorInfo) {
    console.log(error, errorInfo);
  }
  componentDidUpdate(prevProps, prevState) {
    if (prevProps.canvasEnvId !== this.props.canvasEnvId && prevState.hasError) {
      this.setState({ hasError: false });
    }
  }
  render() {
    if (this.state.hasError) {
      return /* @__PURE__ */ React__default.default.createElement(
        antd.Result,
        {
          status: "error",
          title: "Something went wrong.",
          extra: this.state.errorInfo
        }
      );
    }
    return this.props.children;
  }
}

exports.ErrorBoundary = ErrorBoundary;
exports.ensure = ensure;
exports.ensureArray = ensureArray;
exports.isInteractable = isInteractable;
exports.isLikeColor = isLikeColor;
exports.isLikeDate = isLikeDate;
exports.isLikeImage = isLikeImage;
exports.isOneOf = isOneOf;
exports.isValidIsoDate = isValidIsoDate;
exports.maybe = maybe;
exports.mkShortId = mkShortId;
exports.registerComponentHelper = registerComponentHelper;
exports.withoutFalsey = withoutFalsey;
//# sourceMappingURL=utils-65c486f0.cjs.js.map
