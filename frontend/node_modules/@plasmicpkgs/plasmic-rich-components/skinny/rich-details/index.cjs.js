'use strict';

var formatting = require('../formatting-6dc71cdd.cjs.js');
var utils = require('../utils-65c486f0.cjs.js');
var dataSources = require('@plasmicapp/data-sources');
var antd = require('antd');
var React = require('react');
require('@plasmicpkgs/luxon-parser');
require('lodash/get');
require('@plasmicapp/host/registerComponent');
require('@plasmicapp/host/registerGlobalContext');
require('dayjs');
require('dayjs/plugin/customParseFormat');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var React__default = /*#__PURE__*/_interopDefault(React);

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
function RichDetails(props) {
  var _a;
  const {
    className,
    data: rawData,
    size,
    bordered,
    layout,
    column = 2
  } = props;
  const data = dataSources.useNormalizedData(rawData);
  const { columnDefinitions } = useColumnDefinitions(data, props);
  if (!data || !((_a = data.data) == null ? void 0 : _a[0])) {
    return /* @__PURE__ */ React__default.default.createElement(antd.Empty, { className, image: antd.Empty.PRESENTED_IMAGE_SIMPLE });
  }
  const row = data.data[0];
  return /* @__PURE__ */ React__default.default.createElement(
    antd.Descriptions,
    {
      className,
      size,
      bordered,
      layout,
      column: {
        xs: 1,
        sm: 1,
        md: column
      }
    },
    columnDefinitions.map((col) => /* @__PURE__ */ React__default.default.createElement(antd.Descriptions.Item, { label: col.title, key: col.key, span: col.span }, col.render(row)))
  );
}
function useColumnDefinitions(data, props) {
  const { fields, setControlContextData } = props;
  return React__default.default.useMemo(() => {
    const schema = data == null ? void 0 : data.schema;
    if (!data || !schema) {
      return { normalized: [], columnDefinitions: [] };
    }
    const { mergedFields, minimalFullLengthFields } = dataSources.deriveFieldConfigs(
      fields != null ? fields : [],
      schema,
      (field) => __spreadValues({
        key: utils.mkShortId(),
        isHidden: false,
        dataType: "auto"
      }, field && {
        key: field.id,
        fieldId: field.id,
        title: field.label || field.id,
        expr: (currentItem) => currentItem[field.id]
      })
    );
    setControlContextData == null ? void 0 : setControlContextData(__spreadProps(__spreadValues({}, data), { mergedFields, minimalFullLengthFields }));
    const normalized = mergedFields;
    const columnDefinitions = normalized.filter((cconfig) => !cconfig.isHidden).map((cconfig, _columnIndex, _columnsArray) => {
      const columnDefinition = {
        dataIndex: cconfig.fieldId,
        title: cconfig.title,
        key: cconfig.key,
        span: cconfig.span,
        render: (record) => {
          return formatting.renderValue(record, cconfig);
        }
      };
      return columnDefinition;
    });
    return { normalized, columnDefinitions };
  }, [fields, data, setControlContextData]);
}

function registerRichDetails(loader) {
  utils.registerComponentHelper(loader, RichDetails, {
    name: "hostless-rich-details",
    displayName: "Data details",
    defaultStyles: {
      width: "stretch",
      maxHeight: "100%"
    },
    props: {
      data: {
        type: "dataSourceOpData",
        description: "The data to display"
      },
      fields: formatting.buildFieldsPropType({
        fieldTypes: {
          span: {
            type: "number",
            displayName: "Number of columns to span",
            defaultValueHint: 1
          }
        }
      }),
      layout: {
        displayName: "Layout",
        type: "choice",
        options: [
          { value: "horizontal", label: "Horizontal" },
          { value: "vertical", label: "Vertical" }
        ],
        defaultValueHint: "horizontal"
      },
      column: {
        displayName: "Items per row",
        type: "number",
        description: "Number of items to display per row",
        defaultValueHint: 2
      },
      size: {
        displayName: "Spacing",
        type: "choice",
        options: [
          { value: "small", label: "Small" },
          { value: "middle", label: "Medium" },
          { value: "default", label: "Large" }
        ],
        defaultValueHint: "default"
      },
      bordered: {
        displayName: "Show borders?",
        type: "boolean",
        defaultValue: true
      }
    },
    importPath: "@plasmicpkgs/plasmic-rich-components/skinny/rich-details",
    importName: "RichDetails"
  });
}

exports.RichDetails = RichDetails;
exports.registerRichDetails = registerRichDetails;
//# sourceMappingURL=index.cjs.js.map
