{"version":3,"file":"index.esm.js","sources":["../../src/rich-details/RichDetails.tsx","../../src/rich-details/index.tsx"],"sourcesContent":["import {\n  deriveFieldConfigs,\n  NormalizedData,\n  useNormalizedData,\n} from \"@plasmicapp/data-sources\";\nimport { Descriptions, Empty } from \"antd\";\nimport React from \"react\";\nimport { BaseColumnConfig, FieldfulProps } from \"../field-mappings\";\nimport { renderValue } from \"../formatting\";\nimport { mkShortId } from \"../utils\";\n\nexport interface RichDetailsProps extends FieldfulProps<DetailsColumnConfig> {\n  size?: \"small\" | \"middle\" | \"default\";\n  bordered?: boolean;\n  layout?: \"horizontal\" | \"vertical\";\n  column?: number;\n}\n\nexport function RichDetails(props: RichDetailsProps) {\n  const {\n    className,\n    data: rawData,\n    size,\n    bordered,\n    layout,\n    column = 2,\n  } = props;\n  const data = useNormalizedData(rawData);\n  const { columnDefinitions } = useColumnDefinitions(data, props);\n  if (!data || !data.data?.[0]) {\n    return <Empty className={className} image={Empty.PRESENTED_IMAGE_SIMPLE} />;\n  }\n  const row = data.data[0];\n  return (\n    <Descriptions\n      className={className}\n      size={size}\n      bordered={bordered}\n      layout={layout}\n      column={{\n        xs: 1,\n        sm: 1,\n        md: column,\n      }}\n    >\n      {columnDefinitions.map((col) => (\n        <Descriptions.Item label={col.title} key={col.key} span={col.span}>\n          {col.render(row)}\n        </Descriptions.Item>\n      ))}\n    </Descriptions>\n  );\n}\n\nexport type DetailsColumnConfig = BaseColumnConfig & {\n  span?: number;\n};\n\nfunction useColumnDefinitions(\n  data: NormalizedData | undefined,\n  props: React.ComponentProps<typeof RichDetails>\n) {\n  const { fields, setControlContextData } = props;\n  return React.useMemo(() => {\n    const schema = data?.schema;\n    if (!data || !schema) {\n      return { normalized: [], columnDefinitions: [] };\n    }\n    const { mergedFields, minimalFullLengthFields } =\n      deriveFieldConfigs<DetailsColumnConfig>(\n        fields ?? [],\n        schema,\n        (field) => ({\n          key: mkShortId(),\n          isHidden: false,\n          dataType: \"auto\" as const,\n          ...(field && {\n            key: field.id,\n            fieldId: field.id,\n            title: field.label || field.id,\n            expr: (currentItem) => currentItem[field.id],\n          }),\n        })\n      );\n    setControlContextData?.({ ...data, mergedFields, minimalFullLengthFields });\n    const normalized = mergedFields;\n    const columnDefinitions = normalized\n      .filter((cconfig) => !cconfig.isHidden)\n      .map((cconfig, _columnIndex, _columnsArray) => {\n        const columnDefinition = {\n          dataIndex: cconfig.fieldId,\n          title: cconfig.title,\n          key: cconfig.key,\n          span: cconfig.span,\n\n          render: (record: any) => {\n            return renderValue(record, cconfig);\n          },\n        };\n\n        return columnDefinition;\n      });\n    return { normalized, columnDefinitions };\n  }, [fields, data, setControlContextData]);\n}\n","import { buildFieldsPropType } from \"../field-mappings\";\nimport { Registerable, registerComponentHelper } from \"../utils\";\nimport {\n  DetailsColumnConfig,\n  RichDetails,\n  RichDetailsProps,\n} from \"./RichDetails\";\n\nexport * from \"./RichDetails\";\n\nexport function registerRichDetails(loader?: Registerable) {\n  registerComponentHelper(loader, RichDetails, {\n    name: \"hostless-rich-details\",\n    displayName: \"Data details\",\n    defaultStyles: {\n      width: \"stretch\",\n      maxHeight: \"100%\",\n    },\n    props: {\n      data: {\n        type: \"dataSourceOpData\" as any,\n        description: \"The data to display\",\n      },\n      fields: buildFieldsPropType<DetailsColumnConfig, RichDetailsProps>({\n        fieldTypes: {\n          span: {\n            type: \"number\",\n            displayName: \"Number of columns to span\",\n            defaultValueHint: 1,\n          },\n        },\n      }),\n      layout: {\n        displayName: \"Layout\",\n        type: \"choice\",\n        options: [\n          { value: \"horizontal\", label: \"Horizontal\" },\n          { value: \"vertical\", label: \"Vertical\" },\n        ],\n        defaultValueHint: \"horizontal\",\n      },\n      column: {\n        displayName: \"Items per row\",\n        type: \"number\",\n        description: \"Number of items to display per row\",\n        defaultValueHint: 2,\n      },\n      size: {\n        displayName: \"Spacing\",\n        type: \"choice\",\n        options: [\n          { value: \"small\", label: \"Small\" },\n          { value: \"middle\", label: \"Medium\" },\n          { value: \"default\", label: \"Large\" },\n        ],\n        defaultValueHint: \"default\",\n      },\n      bordered: {\n        displayName: \"Show borders?\",\n        type: \"boolean\",\n        defaultValue: true,\n      },\n    },\n    importPath: \"@plasmicpkgs/plasmic-rich-components/skinny/rich-details\",\n    importName: \"RichDetails\",\n  });\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkBO,SAAS,YAAY,KAAyB,EAAA;AAlBrD,EAAA,IAAA,EAAA,CAAA;AAmBE,EAAM,MAAA;AAAA,IACJ,SAAA;AAAA,IACA,IAAM,EAAA,OAAA;AAAA,IACN,IAAA;AAAA,IACA,QAAA;AAAA,IACA,MAAA;AAAA,IACA,MAAS,GAAA,CAAA;AAAA,GACP,GAAA,KAAA,CAAA;AACJ,EAAM,MAAA,IAAA,GAAO,kBAAkB,OAAO,CAAA,CAAA;AACtC,EAAA,MAAM,EAAE,iBAAA,EAAsB,GAAA,oBAAA,CAAqB,MAAM,KAAK,CAAA,CAAA;AAC9D,EAAA,IAAI,CAAC,IAAQ,IAAA,EAAA,CAAC,EAAK,GAAA,IAAA,CAAA,IAAA,KAAL,mBAAY,CAAI,CAAA,CAAA,EAAA;AAC5B,IAAA,uBAAQ,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,EAAM,SAAsB,EAAA,KAAA,EAAO,MAAM,sBAAwB,EAAA,CAAA,CAAA;AAAA,GAC3E;AACA,EAAM,MAAA,GAAA,GAAM,IAAK,CAAA,IAAA,CAAK,CAAC,CAAA,CAAA;AACvB,EACE,uBAAA,KAAA,CAAA,aAAA;AAAA,IAAC,YAAA;AAAA,IAAA;AAAA,MACC,SAAA;AAAA,MACA,IAAA;AAAA,MACA,QAAA;AAAA,MACA,MAAA;AAAA,MACA,MAAQ,EAAA;AAAA,QACN,EAAI,EAAA,CAAA;AAAA,QACJ,EAAI,EAAA,CAAA;AAAA,QACJ,EAAI,EAAA,MAAA;AAAA,OACN;AAAA,KAAA;AAAA,IAEC,iBAAA,CAAkB,IAAI,CAAC,GAAA,yCACrB,YAAa,CAAA,IAAA,EAAb,EAAkB,KAAO,EAAA,GAAA,CAAI,OAAO,GAAK,EAAA,GAAA,CAAI,KAAK,IAAM,EAAA,GAAA,CAAI,QAC1D,GAAI,CAAA,MAAA,CAAO,GAAG,CACjB,CACD,CAAA;AAAA,GACH,CAAA;AAEJ,CAAA;AAMA,SAAS,oBAAA,CACP,MACA,KACA,EAAA;AACA,EAAM,MAAA,EAAE,MAAQ,EAAA,qBAAA,EAA0B,GAAA,KAAA,CAAA;AAC1C,EAAO,OAAA,KAAA,CAAM,QAAQ,MAAM;AACzB,IAAA,MAAM,SAAS,IAAM,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,IAAA,CAAA,MAAA,CAAA;AACrB,IAAI,IAAA,CAAC,IAAQ,IAAA,CAAC,MAAQ,EAAA;AACpB,MAAA,OAAO,EAAE,UAAY,EAAA,EAAI,EAAA,iBAAA,EAAmB,EAAG,EAAA,CAAA;AAAA,KACjD;AACA,IAAM,MAAA,EAAE,YAAc,EAAA,uBAAA,EACpB,GAAA,kBAAA;AAAA,MACE,0BAAU,EAAC;AAAA,MACX,MAAA;AAAA,MACA,CAAC,KAAW,KAAA,cAAA,CAAA;AAAA,QACV,KAAK,SAAU,EAAA;AAAA,QACf,QAAU,EAAA,KAAA;AAAA,QACV,QAAU,EAAA,MAAA;AAAA,OAAA,EACN,KAAS,IAAA;AAAA,QACX,KAAK,KAAM,CAAA,EAAA;AAAA,QACX,SAAS,KAAM,CAAA,EAAA;AAAA,QACf,KAAA,EAAO,KAAM,CAAA,KAAA,IAAS,KAAM,CAAA,EAAA;AAAA,QAC5B,IAAM,EAAA,CAAC,WAAgB,KAAA,WAAA,CAAY,MAAM,EAAE,CAAA;AAAA,OAC7C,CAAA;AAAA,KAEJ,CAAA;AACF,IAAA,qBAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,qBAAA,CAAwB,aAAK,CAAA,cAAA,CAAA,EAAA,EAAA,IAAA,CAAA,EAAL,EAAW,YAAA,EAAc,uBAAwB,EAAA,CAAA,CAAA,CAAA;AACzE,IAAA,MAAM,UAAa,GAAA,YAAA,CAAA;AACnB,IAAA,MAAM,iBAAoB,GAAA,UAAA,CACvB,MAAO,CAAA,CAAC,OAAY,KAAA,CAAC,OAAQ,CAAA,QAAQ,CACrC,CAAA,GAAA,CAAI,CAAC,OAAA,EAAS,cAAc,aAAkB,KAAA;AAC7C,MAAA,MAAM,gBAAmB,GAAA;AAAA,QACvB,WAAW,OAAQ,CAAA,OAAA;AAAA,QACnB,OAAO,OAAQ,CAAA,KAAA;AAAA,QACf,KAAK,OAAQ,CAAA,GAAA;AAAA,QACb,MAAM,OAAQ,CAAA,IAAA;AAAA,QAEd,MAAA,EAAQ,CAAC,MAAgB,KAAA;AACvB,UAAO,OAAA,WAAA,CAAY,QAAQ,OAAO,CAAA,CAAA;AAAA,SACpC;AAAA,OACF,CAAA;AAEA,MAAO,OAAA,gBAAA,CAAA;AAAA,KACR,CAAA,CAAA;AACH,IAAO,OAAA,EAAE,YAAY,iBAAkB,EAAA,CAAA;AAAA,GACtC,EAAA,CAAC,MAAQ,EAAA,IAAA,EAAM,qBAAqB,CAAC,CAAA,CAAA;AAC1C;;AC9FO,SAAS,oBAAoB,MAAuB,EAAA;AACzD,EAAA,uBAAA,CAAwB,QAAQ,WAAa,EAAA;AAAA,IAC3C,IAAM,EAAA,uBAAA;AAAA,IACN,WAAa,EAAA,cAAA;AAAA,IACb,aAAe,EAAA;AAAA,MACb,KAAO,EAAA,SAAA;AAAA,MACP,SAAW,EAAA,MAAA;AAAA,KACb;AAAA,IACA,KAAO,EAAA;AAAA,MACL,IAAM,EAAA;AAAA,QACJ,IAAM,EAAA,kBAAA;AAAA,QACN,WAAa,EAAA,qBAAA;AAAA,OACf;AAAA,MACA,QAAQ,mBAA2D,CAAA;AAAA,QACjE,UAAY,EAAA;AAAA,UACV,IAAM,EAAA;AAAA,YACJ,IAAM,EAAA,QAAA;AAAA,YACN,WAAa,EAAA,2BAAA;AAAA,YACb,gBAAkB,EAAA,CAAA;AAAA,WACpB;AAAA,SACF;AAAA,OACD,CAAA;AAAA,MACD,MAAQ,EAAA;AAAA,QACN,WAAa,EAAA,QAAA;AAAA,QACb,IAAM,EAAA,QAAA;AAAA,QACN,OAAS,EAAA;AAAA,UACP,EAAE,KAAA,EAAO,YAAc,EAAA,KAAA,EAAO,YAAa,EAAA;AAAA,UAC3C,EAAE,KAAA,EAAO,UAAY,EAAA,KAAA,EAAO,UAAW,EAAA;AAAA,SACzC;AAAA,QACA,gBAAkB,EAAA,YAAA;AAAA,OACpB;AAAA,MACA,MAAQ,EAAA;AAAA,QACN,WAAa,EAAA,eAAA;AAAA,QACb,IAAM,EAAA,QAAA;AAAA,QACN,WAAa,EAAA,oCAAA;AAAA,QACb,gBAAkB,EAAA,CAAA;AAAA,OACpB;AAAA,MACA,IAAM,EAAA;AAAA,QACJ,WAAa,EAAA,SAAA;AAAA,QACb,IAAM,EAAA,QAAA;AAAA,QACN,OAAS,EAAA;AAAA,UACP,EAAE,KAAA,EAAO,OAAS,EAAA,KAAA,EAAO,OAAQ,EAAA;AAAA,UACjC,EAAE,KAAA,EAAO,QAAU,EAAA,KAAA,EAAO,QAAS,EAAA;AAAA,UACnC,EAAE,KAAA,EAAO,SAAW,EAAA,KAAA,EAAO,OAAQ,EAAA;AAAA,SACrC;AAAA,QACA,gBAAkB,EAAA,SAAA;AAAA,OACpB;AAAA,MACA,QAAU,EAAA;AAAA,QACR,WAAa,EAAA,eAAA;AAAA,QACb,IAAM,EAAA,SAAA;AAAA,QACN,YAAc,EAAA,IAAA;AAAA,OAChB;AAAA,KACF;AAAA,IACA,UAAY,EAAA,0DAAA;AAAA,IACZ,UAAY,EAAA,aAAA;AAAA,GACb,CAAA,CAAA;AACH;;;;"}