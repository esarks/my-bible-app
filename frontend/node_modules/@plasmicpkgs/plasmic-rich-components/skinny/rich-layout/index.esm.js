import { u as useIsClient, i as isLight, c as capitalize } from '../common-8cca2977.esm.js';
import { r as registerComponentHelper } from '../utils-c32bd7ed.esm.js';
import { LogoutOutlined } from '@ant-design/icons';
import { ProLayout, ProConfigProvider } from '@ant-design/pro-components';
import { useDataEnv, usePlasmicLink } from '@plasmicapp/host';
import { theme, ConfigProvider, Dropdown } from 'antd';
import React, { useRef, useState, useEffect } from 'react';
import '@ctrl/tinycolor';
import '@plasmicapp/host/registerComponent';
import '@plasmicapp/host/registerGlobalContext';
import '@plasmicpkgs/luxon-parser';
import 'dayjs';
import 'dayjs/plugin/customParseFormat';

var __defProp$2 = Object.defineProperty;
var __defProps$1 = Object.defineProperties;
var __getOwnPropDescs$1 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols$2 = Object.getOwnPropertySymbols;
var __hasOwnProp$2 = Object.prototype.hasOwnProperty;
var __propIsEnum$2 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$2 = (obj, key, value) => key in obj ? __defProp$2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues$2 = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$2.call(b, prop))
      __defNormalProp$2(a, prop, b[prop]);
  if (__getOwnPropSymbols$2)
    for (var prop of __getOwnPropSymbols$2(b)) {
      if (__propIsEnum$2.call(b, prop))
        __defNormalProp$2(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps$1 = (a, b) => __defProps$1(a, __getOwnPropDescs$1(b));
const AnchorLink = React.forwardRef(function AnchorLink2(props, ref) {
  return /* @__PURE__ */ React.createElement("a", __spreadProps$1(__spreadValues$2({}, props), { ref }));
});

var __defProp$1 = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols$1 = Object.getOwnPropertySymbols;
var __hasOwnProp$1 = Object.prototype.hasOwnProperty;
var __propIsEnum$1 = Object.prototype.propertyIsEnumerable;
var __defNormalProp$1 = (obj, key, value) => key in obj ? __defProp$1(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues$1 = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$1.call(b, prop))
      __defNormalProp$1(a, prop, b[prop]);
  if (__getOwnPropSymbols$1)
    for (var prop of __getOwnPropSymbols$1(b)) {
      if (__propIsEnum$1.call(b, prop))
        __defNormalProp$1(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp$1.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols$1)
    for (var prop of __getOwnPropSymbols$1(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum$1.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
function omitUndefined(x) {
  return Object.fromEntries(
    Object.entries(x).filter(([k, v]) => v !== void 0)
  );
}
function processNavItems(navMenuItems) {
  return navMenuItems.filter((item) => item.condition === void 0 || item.condition).map((item) => __spreadProps(__spreadValues$1({}, item), {
    // We fill a default path because otherwise the item doesn't appear at all.
    path: item.path || "/",
    routes: item.routes ? processNavItems(item.routes) : void 0
  }));
}
const baseStyles = `
.ant-pro-layout-bg-list {
  display: none;
}
.ant-pro-layout {
  display: flex;
  width: 100%;
}
.ant-pro-layout .ant-pro-layout-content {
  padding: 0;
}
`;
function RichLayout(_a) {
  var _b = _a, {
    children,
    navMenuItems,
    rootUrl = "/",
    actionsChildren,
    footerChildren,
    avatarLabel,
    avatarImage,
    showAvatarMenu,
    className,
    simpleNavTheme,
    logo,
    logoElement
  } = _b, layoutProps = __objRest(_b, [
    "children",
    "navMenuItems",
    "rootUrl",
    "actionsChildren",
    "footerChildren",
    "avatarLabel",
    "avatarImage",
    "showAvatarMenu",
    "className",
    "simpleNavTheme",
    "logo",
    "logoElement"
  ]);
  var _a2, _b2, _c, _d, _e;
  const $ctx = useDataEnv();
  const ref = useRef(null);
  const isClient = useIsClient();
  const [pathname, setPathname] = useState(void 0);
  const [openKeys, setOpenKeys] = useState([]);
  const [ready, setReady] = useState(false);
  useEffect(() => {
    setTimeout(() => {
      setReady(true);
    }, 500);
    if (typeof location !== "undefined") {
      setPathname(location.pathname);
    }
  }, []);
  useEffect(() => {
    if (!ready)
      return;
    if (!ref.current)
      return;
    const selectedSubmenus = Array.from(
      ref.current.querySelectorAll(
        "ul > li.ant-menu-submenu.ant-menu-submenu-selected > div"
      )
    ).map((el) => {
      var _a3;
      return (_a3 = el.getAttribute("data-menu-id")) == null ? void 0 : _a3.split("/").pop();
    }).filter((i) => i).map((i) => `/${i}`) || [];
    setOpenKeys(selectedSubmenus);
  }, [ready]);
  const PlasmicLink = (_b2 = (_a2 = usePlasmicLink) == null ? void 0 : _a2()) != null ? _b2 : AnchorLink;
  const { token } = theme.useToken();
  const origTextColor = token.colorTextBase;
  function getNavBgColor() {
    var _a3, _b3;
    const scheme = (_a3 = simpleNavTheme == null ? void 0 : simpleNavTheme.scheme) != null ? _a3 : "default";
    switch (scheme) {
      case "primary":
        return token.colorPrimary;
      case "dark":
        return "#011528";
      case "custom":
        return (_b3 = simpleNavTheme == null ? void 0 : simpleNavTheme.customBgColor) != null ? _b3 : token.colorBgBase;
      case "light":
        return "#fff";
      case "default":
        return token.colorBgBase || "#fff";
    }
  }
  const navBgColor = getNavBgColor();
  const isNavBgLight = isLight(navBgColor);
  const isOrigTextLight = isLight(origTextColor);
  const navTextColor = isNavBgLight !== isOrigTextLight ? void 0 : "";
  if (!isClient) {
    return null;
  }
  const layoutColorOverrides = isNavBgLight ? void 0 : {
    colorBgCollapsedButton: navBgColor,
    colorTextCollapsedButtonHover: "rgba(255,255,255,0.85)",
    colorTextCollapsedButton: "rgba(255,255,255,0.65)",
    colorMenuBackground: navBgColor,
    colorBgMenuItemCollapsedHover: "rgba(0,0,0,0.06)",
    colorBgMenuItemCollapsedSelected: "rgba(0,0,0,0.15)",
    colorBgMenuItemCollapsedElevated: "rgba(0,0,0,0.85)",
    colorMenuItemDivider: "rgba(255,255,255,0.15)",
    colorBgMenuItemHover: "rgba(0,0,0,0.06)",
    colorBgMenuItemSelected: "rgba(0,0,0,0.15)",
    colorTextMenuSelected: "#fff",
    colorTextMenuItemHover: "rgba(255,255,255,0.75)",
    colorTextMenu: "rgba(255,255,255,0.75)",
    colorTextMenuSecondary: "rgba(255,255,255,0.65)",
    colorTextMenuTitle: "rgba(255,255,255,0.95)",
    colorTextMenuActive: "rgba(255,255,255,0.95)",
    colorTextSubMenuSelected: "#fff"
  };
  return /* @__PURE__ */ React.createElement("div", { ref, className, style: { display: "flex" } }, /* @__PURE__ */ React.createElement("style", null, baseStyles), /* @__PURE__ */ React.createElement(
    ProLayout,
    __spreadProps(__spreadValues$1({}, layoutProps), {
      pageTitleRender: () => "",
      logo: logo != null ? logo : logoElement,
      headerRender: (_props, defaultDom) => /* @__PURE__ */ React.createElement(
        ConfigProvider,
        {
          theme: { token: omitUndefined({ colorTextBase: navTextColor }) }
        },
        /* @__PURE__ */ React.createElement(ProConfigProvider, { dark: !isNavBgLight }, defaultDom)
      ),
      token: {
        header: omitUndefined(__spreadValues$1({
          colorBgHeader: navBgColor
        }, layoutColorOverrides)),
        // Ideally, we'd do something similar to headerRender above, and just specify general dark mode to specify
        // whether all components/text should be light.
        // But for some reason it doesn't work, causing the bg color to be ignored (just the default dark Menu color),
        // *and* the text is just dark as well.
        // Haven't yet been able to unravel the pro components code to figure out the proper way to do this, so just
        // bluntly specifying tokens here, as recommended in some GitHub issue.
        sider: omitUndefined(__spreadValues$1({
          colorMenuBackground: navBgColor
        }, layoutColorOverrides))
      },
      layout: (_c = layoutProps.layout) != null ? _c : "top",
      fixedHeader: (_d = layoutProps.fixedHeader) != null ? _d : false,
      fixSiderbar: (
        // Doesn't stretch full height if you set this to false and you're in mix mode.
        layoutProps.layout === "mix" ? void 0 : (_e = layoutProps.fixSiderbar) != null ? _e : false
      ),
      splitMenus: layoutProps.layout === "mix",
      route: {
        path: rootUrl,
        routes: navMenuItems ? processNavItems(navMenuItems) : void 0
      },
      location: {
        pathname
      },
      menu: {
        // collapsedShowGroupTitle: true,
        defaultOpenAll: false
        // hideMenuWhenCollapsed: true,
      },
      avatarProps: showAvatarMenu ? {
        src: avatarImage,
        size: "small",
        title: avatarLabel,
        render: (_props, dom) => {
          return /* @__PURE__ */ React.createElement(
            Dropdown,
            {
              menu: {
                items: [
                  {
                    key: "logout",
                    icon: /* @__PURE__ */ React.createElement(LogoutOutlined, null),
                    label: "Sign out"
                  }
                ]
              }
            },
            dom
          );
        }
      } : void 0,
      actionsRender: (_props) => {
        return [actionsChildren];
      },
      menuFooterRender: (props) => {
        if (props == null ? void 0 : props.collapsed)
          return void 0;
        return footerChildren;
      },
      onMenuHeaderClick: (e) => console.log(e),
      openKeys,
      onOpenChange: (keys) => keys === false || !ready ? [] : setOpenKeys(keys),
      selectedKeys: [$ctx == null ? void 0 : $ctx.pagePath],
      menuItemRender: (item, dom) => /* @__PURE__ */ React.createElement(PlasmicLink, { href: item.path }, dom),
      headerTitleRender: (logoEl, title, _) => {
        return /* @__PURE__ */ React.createElement(PlasmicLink, { href: rootUrl }, logoEl, title);
      }
    }),
    children
  ));
}

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
function generateNavMenuType(isNested, remainingDepth, displayName, defaultValue) {
  return {
    displayName: displayName ? displayName : "Nested items",
    type: "array",
    defaultValue,
    advanced: isNested,
    itemType: {
      type: "object",
      nameFunc: (item) => item.name || (!displayName ? "Unnamed nested item" : "Unnamed item"),
      fields: __spreadValues({
        path: "href",
        name: "string",
        condition: {
          advanced: true,
          displayName: "Show only if",
          type: "exprEditor"
        }
      }, remainingDepth === 0 ? {} : {
        routes: generateNavMenuType(true, remainingDepth - 1)
      })
    }
  };
}
const richLayoutMeta = {
  name: "hostless-rich-layout",
  displayName: "Rich App Layout",
  props: {
    children: {
      type: "slot",
      unstable__isMainContentSlot: true
    },
    actionsChildren: {
      type: "slot",
      hidePlaceholder: true
    },
    title: {
      displayName: "Title",
      type: "string",
      defaultValue: "App title"
    },
    logo: {
      displayName: "Logo",
      type: "imageUrl",
      hidden: (ps) => !ps.logo
    },
    logoElement: {
      type: "slot",
      displayName: "Logo",
      defaultValue: {
        type: "img",
        src: "https://static1.plasmic.app/fake-logo.svg"
      },
      hidden: (ps) => !!ps.logo
    },
    navMenuItems: generateNavMenuType(false, 2, "Nav menu items", [
      {
        path: "/",
        name: "Home"
      }
    ]),
    layout: {
      displayName: "Layout",
      type: "choice",
      options: ["side", "top", "mix"].map((value) => ({
        value,
        label: capitalize(value)
      })),
      defaultValueHint: "top"
    },
    simpleNavTheme: {
      displayName: "Theme",
      type: "object",
      fields: {
        scheme: {
          type: "choice",
          options: ["default", "primary", "light", "dark", "custom"].map(
            (v) => ({
              label: capitalize(v),
              value: v
            })
          ),
          defaultValueHint: "default"
        },
        customBgColor: {
          type: "color",
          displayName: "Custom color",
          hidden: (props) => {
            var _a;
            return !(((_a = props.simpleNavTheme) == null ? void 0 : _a.scheme) === "custom");
          },
          defaultValue: "#D73B58"
        }
      }
    },
    // Advanced, show later
    /*
    siderMenuType: {
      displayName: "Sidebar mode",
      type: "choice",
      options: ["sub", "group"].map((value) => ({
        value,
        label: capitalize(value),
      })),
      defaultValue: "sub",
    },
    contentWidth: {
      displayName: "Content width",
      type: "choice",
      options: ["Fluid", "Fixed"],
      defaultValueHint: "Fluid",
    },
    */
    fixedHeader: {
      displayName: "Sticky header",
      type: "boolean",
      hidden: (ps) => {
        var _a;
        return ((_a = ps.layout) != null ? _a : "top") !== "top";
      },
      defaultValueHint: false
    },
    fixSiderbar: {
      displayName: "Sticky sidebar",
      type: "boolean",
      hidden: (ps) => {
        var _a;
        return ((_a = ps.layout) != null ? _a : "top") !== "side";
      },
      defaultValueHint: false
    },
    /*
    showAvatarMenu: {
      displayName: "Show avatar",
      type: "boolean",
      defaultValue: true,
    },
    avatarLabel: {
      displayName: "Avatar label",
      type: "string",
      defaultValue: "User Name",
    },
    avatarImage: {
      displayName: "Avatar image",
      type: "imageUrl",
      defaultValue:
        "https://gw.alipayobjects.com/zos/antfincdn/efFD%24IOql2/weixintupian_20170331104822.jpg",
    },
     */
    menu: {
      displayName: "Menu",
      type: "object",
      fields: {
        defaultOpenAll: {
          displayName: "Default open all",
          type: "boolean"
        },
        hideMenuWhenCollapsed: {
          // displayName: "",
          type: "boolean"
        }
      }
    }
  },
  defaultStyles: {
    width: "full-bleed",
    height: "stretch",
    minHeight: "100vh"
  },
  importName: "RichLayout",
  importPath: "@plasmicpkgs/plasmic-rich-components/skinny/rich-layout"
};
function registerRichLayout(loader) {
  registerComponentHelper(loader, RichLayout, richLayoutMeta);
}

export { RichLayout, RichLayout as default, registerRichLayout };
//# sourceMappingURL=index.esm.js.map
