{"version":3,"file":"index.cjs.js","sources":["../../src/rich-list/RichList.tsx","../../src/rich-list/index.tsx"],"sourcesContent":["import { ActionType } from \"@ant-design/pro-components\";\nimport {\n  deriveFieldConfigs,\n  NormalizedData,\n  useNormalizedData,\n} from \"@plasmicapp/data-sources\";\nimport { Card, Input, List, Tag } from \"antd\";\nimport type { GetRowKey } from \"antd/es/table/interface\";\nimport classNames from \"classnames\";\nimport groupBy from \"lodash/groupBy\";\nimport React, { ReactNode, useRef } from \"react\";\nimport { BaseColumnConfig, FieldfulProps, RowFunc } from \"../field-mappings\";\nimport {\n  deriveKeyOfRow,\n  deriveRowKey,\n  renderActions,\n  tagDataArray,\n  useSortedFilteredData,\n} from \"../field-react-utils\";\nimport { maybeRenderString, multiRenderValue } from \"../formatting\";\nimport {\n  ensure,\n  ensureArray,\n  isInteractable,\n  isLikeImage,\n  maybe,\n  mkShortId,\n} from \"../utils\";\n\n// Avoid csv-stringify, it doesn't directly work in browser without Buffer polyfill.\n\nexport interface Action {\n  type: \"edit\" | \"view\" | \"delete\" | \"custom\";\n  label?: string;\n  moreMenu?: boolean;\n}\n\ninterface RowActionItem {\n  type: \"item\";\n  label: string;\n  onClick: (rowKey: string, row: any) => void;\n}\n\ninterface RowActionMenu {\n  type: \"menu\";\n  label: string;\n  children?: RowActionItem[];\n}\n\ntype RowAction = RowActionItem | RowActionMenu;\n\nexport interface RichListProps extends FieldfulProps<ListColumnConfig> {\n  // Pass through\n  size?: \"default\" | \"large\" | \"small\";\n  header?: ReactNode;\n  footer?: ReactNode;\n\n  bordered?: boolean;\n  pagination?: boolean;\n\n  rowKey?: string | GetRowKey<any>;\n  rowActions?: RowAction[];\n  onRowClick?: (rowKey: string, row: any, event: React.MouseEvent) => void;\n\n  pageSize?: number;\n\n  hideSearch?: boolean;\n\n  /** ListColumnConfig is obsolete for linkTo */\n  linkTo?: ListColumnConfig | ((row: any) => string);\n  image?: ListColumnConfig;\n  title?: ListColumnConfig[];\n  subtitle?: ListColumnConfig[];\n  beforeTitle?: ListColumnConfig[];\n  afterTitle?: ListColumnConfig[];\n  content?: ListColumnConfig[];\n\n  type?: \"grid\" | \"list\";\n}\n\n// Should really be using token colorFillTertiary instead of #8881.\nconst listCss = `\n.plasmic-list--grid .ant-list-items {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));\n  gap: 16px;\n}\n\n.plasmic-list-search {\n  /* Matches RichTable search. */\n  max-width: 200px;\n  margin-bottom: 8px;\n}\n\n.plasmic-list-item-content--unbordered {\n  padding-left: 8px;\n  padding-right: 8px;\n}\n\n.ant-list .plasmic-list-item {\n  align-items: stretch;\n}\n\n.plasmic-list-item--clickable:hover {\n  background-color: #8881;\n}\n\n.plasmic-list-item-image {\n  max-width: 80px;\n  max-height: 80px;\n  aspect-ratio: 1/1;\n  object-fit: cover;\n  border-radius: 8px;\n}\n\n.plasmic-list-item-card {\n  /* Unsure why needed, but cards otherwise can be much narrower. */\n  width: 100%;\n  /* For the body to fill the height, so all cards are the same height. */\n  display: flex;\n  flex-direction: column;\n}\n\n.plasmic-list-item-card > .ant-card-body {\n  flex: 1;\n}\n\n.plasmic-list-item-card-cover {\n  max-height: 300px;\n  aspect-ratio: 1/1;\n  object-fit: cover;\n}\n`;\n\nexport function RichList(props: RichListProps) {\n  const {\n    data: rawData = {\n      data: [],\n      schema: {\n        id: \"inferred\",\n        fields: [\n          {\n            id: \"id\",\n            type: \"string\",\n            readOnly: false,\n          },\n        ],\n      },\n    },\n    type = \"list\",\n    bordered = true,\n\n    className,\n    size,\n    header,\n    footer,\n\n    rowActions = [],\n    title,\n    pageSize = 10,\n    hideSearch,\n    rowKey,\n    pagination = true,\n    onRowClick,\n    ...rest\n  } = props;\n\n  const normalizedData = useNormalizedData(rawData);\n\n  const data = React.useMemo(() => {\n    if (!normalizedData?.data) {\n      return normalizedData;\n    }\n    return { ...normalizedData, data: tagDataArray(normalizedData.data) };\n  }, [normalizedData]);\n\n  const { normalized, finalRoles: roleConfigs } = useRoleDefinitions(\n    data,\n    props\n  );\n\n  const actionRef = useRef<ActionType>();\n\n  // Simply ignore the linkTo if it's not a function.\n  const linkTo = typeof props.linkTo === \"function\" ? props.linkTo : undefined;\n\n  const { finalData, search, setSearch, setSortState } = useSortedFilteredData(\n    data,\n    normalized\n  );\n\n  const actuallyBordered = type === \"list\" ? bordered : false;\n  return (\n    <div className={className}>\n      <style dangerouslySetInnerHTML={{ __html: listCss }} />\n      {!hideSearch && (\n        <Input.Search\n          className={\"plasmic-list-search\"}\n          onChange={(e) => setSearch(e.target.value)}\n          value={search}\n          placeholder={\"Search\"}\n        />\n      )}\n      <List\n        className={classNames({\n          // We use CSS grid instead of the built-in Ant grid which can only define fixed # columns, and only at screen (and not container) breakpoints.\n          \"plasmic-list--grid\": type === \"grid\",\n        })}\n        size={size}\n        header={header}\n        footer={footer}\n        dataSource={finalData}\n        itemLayout={\"horizontal\"}\n        bordered={actuallyBordered}\n        pagination={\n          pagination\n            ? {\n                pageSize: pageSize,\n                showSizeChanger: false,\n              }\n            : false\n        }\n        renderItem={(record, index) => {\n          // Currently, actions are nested inside the list item / card, so can't have both linkTo and actions or else hydration error.\n          // Eventually can fork the Ant components to make the main linkTo area and actions not nest.\n          const actions = renderActions(rowActions, record, data, rowKey);\n          // actions={[\n          //   <SettingOutlined key=\"setting\" />,\n          //   <EditOutlined key=\"edit\" />,\n          //   <EllipsisOutlined key=\"ellipsis\" />,\n          // ]}\n          const image = maybe(\n            maybeRenderString(record, roleConfigs.image?.[0]),\n            (src) => (\n              <img\n                src={src}\n                className={\n                  type === \"list\"\n                    ? \"plasmic-list-item-image\"\n                    : \"plasmic-list-item-card-cover\"\n                }\n              />\n            )\n          );\n          const content = (\n            <ListItemContent\n              bordered={actuallyBordered}\n              image={type === \"list\" ? image : undefined}\n              title={multiRenderValue(record, roleConfigs.title)}\n              subtitle={multiRenderValue(record, roleConfigs.subtitle)}\n              beforeTitle={multiRenderValue(record, roleConfigs.beforeTitle)}\n              afterTitle={multiRenderValue(record, roleConfigs.afterTitle)}\n              content={multiRenderValue(record, roleConfigs.content)}\n            />\n          );\n\n          function makeLinkWrapper() {\n            if ((actions ?? []).length > 0) return undefined;\n            const href = linkTo?.(record);\n            if (!href && !onRowClick) return undefined;\n            const _linkWrapper = (x: ReactNode) => (\n              <a\n                href={href}\n                onClick={(event) => {\n                  const key = deriveKeyOfRow(\n                    record,\n                    deriveRowKey(data, rowKey)\n                  );\n                  if (\n                    key != null &&\n                    !isInteractable(event.target as HTMLElement)\n                  ) {\n                    onRowClick?.(key, record, event);\n                  }\n                }}\n              >\n                {x}\n              </a>\n            );\n            return _linkWrapper;\n          }\n\n          const linkWrapper = makeLinkWrapper();\n\n          const hasLink = !!linkWrapper;\n\n          function maybeLink(x: ReactNode) {\n            return linkWrapper?.(x) ?? x;\n          }\n\n          return type === \"grid\" ? (\n            <List.Item className={\"plasmic-list-item\"}>\n              {maybeLink(\n                <Card\n                  className={\"plasmic-list-item-card\"}\n                  size={\"small\"}\n                  cover={image}\n                  hoverable={hasLink}\n                  actions={actions}\n                >\n                  {content}\n                </Card>\n              )}\n            </List.Item>\n          ) : (\n            maybeLink(\n              <List.Item\n                actions={actions}\n                className={classNames({\n                  \"plasmic-list-item\": true,\n                  \"plasmic-list-item--clickable\": hasLink,\n                })}\n              >\n                {content}\n              </List.Item>\n            )\n          );\n        }}\n      />\n    </div>\n  );\n}\n\nfunction ListItemContent({\n  className,\n  title,\n  subtitle,\n  image,\n  beforeTitle,\n  afterTitle,\n  content,\n  bordered,\n  ...others\n}: {\n  className?: string;\n  title?: ReactNode;\n  subtitle?: ReactNode;\n  image?: ReactNode;\n  beforeTitle?: ReactNode;\n  afterTitle?: ReactNode;\n  content?: ReactNode;\n  bordered?: boolean;\n}) {\n  const prefixCls = \"ant-list\";\n  const classString = classNames(`${prefixCls}-item-meta`, className);\n\n  return (\n    <div\n      {...others}\n      className={classNames(\n        {\n          \"plasmic-list-item-content--unbordered\": !bordered,\n        },\n        classString\n      )}\n    >\n      {image && <div className={`${prefixCls}-item-meta-avatar`}>{image}</div>}\n      <div\n        className={`${prefixCls}-item-meta-content`}\n        style={{ display: \"flex\", flexDirection: \"column\", gap: 4 }}\n      >\n        {beforeTitle && (\n          <div>\n            <Tag>{beforeTitle}</Tag>\n          </div>\n        )}\n        <div style={{ display: \"flex\", gap: 8 }}>\n          {title && (\n            <h4\n              className={`${prefixCls}-item-meta-title`}\n              style={{ margin: 0 }}\n            >\n              {title}\n            </h4>\n          )}\n          {afterTitle && (\n            <div className={`${prefixCls}-item-meta-description`}>\n              {afterTitle}\n            </div>\n          )}\n        </div>\n        {subtitle && (\n          <div className={`${prefixCls}-item-meta-description`}>{subtitle}</div>\n        )}\n        {content && <div>{content}</div>}\n      </div>\n    </div>\n  );\n}\n\ninterface StyleConfig {\n  styles: Record<string, any>;\n  align: \"left\" | \"center\" | \"right\";\n  freeze: \"off\" | \"left\" | \"right\";\n}\n\nconst defaultColumnConfig = (): ListColumnConfig =>\n  ({\n    key: mkShortId(),\n    isEditableExpr: () => false,\n    disableSorting: false,\n    sortByExpr: undefined,\n    isHidden: false,\n    formatting: {\n      styles: {},\n      align: \"left\",\n      freeze: \"off\",\n    },\n    dataType: \"auto\" as const,\n    role: undefined,\n  } as const);\n\nconst roles = [\n  \"content\",\n  \"title\",\n  \"subtitle\",\n  \"beforeTitle\",\n  \"afterTitle\",\n  \"image\",\n  \"unset\",\n] as const;\n\nexport type Role = (typeof roles)[number];\n\nexport type ListColumnConfig = BaseColumnConfig & {\n  isEditableExpr: RowFunc<boolean>;\n  disableSorting: boolean;\n  sortByExpr?: RowFunc<any>;\n  formatting: StyleConfig;\n\n  /**\n   * The default inferred role, not the actual user-set role.\n   */\n  role: undefined | Role | \"unset\";\n};\n\n// This component is different from Table/Details since it has various different roles, so the UX is one of setting the choices for each role rather than a single list of fields.\n//\n// We first infer the defaults for each role.\n// This we always need to do because we want the choices to be 'stable'.\n// If the user sets one of the roles, without setting the others, we don't want to shift things around on the other roles as a result.\n// So the defaults need to always be there (they would only be irrelevant if all roles that would have had defaults were set/overridden by the user).\n//\n// Then, we layer on the user role choices.\n//\n// One UX wart is that unsetting a role will restore the default selection instead of clearing it.\n// User must know to actually set fieldId to none or (for arrays) remove the item.\n// Just another reason to fill in few roles by default.\nfunction useRoleDefinitions(\n  data: NormalizedData | undefined,\n  props: React.ComponentProps<typeof RichList>\n) {\n  const { fields, setControlContextData, rowActions } = props;\n\n  return React.useMemo(() => {\n    const schema = data?.schema;\n    const schemaMap = new Map(data?.schema?.fields.map((f) => [f.id, f]));\n    if (!data || !schema) {\n      return { normalized: [], finalRoles: {} };\n    }\n\n    function tagFieldConfigs(role: Role) {\n      if (role !== \"unset\") {\n        return ensureArray(props[role] ?? []).map((field) => {\n          return {\n            ...field,\n            role,\n          };\n        });\n      } else {\n        return [];\n      }\n    }\n\n    // This is only being computed to get the default role choices.\n    const specifiedFieldsPartial = [\n      ...tagFieldConfigs(\"image\"),\n      ...tagFieldConfigs(\"content\"),\n      ...tagFieldConfigs(\"title\"),\n      ...tagFieldConfigs(\"beforeTitle\"),\n      ...tagFieldConfigs(\"afterTitle\"),\n      ...tagFieldConfigs(\"subtitle\"),\n    ];\n\n    function doDeriveFieldConfigs(mode: \"existing\" | \"defaults\") {\n      return deriveFieldConfigs<ListColumnConfig>(\n        mode === \"defaults\" ? [] : specifiedFieldsPartial,\n        schema,\n        (field) => ({\n          ...defaultColumnConfig(),\n          ...(field && {\n            key: field.id,\n            fieldId: field.id,\n            title: field.label || field.id,\n            // undefined means not yet determined in this routine, not 'unset'\n            role: undefined,\n            expr: (currentItem) => currentItem[field.id],\n          }),\n        })\n      );\n    }\n\n    // Now we derive the defaults.\n    //\n    // We always start from a blank slate for this. We want stability - we don't want a situation where we are constantly shifting around the defaults based on what else the user has set.\n    //\n    // For instance,\n    // (1) we derive `city` to be content,\n    // (2) user sets `city` as title,\n    // (3) we now derive a different content because `city` is used.\n    const {\n      mergedFields: defaultMergedFields,\n      minimalFullLengthFields: defaultMinimalFullLengthFields,\n    } = doDeriveFieldConfigs(\"defaults\");\n\n    // Find a good default image field.\n    // Filter mergedFields where there are mostly values (in the sampleRows) that are a string that looks like a URL or path to an image file.\n    // Of these, prefer the one with a name like image, picture, pic, img, avatar, profile, photo, icon.\n    // Otherwise, prefer the one with a title with that substring.\n    // Otherwise, pick any remaining one.\n    if (\n      data.data.length > 0 &&\n      !defaultMergedFields.some((field) => field.role === \"image\")\n    ) {\n      const sampleRows = Array.from(\n        new Set(\n          [0, 1, 2, 3, 4, 5, 6, 7, 8, 9].map((i) =>\n            Math.round((i / 9) * (data.data.length - 1))\n          )\n        )\n      ).map((i) => data.data[i]);\n      const imageFieldCandidates = defaultMergedFields.filter(\n        (field) =>\n          !field.role &&\n          sampleRows.filter(\n            (row) => field.fieldId && isLikeImage(row[field.fieldId])\n          ).length >=\n            sampleRows.length / 2\n      );\n      const imageField =\n        imageFieldCandidates.find((f) =>\n          f.fieldId?.match(\n            /^(image|picture|pic|img|avatar|profile|photo|icon)$/i\n          )\n        ) ??\n        imageFieldCandidates.find((f) =>\n          f.fieldId?.match(\n            /.*(image|picture|pic|img|avatar|profile|photo|icon).*/i\n          )\n        ) ??\n        imageFieldCandidates[0];\n      if (imageField) {\n        imageField.role = \"image\";\n      }\n    }\n\n    // Find a good default title field, just based on the field name.\n    if (!defaultMergedFields.some((field) => field.role === \"title\")) {\n      const titleField = defaultMergedFields.find(\n        (field) =>\n          !field.role &&\n          field.fieldId\n            ?.toLowerCase()\n            .match(/^(title|name|first[ _-]?name|full[ _-]?name)$/)\n      );\n      if (titleField) {\n        titleField.role = \"title\";\n      }\n    }\n\n    // Find a good default content field - just any remaining text field.\n    if (!defaultMergedFields.some((field) => field.role === \"content\")) {\n      const contentField = defaultMergedFields.find(\n        (field) =>\n          !field.role &&\n          field.fieldId &&\n          schemaMap.get(field.fieldId)?.type === \"string\"\n      );\n      if (contentField) {\n        contentField.role = \"content\";\n      }\n    }\n\n    const fieldIdToDefaultRole = new Map(\n      defaultMergedFields.map((f) => [f.fieldId, f.role])\n    );\n    for (const f of defaultMinimalFullLengthFields) {\n      f.role = fieldIdToDefaultRole.get(f.fieldId);\n    }\n\n    // Now we have the defaults!\n    //\n    // We once again derive field configs, this time using existing props.\n    // Then we add on the derived defaults for the \"real merged\" fields.\n    //\n    // Note this is kind of an awkward/wasteful use of deriveFieldConfigs since it was more for table columns originally, and this by-role usage is a different shape of problem. We're mainly using it to fill in / \"inflate\" the additional settings on these FieldConfigs. Haven't yet bothered finding a better utility interface.\n    const { mergedFields, minimalFullLengthFields } =\n      doDeriveFieldConfigs(\"existing\");\n\n    const minimalFullLengthFieldsWithDefaults = [\n      ...minimalFullLengthFields.filter((f) => f.role && f.role !== \"unset\"),\n      ...defaultMinimalFullLengthFields.filter(\n        (f) => f.role && f.role !== \"unset\" && !props[f.role]\n      ),\n    ];\n    const mergedFieldsWithDefaults = [\n      ...mergedFields.filter((f) => f.role && f.role !== \"unset\"),\n      ...defaultMergedFields.filter(\n        (f) => f.role && f.role !== \"unset\" && !props[f.role]\n      ),\n    ];\n\n    // We now get by-role grouping which is needed by the component.\n    const roleConfigs = ensure(\n      groupBy(mergedFieldsWithDefaults, (f) => f.role)\n    );\n\n    const finalRoles: Partial<Record<Role, ListColumnConfig[]>> = {};\n    for (const role of roles) {\n      if (role !== \"unset\") {\n        finalRoles[role] = maybe(props[role], ensureArray) ?? roleConfigs[role];\n      }\n    }\n\n    setControlContextData?.({\n      ...data,\n      mergedFields: mergedFieldsWithDefaults,\n      minimalFullLengthFields: minimalFullLengthFieldsWithDefaults,\n    });\n\n    const normalized = mergedFieldsWithDefaults;\n    return { normalized, finalRoles };\n  }, [fields, data, setControlContextData, rowActions]);\n}\n","import { ComponentMeta } from \"@plasmicapp/host/registerComponent\";\nimport {\n  commonProps,\n  dataProp,\n  onRowClickProp,\n  roleProp,\n  rowActionsProp,\n} from \"../common-prop-types\";\nimport { Registerable, registerComponentHelper } from \"../utils\";\nimport { RichList, RichListProps } from \"./RichList\";\n\nexport * from \"./RichList\";\nexport default RichList;\nconst richListMeta: ComponentMeta<RichListProps> = {\n  name: \"hostless-rich-list\",\n  displayName: \"Data List\",\n  defaultStyles: {\n    width: \"stretch\",\n    padding: \"16px\",\n    maxHeight: \"100%\",\n  },\n  defaultDisplay: \"block\",\n  props: {\n    data: dataProp(),\n    type: {\n      type: \"choice\",\n      options: [\n        { value: \"list\", label: \"List\" },\n        { value: \"grid\", label: \"Grid\" },\n      ],\n      defaultValueHint: \"list\",\n    },\n\n    header: {\n      type: \"slot\",\n      hidePlaceholder: true,\n    },\n    footer: {\n      type: \"slot\",\n      hidePlaceholder: true,\n    },\n\n    title: roleProp({ role: \"title\" }),\n    content: roleProp({ role: \"content\" }),\n    image: roleProp({ role: \"image\", singular: true }),\n    subtitle: roleProp({\n      role: \"subtitle\",\n      advanced: true,\n    }),\n    // Haven't styled these yet!\n    // beforeTitle: roleProp({ role: \"beforeTitle\", advanced: true }),\n    // afterTitle: roleProp({ role: \"afterTitle\", advanced: true }),\n\n    linkTo: {\n      type: \"function\",\n      control: {\n        type: \"href\",\n      },\n      argNames: [\"currentItem\"],\n      argValues: (_props: any, ctx: any) => [ctx?.data?.[0]],\n    } as any,\n\n    onRowClick: onRowClickProp(),\n    rowActions: rowActionsProp(),\n\n    bordered: {\n      type: \"boolean\",\n      defaultValue: true,\n      hidden: (ps) => (ps.type ?? \"list\") !== \"list\",\n    },\n\n    ...commonProps(),\n  },\n  importName: \"RichList\",\n  importPath: \"@plasmicpkgs/plasmic-rich-components/skinny/rich-list\",\n};\n\nexport function registerRichList(loader?: Registerable) {\n  registerComponentHelper(loader, RichList, richListMeta);\n}\n"],"names":["useNormalizedData","React","tagDataArray","useRef","useSortedFilteredData","Input","List","classNames","_a","renderActions","maybe","maybeRenderString","multiRenderValue","deriveKeyOfRow","deriveRowKey","isInteractable","Card","__spreadValues","Tag","mkShortId","ensureArray","deriveFieldConfigs","isLikeImage","ensure","groupBy","dataProp","roleProp","onRowClickProp","rowActionsProp","commonProps","registerComponentHelper"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiFA,MAAM,OAAU,GAAA,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAA,CAAA;AAqDT,SAAS,SAAS,KAAsB,EAAA;AAC7C,EAAA,MA8BI,EA7BF,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,EAAM,OAAU,GAAA;AAAA,MACd,MAAM,EAAC;AAAA,MACP,MAAQ,EAAA;AAAA,QACN,EAAI,EAAA,UAAA;AAAA,QACJ,MAAQ,EAAA;AAAA,UACN;AAAA,YACE,EAAI,EAAA,IAAA;AAAA,YACJ,IAAM,EAAA,QAAA;AAAA,YACN,QAAU,EAAA,KAAA;AAAA,WACZ;AAAA,SACF;AAAA,OACF;AAAA,KACF;AAAA,IACA,IAAO,GAAA,MAAA;AAAA,IACP,QAAW,GAAA,IAAA;AAAA,IAEX,SAAA;AAAA,IACA,IAAA;AAAA,IACA,MAAA;AAAA,IACA,MAAA;AAAA,IAEA,aAAa,EAAC;AAAA,IACd,KAAA;AAAA,IACA,QAAW,GAAA,EAAA;AAAA,IACX,UAAA;AAAA,IACA,MAAA;AAAA,IACA,UAAa,GAAA,IAAA;AAAA,IACb,UAAA;AAAA,GAnKJ,GAqKM,EADC,CAAA,CAAA,SAAA,CACD,EADC,EAAA;AAAA,IA5BH,MAAA;AAAA,IAaA,MAAA;AAAA,IACA,UAAA;AAAA,IAEA,WAAA;AAAA,IACA,MAAA;AAAA,IACA,QAAA;AAAA,IACA,QAAA;AAAA,IAEA,YAAA;AAAA,IACA,OAAA;AAAA,IACA,UAAA;AAAA,IACA,YAAA;AAAA,IACA,QAAA;AAAA,IACA,YAAA;AAAA,IACA,YAAA;AAAA,GAAA,EAAA;AAIF,EAAM,MAAA,cAAA,GAAiBA,8BAAkB,OAAO,CAAA,CAAA;AAEhD,EAAM,MAAA,IAAA,GAAOC,sBAAM,CAAA,OAAA,CAAQ,MAAM;AAC/B,IAAI,IAAA,EAAC,iDAAgB,IAAM,CAAA,EAAA;AACzB,MAAO,OAAA,cAAA,CAAA;AAAA,KACT;AACA,IAAA,OAAO,mCAAK,cAAL,CAAA,EAAA,EAAqB,MAAMC,4BAAa,CAAA,cAAA,CAAe,IAAI,CAAE,EAAA,CAAA,CAAA;AAAA,GACtE,EAAG,CAAC,cAAc,CAAC,CAAA,CAAA;AAEnB,EAAA,MAAM,EAAE,UAAA,EAAY,UAAY,EAAA,WAAA,EAAgB,GAAA,kBAAA;AAAA,IAC9C,IAAA;AAAA,IACA,KAAA;AAAA,GACF,CAAA;AAEA,EAAkBC,YAAmB,GAAA;AAGrC,EAAA,MAAM,SAAS,OAAO,KAAA,CAAM,MAAW,KAAA,UAAA,GAAa,MAAM,MAAS,GAAA,KAAA,CAAA,CAAA;AAEnE,EAAA,MAAM,EAAE,SAAA,EAAW,MAAQ,EAAA,SAAA,EAAW,cAAiB,GAAAC,qCAAA;AAAA,IACrD,IAAA;AAAA,IACA,UAAA;AAAA,GACF,CAAA;AAEA,EAAM,MAAA,gBAAA,GAAmB,IAAS,KAAA,MAAA,GAAS,QAAW,GAAA,KAAA,CAAA;AACtD,EAAA,uBACGH,sBAAA,CAAA,aAAA,CAAA,KAAA,EAAA,EAAI,SACH,EAAA,kBAAAA,sBAAA,CAAA,aAAA,CAAC,OAAM,EAAA,EAAA,uBAAA,EAAyB,EAAE,MAAA,EAAQ,OAAQ,EAAA,EAAG,CACpD,EAAA,CAAC,UACA,oBAAAA,sBAAA,CAAA,aAAA;AAAA,IAACI,UAAM,CAAA,MAAA;AAAA,IAAN;AAAA,MACC,SAAW,EAAA,qBAAA;AAAA,MACX,UAAU,CAAC,CAAA,KAAM,SAAU,CAAA,CAAA,CAAE,OAAO,KAAK,CAAA;AAAA,MACzC,KAAO,EAAA,MAAA;AAAA,MACP,WAAa,EAAA,QAAA;AAAA,KAAA;AAAA,GAGjB,kBAAAJ,sBAAA,CAAA,aAAA;AAAA,IAACK,SAAA;AAAA,IAAA;AAAA,MACC,WAAWC,2BAAW,CAAA;AAAA;AAAA,QAEpB,sBAAsB,IAAS,KAAA,MAAA;AAAA,OAChC,CAAA;AAAA,MACD,IAAA;AAAA,MACA,MAAA;AAAA,MACA,MAAA;AAAA,MACA,UAAY,EAAA,SAAA;AAAA,MACZ,UAAY,EAAA,YAAA;AAAA,MACZ,QAAU,EAAA,gBAAA;AAAA,MACV,YACE,UACI,GAAA;AAAA,QACE,QAAA;AAAA,QACA,eAAiB,EAAA,KAAA;AAAA,OAEnB,GAAA,KAAA;AAAA,MAEN,UAAA,EAAY,CAAC,MAAA,EAAQ,KAAU,KAAA;AA9NvC,QAAAC,IAAAA,GAAAA,CAAAA;AAiOU,QAAA,MAAM,OAAU,GAAAC,6BAAA,CAAc,UAAY,EAAA,MAAA,EAAQ,MAAM,MAAM,CAAA,CAAA;AAM9D,QAAA,MAAM,KAAQ,GAAAC,WAAA;AAAA,UACZC,6BAAkB,MAAQH,EAAAA,CAAAA,GAAAA,GAAA,YAAY,KAAZ,KAAA,IAAA,GAAA,KAAA,CAAA,GAAAA,IAAoB,CAAE,CAAA,CAAA;AAAA,UAChD,CAAC,GACC,qBAAAP,sBAAA,CAAA,aAAA;AAAA,YAAC,KAAA;AAAA,YAAA;AAAA,cACC,GAAA;AAAA,cACA,SAAA,EACE,IAAS,KAAA,MAAA,GACL,yBACA,GAAA,8BAAA;AAAA,aAAA;AAAA,WAER;AAAA,SAEJ,CAAA;AACA,QAAA,MAAM,OACJ,mBAAAA,sBAAA,CAAA,aAAA;AAAA,UAAC,eAAA;AAAA,UAAA;AAAA,YACC,QAAU,EAAA,gBAAA;AAAA,YACV,KAAA,EAAO,IAAS,KAAA,MAAA,GAAS,KAAQ,GAAA,KAAA,CAAA;AAAA,YACjC,KAAO,EAAAW,2BAAA,CAAiB,MAAQ,EAAA,WAAA,CAAY,KAAK,CAAA;AAAA,YACjD,QAAU,EAAAA,2BAAA,CAAiB,MAAQ,EAAA,WAAA,CAAY,QAAQ,CAAA;AAAA,YACvD,WAAa,EAAAA,2BAAA,CAAiB,MAAQ,EAAA,WAAA,CAAY,WAAW,CAAA;AAAA,YAC7D,UAAY,EAAAA,2BAAA,CAAiB,MAAQ,EAAA,WAAA,CAAY,UAAU,CAAA;AAAA,YAC3D,OAAS,EAAAA,2BAAA,CAAiB,MAAQ,EAAA,WAAA,CAAY,OAAO,CAAA;AAAA,WAAA;AAAA,SACvD,CAAA;AAGF,QAAA,SAAS,eAAkB,GAAA;AACzB,UAAK,IAAA,CAAA,OAAA,IAAA,IAAA,GAAA,OAAA,GAAW,EAAC,EAAG,MAAS,GAAA,CAAA;AAAG,YAAO,OAAA,KAAA,CAAA,CAAA;AACvC,UAAA,MAAM,OAAO,MAAS,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,MAAA,CAAA,MAAA,CAAA,CAAA;AACtB,UAAI,IAAA,CAAC,QAAQ,CAAC,UAAA;AAAY,YAAO,OAAA,KAAA,CAAA,CAAA;AACjC,UAAM,MAAA,YAAA,GAAe,CAAC,CACpB,qBAAAX,sBAAA,CAAA,aAAA;AAAA,YAAC,GAAA;AAAA,YAAA;AAAA,cACC,IAAA;AAAA,cACA,OAAA,EAAS,CAAC,KAAU,KAAA;AAClB,gBAAA,MAAM,GAAM,GAAAY,8BAAA;AAAA,kBACV,MAAA;AAAA,kBACAC,4BAAA,CAAa,MAAM,MAAM,CAAA;AAAA,iBAC3B,CAAA;AACA,gBAAA,IACE,OAAO,IACP,IAAA,CAACC,oBAAe,CAAA,KAAA,CAAM,MAAqB,CAC3C,EAAA;AACA,kBAAA,UAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,UAAA,CAAa,KAAK,MAAQ,EAAA,KAAA,CAAA,CAAA;AAAA,iBAC5B;AAAA,eACF;AAAA,aAAA;AAAA,YAEC,CAAA;AAAA,WACH,CAAA;AAEF,UAAO,OAAA,YAAA,CAAA;AAAA,SACT;AAEA,QAAA,MAAM,cAAc,eAAgB,EAAA,CAAA;AAEpC,QAAM,MAAA,OAAA,GAAU,CAAC,CAAC,WAAA,CAAA;AAElB,QAAA,SAAS,UAAU,CAAc,EAAA;AA9R3C,UAAAP,IAAAA,GAAAA,CAAAA;AA+RY,UAAA,OAAA,CAAOA,GAAA,GAAA,WAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,WAAA,CAAc,CAAd,CAAA,KAAA,IAAA,GAAAA,GAAoB,GAAA,CAAA,CAAA;AAAA,SAC7B;AAEA,QAAA,OAAO,SAAS,MACd,mBAAAP,sBAAA,CAAA,aAAA,CAACK,UAAK,IAAL,EAAA,EAAU,WAAW,mBACnB,EAAA,EAAA,SAAA;AAAA,0BACCL,sBAAA,CAAA,aAAA;AAAA,YAACe,SAAA;AAAA,YAAA;AAAA,cACC,SAAW,EAAA,wBAAA;AAAA,cACX,IAAM,EAAA,OAAA;AAAA,cACN,KAAO,EAAA,KAAA;AAAA,cACP,SAAW,EAAA,OAAA;AAAA,cACX,OAAA;AAAA,aAAA;AAAA,YAEC,OAAA;AAAA,WACH;AAAA,SAEJ,CAEA,GAAA,SAAA;AAAA,0BACEf,sBAAA,CAAA,aAAA;AAAA,YAACK,SAAK,CAAA,IAAA;AAAA,YAAL;AAAA,cACC,OAAA;AAAA,cACA,WAAWC,2BAAW,CAAA;AAAA,gBACpB,mBAAqB,EAAA,IAAA;AAAA,gBACrB,8BAAgC,EAAA,OAAA;AAAA,eACjC,CAAA;AAAA,aAAA;AAAA,YAEA,OAAA;AAAA,WACH;AAAA,SACF,CAAA;AAAA,OAEJ;AAAA,KAAA;AAAA,GAEJ,CAAA,CAAA;AAEJ,CAAA;AAEA,SAAS,gBAAgB,EAmBtB,EAAA;AAnBsB,EACvB,IAAA,EAAA,GAAA,EAAA,EAAA;AAAA,IAAA,SAAA;AAAA,IACA,KAAA;AAAA,IACA,QAAA;AAAA,IACA,KAAA;AAAA,IACA,WAAA;AAAA,IACA,UAAA;AAAA,IACA,OAAA;AAAA,IACA,QAAA;AAAA,GA3UF,GAmUyB,EASpB,EAAA,MAAA,GAAA,SAAA,CAToB,EASpB,EAAA;AAAA,IARH,WAAA;AAAA,IACA,OAAA;AAAA,IACA,UAAA;AAAA,IACA,OAAA;AAAA,IACA,aAAA;AAAA,IACA,YAAA;AAAA,IACA,SAAA;AAAA,IACA,UAAA;AAAA,GAAA,CAAA,CAAA;AAYA,EAAA,MAAM,SAAY,GAAA,UAAA,CAAA;AAClB,EAAA,MAAM,WAAc,GAAAA,2BAAA,CAAW,CAAG,EAAA,SAAA,CAAA,UAAA,CAAA,EAAuB,SAAS,CAAA,CAAA;AAElE,EACE,uBAAAN,sBAAA,CAAA,aAAA;AAAA,IAAC,KAAA;AAAA,IAAA,aAAA,CAAAgB,gBAAA,CAAA,EAAA,EACK,MADL,CAAA,EAAA;AAAA,MAEC,SAAW,EAAAV,2BAAA;AAAA,QACT;AAAA,UACE,yCAAyC,CAAC,QAAA;AAAA,SAC5C;AAAA,QACA,WAAA;AAAA,OACF;AAAA,KAAA,CAAA;AAAA,IAEC,yBAAUN,sBAAA,CAAA,aAAA,CAAA,KAAA,EAAA,EAAI,SAAW,EAAA,CAAA,EAAG,gCAA+B,KAAM,CAAA;AAAA,oBAClEA,sBAAA,CAAA,aAAA;AAAA,MAAC,KAAA;AAAA,MAAA;AAAA,QACC,WAAW,CAAG,EAAA,SAAA,CAAA,kBAAA,CAAA;AAAA,QACd,OAAO,EAAE,OAAA,EAAS,QAAQ,aAAe,EAAA,QAAA,EAAU,KAAK,CAAE,EAAA;AAAA,OAAA;AAAA,MAEzD,+BACEA,sBAAA,CAAA,aAAA,CAAA,KAAA,EAAA,IAAA,kBACEA,sBAAA,CAAA,aAAA,CAAAiB,QAAA,EAAA,IAAA,EAAK,WAAY,CACpB,CAAA;AAAA,sBAEFjB,sBAAA,CAAA,aAAA,CAAC,SAAI,KAAO,EAAA,EAAE,SAAS,MAAQ,EAAA,GAAA,EAAK,CAAE,EAAA,EAAA,EACnC,KACC,oBAAAA,sBAAA,CAAA,aAAA;AAAA,QAAC,IAAA;AAAA,QAAA;AAAA,UACC,WAAW,CAAG,EAAA,SAAA,CAAA,gBAAA,CAAA;AAAA,UACd,KAAA,EAAO,EAAE,MAAA,EAAQ,CAAE,EAAA;AAAA,SAAA;AAAA,QAElB,KAAA;AAAA,OACH,EAED,8BACEA,sBAAA,CAAA,aAAA,CAAA,KAAA,EAAA,EAAI,WAAW,CAAG,EAAA,SAAA,CAAA,sBAAA,CAAA,EAAA,EAChB,UACH,CAEJ,CAAA;AAAA,MACC,4BACEA,sBAAA,CAAA,aAAA,CAAA,KAAA,EAAA,EAAI,SAAW,EAAA,CAAA,EAAG,qCAAoC,QAAS,CAAA;AAAA,MAEjE,OAAA,oBAAYA,sBAAA,CAAA,aAAA,CAAA,KAAA,EAAA,IAAA,EAAK,OAAQ,CAAA;AAAA,KAC5B;AAAA,GACF,CAAA;AAEJ,CAAA;AAQA,MAAM,sBAAsB,OACzB;AAAA,EACC,KAAKkB,eAAU,EAAA;AAAA,EACf,gBAAgB,MAAM,KAAA;AAAA,EACtB,cAAgB,EAAA,KAAA;AAAA,EAChB,UAAY,EAAA,KAAA,CAAA;AAAA,EACZ,QAAU,EAAA,KAAA;AAAA,EACV,UAAY,EAAA;AAAA,IACV,QAAQ,EAAC;AAAA,IACT,KAAO,EAAA,MAAA;AAAA,IACP,MAAQ,EAAA,KAAA;AAAA,GACV;AAAA,EACA,QAAU,EAAA,MAAA;AAAA,EACV,IAAM,EAAA,KAAA,CAAA;AACR,CAAA,CAAA,CAAA;AAEF,MAAM,KAAQ,GAAA;AAAA,EACZ,SAAA;AAAA,EACA,OAAA;AAAA,EACA,UAAA;AAAA,EACA,aAAA;AAAA,EACA,YAAA;AAAA,EACA,OAAA;AAAA,EACA,OAAA;AACF,CAAA,CAAA;AA4BA,SAAS,kBAAA,CACP,MACA,KACA,EAAA;AACA,EAAA,MAAM,EAAE,MAAA,EAAQ,qBAAuB,EAAA,UAAA,EAAe,GAAA,KAAA,CAAA;AAEtD,EAAO,OAAAlB,sBAAA,CAAM,QAAQ,MAAM;AAtc7B,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA;AAucI,IAAA,MAAM,SAAS,IAAM,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,IAAA,CAAA,MAAA,CAAA;AACrB,IAAA,MAAM,SAAY,GAAA,IAAI,GAAI,CAAA,CAAA,EAAA,GAAA,IAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,IAAA,CAAM,WAAN,IAAc,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,MAAA,CAAO,GAAI,CAAA,CAAC,CAAM,KAAA,CAAC,CAAE,CAAA,EAAA,EAAI,CAAC,CAAE,CAAA,CAAA,CAAA;AACpE,IAAI,IAAA,CAAC,IAAQ,IAAA,CAAC,MAAQ,EAAA;AACpB,MAAA,OAAO,EAAE,UAAY,EAAA,EAAI,EAAA,UAAA,EAAY,EAAG,EAAA,CAAA;AAAA,KAC1C;AAEA,IAAA,SAAS,gBAAgB,IAAY,EAAA;AA7czC,MAAAO,IAAAA,GAAAA,CAAAA;AA8cM,MAAA,IAAI,SAAS,OAAS,EAAA;AACpB,QAAA,OAAOY,iBAAYZ,CAAAA,CAAAA,GAAAA,GAAA,KAAM,CAAA,IAAI,CAAV,KAAA,IAAA,GAAAA,GAAe,GAAA,EAAE,CAAA,CAAE,GAAI,CAAA,CAAC,KAAU,KAAA;AACnD,UAAA,OAAO,mCACF,KADE,CAAA,EAAA;AAAA,YAEL,IAAA;AAAA,WACF,CAAA,CAAA;AAAA,SACD,CAAA,CAAA;AAAA,OACI,MAAA;AACL,QAAA,OAAO,EAAC,CAAA;AAAA,OACV;AAAA,KACF;AAGA,IAAA,MAAM,sBAAyB,GAAA;AAAA,MAC7B,GAAG,gBAAgB,OAAO,CAAA;AAAA,MAC1B,GAAG,gBAAgB,SAAS,CAAA;AAAA,MAC5B,GAAG,gBAAgB,OAAO,CAAA;AAAA,MAC1B,GAAG,gBAAgB,aAAa,CAAA;AAAA,MAChC,GAAG,gBAAgB,YAAY,CAAA;AAAA,MAC/B,GAAG,gBAAgB,UAAU,CAAA;AAAA,KAC/B,CAAA;AAEA,IAAA,SAAS,qBAAqB,IAA+B,EAAA;AAC3D,MAAO,OAAAa,8BAAA;AAAA,QACL,IAAA,KAAS,UAAa,GAAA,EAAK,GAAA,sBAAA;AAAA,QAC3B,MAAA;AAAA,QACA,CAAC,KAAA,KAAWJ,gBACP,CAAAA,gBAAA,CAAA,EAAA,EAAA,mBAAA,KACC,KAAS,IAAA;AAAA,UACX,KAAK,KAAM,CAAA,EAAA;AAAA,UACX,SAAS,KAAM,CAAA,EAAA;AAAA,UACf,KAAA,EAAO,KAAM,CAAA,KAAA,IAAS,KAAM,CAAA,EAAA;AAAA;AAAA,UAE5B,IAAM,EAAA,KAAA,CAAA;AAAA,UACN,IAAM,EAAA,CAAC,WAAgB,KAAA,WAAA,CAAY,MAAM,EAAE,CAAA;AAAA,SAC7C,CAAA;AAAA,OAEJ,CAAA;AAAA,KACF;AAUA,IAAM,MAAA;AAAA,MACJ,YAAc,EAAA,mBAAA;AAAA,MACd,uBAAyB,EAAA,8BAAA;AAAA,KAC3B,GAAI,qBAAqB,UAAU,CAAA,CAAA;AAOnC,IAAA,IACE,IAAK,CAAA,IAAA,CAAK,MAAS,GAAA,CAAA,IACnB,CAAC,mBAAA,CAAoB,IAAK,CAAA,CAAC,KAAU,KAAA,KAAA,CAAM,IAAS,KAAA,OAAO,CAC3D,EAAA;AACA,MAAA,MAAM,aAAa,KAAM,CAAA,IAAA;AAAA,QACvB,IAAI,GAAA;AAAA,UACF,CAAC,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAC,CAAE,CAAA,GAAA;AAAA,YAAI,CAAC,MAClC,IAAK,CAAA,KAAA,CAAO,IAAI,CAAM,IAAA,IAAA,CAAK,IAAK,CAAA,MAAA,GAAS,CAAE,CAAA,CAAA;AAAA,WAC7C;AAAA,SACF;AAAA,QACA,GAAI,CAAA,CAAC,MAAM,IAAK,CAAA,IAAA,CAAK,CAAC,CAAC,CAAA,CAAA;AACzB,MAAA,MAAM,uBAAuB,mBAAoB,CAAA,MAAA;AAAA,QAC/C,CAAC,KAAA,KACC,CAAC,KAAA,CAAM,QACP,UAAW,CAAA,MAAA;AAAA,UACT,CAAC,QAAQ,KAAM,CAAA,OAAA,IAAWK,kBAAY,GAAI,CAAA,KAAA,CAAM,OAAO,CAAC,CAAA;AAAA,SAC1D,CAAE,MACA,IAAA,UAAA,CAAW,MAAS,GAAA,CAAA;AAAA,OAC1B,CAAA;AACA,MAAA,MAAM,cACJ,EAAqB,GAAA,CAAA,EAAA,GAAA,oBAAA,CAAA,IAAA;AAAA,QAAK,CAAC,CAAG,KAAA;AA5hBtC,UAAAd,IAAAA,GAAAA,CAAAA;AA6hBU,UAAA,OAAA,CAAAA,GAAA,GAAA,CAAA,CAAE,OAAF,KAAA,IAAA,GAAA,KAAA,CAAA,GAAAA,GAAW,CAAA,KAAA;AAAA,YACT,sDAAA;AAAA,WAAA,CAAA;AAAA,SAAA;AAAA,OAEJ,KAJA,YAKA,oBAAqB,CAAA,IAAA;AAAA,QAAK,CAAC,CAAG,KAAA;AAjiBtC,UAAAA,IAAAA,GAAAA,CAAAA;AAkiBU,UAAA,OAAA,CAAAA,GAAA,GAAA,CAAA,CAAE,OAAF,KAAA,IAAA,GAAA,KAAA,CAAA,GAAAA,GAAW,CAAA,KAAA;AAAA,YACT,wDAAA;AAAA,WAAA,CAAA;AAAA,SAAA;AAAA,OAEJ,KATA,IAUA,GAAA,EAAA,GAAA,oBAAA,CAAqB,CAAC,CAAA,CAAA;AACxB,MAAA,IAAI,UAAY,EAAA;AACd,QAAA,UAAA,CAAW,IAAO,GAAA,OAAA,CAAA;AAAA,OACpB;AAAA,KACF;AAGA,IAAI,IAAA,CAAC,oBAAoB,IAAK,CAAA,CAAC,UAAU,KAAM,CAAA,IAAA,KAAS,OAAO,CAAG,EAAA;AAChE,MAAA,MAAM,aAAa,mBAAoB,CAAA,IAAA;AAAA,QACrC,CAAC,KAAO,KAAA;AA/iBhB,UAAAA,IAAAA,GAAAA,CAAAA;AAgjBU,UAAC,OAAA,CAAA,KAAA,CAAM,UACPA,GAAA,GAAA,KAAA,CAAM,YAAN,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,GAAAA,CACI,cACD,KAAM,CAAA,+CAAA,CAAA,CAAA,CAAA;AAAA,SAAA;AAAA,OACb,CAAA;AACA,MAAA,IAAI,UAAY,EAAA;AACd,QAAA,UAAA,CAAW,IAAO,GAAA,OAAA,CAAA;AAAA,OACpB;AAAA,KACF;AAGA,IAAI,IAAA,CAAC,oBAAoB,IAAK,CAAA,CAAC,UAAU,KAAM,CAAA,IAAA,KAAS,SAAS,CAAG,EAAA;AAClE,MAAA,MAAM,eAAe,mBAAoB,CAAA,IAAA;AAAA,QACvC,CAAC,KAAO,KAAA;AA7jBhB,UAAAA,IAAAA,GAAAA,CAAAA;AA8jBU,UAAA,OAAA,CAAC,KAAM,CAAA,IAAA,IACP,KAAM,CAAA,OAAA,IAAA,CAAA,CACNA,GAAA,GAAA,SAAA,CAAU,GAAI,CAAA,KAAA,CAAM,OAAO,CAAA,KAA3B,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,GAAAA,CAA8B,IAAS,MAAA,QAAA,CAAA;AAAA,SAAA;AAAA,OAC3C,CAAA;AACA,MAAA,IAAI,YAAc,EAAA;AAChB,QAAA,YAAA,CAAa,IAAO,GAAA,SAAA,CAAA;AAAA,OACtB;AAAA,KACF;AAEA,IAAA,MAAM,uBAAuB,IAAI,GAAA;AAAA,MAC/B,mBAAA,CAAoB,IAAI,CAAC,CAAA,KAAM,CAAC,CAAE,CAAA,OAAA,EAAS,CAAE,CAAA,IAAI,CAAC,CAAA;AAAA,KACpD,CAAA;AACA,IAAA,KAAA,MAAW,KAAK,8BAAgC,EAAA;AAC9C,MAAA,CAAA,CAAE,IAAO,GAAA,oBAAA,CAAqB,GAAI,CAAA,CAAA,CAAE,OAAO,CAAA,CAAA;AAAA,KAC7C;AAQA,IAAA,MAAM,EAAE,YAAA,EAAc,uBAAwB,EAAA,GAC5C,qBAAqB,UAAU,CAAA,CAAA;AAEjC,IAAA,MAAM,mCAAsC,GAAA;AAAA,MAC1C,GAAG,wBAAwB,MAAO,CAAA,CAAC,MAAM,CAAE,CAAA,IAAA,IAAQ,CAAE,CAAA,IAAA,KAAS,OAAO,CAAA;AAAA,MACrE,GAAG,8BAA+B,CAAA,MAAA;AAAA,QAChC,CAAC,CAAM,KAAA,CAAA,CAAE,IAAQ,IAAA,CAAA,CAAE,SAAS,OAAW,IAAA,CAAC,KAAM,CAAA,CAAA,CAAE,IAAI,CAAA;AAAA,OACtD;AAAA,KACF,CAAA;AACA,IAAA,MAAM,wBAA2B,GAAA;AAAA,MAC/B,GAAG,aAAa,MAAO,CAAA,CAAC,MAAM,CAAE,CAAA,IAAA,IAAQ,CAAE,CAAA,IAAA,KAAS,OAAO,CAAA;AAAA,MAC1D,GAAG,mBAAoB,CAAA,MAAA;AAAA,QACrB,CAAC,CAAM,KAAA,CAAA,CAAE,IAAQ,IAAA,CAAA,CAAE,SAAS,OAAW,IAAA,CAAC,KAAM,CAAA,CAAA,CAAE,IAAI,CAAA;AAAA,OACtD;AAAA,KACF,CAAA;AAGA,IAAA,MAAM,WAAc,GAAAe,YAAA;AAAA,MAClBC,wBAAQ,CAAA,wBAAA,EAA0B,CAAC,CAAA,KAAM,EAAE,IAAI,CAAA;AAAA,KACjD,CAAA;AAEA,IAAA,MAAM,aAAwD,EAAC,CAAA;AAC/D,IAAA,KAAA,MAAW,QAAQ,KAAO,EAAA;AACxB,MAAA,IAAI,SAAS,OAAS,EAAA;AACpB,QAAW,UAAA,CAAA,IAAI,CAAI,GAAA,CAAA,EAAA,GAAAd,WAAA,CAAM,KAAM,CAAA,IAAI,GAAGU,iBAAW,CAAA,KAA9B,IAAmC,GAAA,EAAA,GAAA,WAAA,CAAY,IAAI,CAAA,CAAA;AAAA,OACxE;AAAA,KACF;AAEA,IAAA,qBAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,qBAAA,CAAwB,mCACnB,IADmB,CAAA,EAAA;AAAA,MAEtB,YAAc,EAAA,wBAAA;AAAA,MACd,uBAAyB,EAAA,mCAAA;AAAA,KAC3B,CAAA,CAAA,CAAA;AAEA,IAAA,MAAM,UAAa,GAAA,wBAAA,CAAA;AACnB,IAAO,OAAA,EAAE,YAAY,UAAW,EAAA,CAAA;AAAA,KAC/B,CAAC,MAAA,EAAQ,IAAM,EAAA,qBAAA,EAAuB,UAAU,CAAC,CAAA,CAAA;AACtD;;;;;;;;;;;;;;;;;;AC5mBA,MAAM,YAA6C,GAAA;AAAA,EACjD,IAAM,EAAA,oBAAA;AAAA,EACN,WAAa,EAAA,WAAA;AAAA,EACb,aAAe,EAAA;AAAA,IACb,KAAO,EAAA,SAAA;AAAA,IACP,OAAS,EAAA,MAAA;AAAA,IACT,SAAW,EAAA,MAAA;AAAA,GACb;AAAA,EACA,cAAgB,EAAA,OAAA;AAAA,EAChB,KAAO,EAAA,cAAA,CAAA;AAAA,IACL,MAAMK,wBAAS,EAAA;AAAA,IACf,IAAM,EAAA;AAAA,MACJ,IAAM,EAAA,QAAA;AAAA,MACN,OAAS,EAAA;AAAA,QACP,EAAE,KAAA,EAAO,MAAQ,EAAA,KAAA,EAAO,MAAO,EAAA;AAAA,QAC/B,EAAE,KAAA,EAAO,MAAQ,EAAA,KAAA,EAAO,MAAO,EAAA;AAAA,OACjC;AAAA,MACA,gBAAkB,EAAA,MAAA;AAAA,KACpB;AAAA,IAEA,MAAQ,EAAA;AAAA,MACN,IAAM,EAAA,MAAA;AAAA,MACN,eAAiB,EAAA,IAAA;AAAA,KACnB;AAAA,IACA,MAAQ,EAAA;AAAA,MACN,IAAM,EAAA,MAAA;AAAA,MACN,eAAiB,EAAA,IAAA;AAAA,KACnB;AAAA,IAEA,KAAO,EAAAC,wBAAA,CAAS,EAAE,IAAA,EAAM,SAAS,CAAA;AAAA,IACjC,OAAS,EAAAA,wBAAA,CAAS,EAAE,IAAA,EAAM,WAAW,CAAA;AAAA,IACrC,OAAOA,wBAAS,CAAA,EAAE,MAAM,OAAS,EAAA,QAAA,EAAU,MAAM,CAAA;AAAA,IACjD,UAAUA,wBAAS,CAAA;AAAA,MACjB,IAAM,EAAA,UAAA;AAAA,MACN,QAAU,EAAA,IAAA;AAAA,KACX,CAAA;AAAA;AAAA;AAAA;AAAA,IAKD,MAAQ,EAAA;AAAA,MACN,IAAM,EAAA,UAAA;AAAA,MACN,OAAS,EAAA;AAAA,QACP,IAAM,EAAA,MAAA;AAAA,OACR;AAAA,MACA,QAAA,EAAU,CAAC,aAAa,CAAA;AAAA,MACxB,SAAA,EAAW,CAAC,MAAA,EAAa,GAAU,KAAA;AA3DzC,QAAA,IAAA,EAAA,CAAA;AA2D4C,QAAC,OAAA,CAAA,CAAA,EAAA,GAAA,GAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,GAAA,CAAK,IAAL,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAY,CAAE,CAAA,CAAA,CAAA;AAAA,OAAA;AAAA,KACvD;AAAA,IAEA,YAAYC,8BAAe,EAAA;AAAA,IAC3B,YAAYC,8BAAe,EAAA;AAAA,IAE3B,QAAU,EAAA;AAAA,MACR,IAAM,EAAA,SAAA;AAAA,MACN,YAAc,EAAA,IAAA;AAAA,MACd,MAAA,EAAQ,CAAC,EAAI,KAAA;AApEnB,QAAA,IAAA,EAAA,CAAA;AAoEuB,QAAG,OAAA,CAAA,CAAA,EAAA,GAAA,EAAA,CAAA,IAAA,KAAH,YAAW,MAAY,MAAA,MAAA,CAAA;AAAA,OAAA;AAAA,KAC1C;AAAA,GAAA,EAEGC,2BAAY,EAAA,CAAA;AAAA,EAEjB,UAAY,EAAA,UAAA;AAAA,EACZ,UAAY,EAAA,uDAAA;AACd,CAAA,CAAA;AAEO,SAAS,iBAAiB,MAAuB,EAAA;AACtD,EAAwBC,6BAAA,CAAA,MAAA,EAAQ,UAAU,YAAY,CAAA,CAAA;AACxD;;;;;;"}