{"version":3,"file":"formatting-6dc71cdd.cjs.js","sources":["../src/field-mappings.tsx","../src/formatting.tsx"],"sourcesContent":["import { QueryResult, TableSchema } from \"@plasmicapp/data-sources\";\nimport { ContextDependentConfig } from \"@plasmicapp/host\";\nimport { PropType } from \"@plasmicapp/host/registerComponent\";\nimport deepGet from \"lodash/get\";\nimport { isOneOf, withoutFalsey } from \"./utils\";\n\nexport interface AutoSettings {\n  dataType: \"auto\";\n}\n\ninterface _SharedNumberSettings {\n  notation?: \"standard\" | \"scientific\" | \"engineering\" | \"compact\";\n  signDisplay?: \"auto\" | \"always\" | \"exceptZero\";\n  maximumFractionDigits?: number;\n  minimumFractionDigits?: number;\n  locale?: string;\n}\nexport interface DecimalSettings extends _SharedNumberSettings {\n  dataType: \"number\";\n}\nexport interface PercentSettings extends _SharedNumberSettings {\n  dataType: \"percent\";\n}\nexport interface CurrencySettings extends _SharedNumberSettings {\n  dataType: \"currency\";\n  currency?: string;\n  currencyDisplay?: \"symbol\" | \"narrowSymbol\" | \"code\" | \"name\";\n}\nexport const DEFAULT_CURRENCY_SETTINGS: CurrencySettings = {\n  dataType: \"currency\",\n  currency: \"USD\",\n  currencyDisplay: \"narrowSymbol\",\n};\n\nexport type NumberSettings =\n  | DecimalSettings\n  | PercentSettings\n  | CurrencySettings;\nexport const NUMBER_TYPES = [\"number\", \"percent\", \"currency\"] as const;\n\nexport interface DateTimeSettings {\n  dataType: \"datetime\";\n  locale?: string;\n  dateStyle?: \"none\" | \"full\" | \"long\" | \"medium\" | \"short\";\n  timeStyle?: \"none\" | \"full\" | \"long\" | \"medium\" | \"short\";\n  hour12?: boolean;\n  timeZone?: string;\n}\nexport const DEFAULT_DATETIME_SETTINGS: DateTimeSettings = {\n  dataType: \"datetime\",\n  locale: \"en-US\",\n  dateStyle: \"short\",\n  timeStyle: \"short\",\n  hour12: true,\n};\n\nexport interface RelativeDateTimeSettings {\n  dataType: \"relative-datetime\";\n  locale?: string;\n  numeric?: \"always\" | \"auto\";\n  style?: \"long\" | \"short\" | \"narrow\";\n  unit?: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\";\n}\nexport const DEFAULT_RELATIVE_DATETIME_SETTINGS: RelativeDateTimeSettings = {\n  dataType: \"relative-datetime\",\n  locale: \"en-US\",\n  numeric: \"always\",\n  style: \"long\",\n  unit: \"day\",\n};\nexport const DATETIME_TYPES = [\"datetime\", \"relative-datetime\"] as const;\n\nexport interface BooleanSettings {\n  dataType: \"boolean\";\n  showAs?: \"text\" | \"checkbox\" | \"switch\";\n}\nexport const DEFAULT_BOOLEAN_SETTINGS: BooleanSettings = {\n  dataType: \"boolean\",\n  showAs: \"checkbox\",\n};\n\nexport interface StringSettings {\n  dataType: \"string\";\n}\n\nexport type RowFunc<Result> = (row: Record<string, unknown>) => Result;\nexport type CellFunc<Result> = (\n  row: Record<string, unknown>,\n  value: unknown\n) => Result;\n\n/**\n * Exprs are for things that can must re-evaluate from row to row.\n *\n * Literal values are for things that are column-level. (But in Plasmic Studio, as with all props, you can still use a dynamic value.)\n */\n\ninterface _BaseColumnConfig {\n  key: string;\n  fieldId?: string;\n  title?: string;\n  isHidden: boolean;\n  expr?: CellFunc<any>;\n}\n\nexport type BaseColumnConfig = _BaseColumnConfig &\n  (\n    | AutoSettings\n    | NumberSettings\n    | StringSettings\n    | BooleanSettings\n    | DateTimeSettings\n    | RelativeDateTimeSettings\n  );\n\nexport function deriveValueType(cconfig: BaseColumnConfig) {\n  return cconfig.dataType === \"auto\"\n    ? undefined\n    : cconfig.dataType === \"string\"\n    ? \"text\"\n    : cconfig.dataType === \"number\"\n    ? \"digit\"\n    : cconfig.dataType === \"boolean\"\n    ? \"switch\"\n    : undefined;\n}\n\nexport interface ControlContextData<ColumnConfig extends BaseColumnConfig> {\n  data: unknown[];\n  schema?: TableSchema;\n  mergedFields: ColumnConfig[];\n  minimalFullLengthFields: Partial<ColumnConfig>[];\n}\n\nexport interface FieldfulProps<ColumnConfig extends BaseColumnConfig> {\n  className?: string;\n  data?: QueryResult;\n  fields?: Partial<ColumnConfig>[];\n  setControlContextData?: (ctx: ControlContextData<ColumnConfig>) => void;\n}\n\n// Hacky \"unique\" string values\nexport const NoneField = \"||NoneField||\";\nexport const CustomField = \"\";\n\ninterface FieldSubpropsOpts<ColumnConfig extends BaseColumnConfig> {\n  fieldTypes?: Record<string, PropType<any>>;\n  canChangeField?: boolean;\n  canPickNoneField?: boolean;\n  noTitle?: boolean;\n  noDataType?: boolean;\n  hiddenFieldId?: (\n    ps: Record<string, unknown>,\n    ctx: ControlContextData<ColumnConfig>,\n    extras: { path: (string | number)[] }\n  ) => boolean;\n}\n\nexport function getFieldSubprops<ColumnConfig extends BaseColumnConfig>(\n  opts: FieldSubpropsOpts<ColumnConfig>\n): Record<string, PropType<any>> {\n  return {\n    key: {\n      type: \"string\",\n      hidden: () => true,\n    },\n    fieldId: {\n      type: \"choice\",\n      displayName: \"Field name\",\n      readOnly: !opts.canChangeField,\n      options: (_props, ctx: ControlContextData<BaseColumnConfig>) =>\n        withoutFalsey([\n          opts.canPickNoneField && { value: NoneField, label: \"None\" },\n          ...(ctx?.schema?.fields ?? []).map((f) => ({\n            value: f.id,\n            label: f.label ?? f.id,\n          })),\n          { value: CustomField, label: \"Custom value\" },\n        ]),\n      hidden: (\n        ps,\n        ctx: ControlContextData<ColumnConfig>,\n        { path: _controlPath }\n      ) => {\n        // If this is change-able.\n        if (opts.canChangeField) {\n          return false;\n        }\n        return true;\n        // If there's a user-set fieldId\n        if (deepGet(ps, _controlPath)) {\n          return false;\n        }\n        return opts.hiddenFieldId?.(ps, ctx, { path: _controlPath }) ?? true;\n      },\n    },\n    title: {\n      type: \"string\",\n      displayName: \"Title\",\n      defaultValueHint: getDefaultValueHint(\"title\"),\n      hidden: () => !!opts.noTitle,\n    },\n    expr: {\n      ...rowDataType(\"Custom value\"),\n      hidden: (\n        ps,\n        ctx: ControlContextData<BaseColumnConfig>,\n        { item, path: _controlPath }\n      ) => {\n        return false;\n        // HIDE if this is unset.\n        if (!item) {\n          return true;\n        }\n        // SHOW if this is change-able *and* user chose \"Custom\".\n        if (opts.canChangeField) {\n          return false;\n        }\n        return true;\n      },\n    },\n    isHidden: {\n      type: \"boolean\",\n      displayName: \"Is hidden\",\n      defaultValueHint: getDefaultValueHint(\"isHidden\"),\n    },\n    ...(!opts.noDataType\n      ? {\n          dataType: {\n            type: \"choice\",\n            displayName: \"Data type\",\n            options: [\n              {\n                value: \"auto\",\n                label: \"Auto\",\n              },\n              {\n                value: \"number\",\n                label: \"Number\",\n              },\n              {\n                value: \"percent\",\n                label: \"Percentage\",\n              },\n              {\n                value: \"currency\",\n                label: \"Currency\",\n              },\n              {\n                value: \"string\",\n                label: \"String\",\n              },\n              {\n                value: \"boolean\",\n                label: \"Boolean\",\n              },\n              {\n                value: \"datetime\",\n                label: \"Date / Time\",\n              },\n              {\n                value: \"relative-datetime\",\n                label: \"Date / Time relative to now\",\n              },\n            ],\n            defaultValueHint: getDefaultValueHint(\"dataType\"),\n          },\n          currency: {\n            displayName: \"Currency\",\n            description: \"Must be a valid currency code\",\n            type: \"string\",\n            defaultValueHint: \"USD\",\n            hidden: (ps, ctx, { item }) => item.dataType !== \"currency\",\n          },\n          locale: {\n            displayName: \"Locale\",\n            description: \"Must be a valid locale code\",\n            type: \"string\",\n            defaultValueHint: \"en-US\",\n            hidden: (ps, ctx, { item }) =>\n              !isOneOf(item.dataType, NUMBER_TYPES) &&\n              !isOneOf(item.dataType, DATETIME_TYPES),\n          },\n          notation: {\n            displayName: \"Notation\",\n            type: \"choice\",\n            options: [\n              {\n                value: \"standard\",\n                label: \"Standard\",\n              },\n              {\n                value: \"scientific\",\n                label: \"Scientific notation (like 1E3)\",\n              },\n              {\n                value: \"compact\",\n                label: \"Compact (like 10K)\",\n              },\n            ],\n            defaultValueHint: \"standard\",\n            hidden: (ps, ctx, { item }) =>\n              !isOneOf(item.dataType, NUMBER_TYPES),\n          },\n          signDisplay: {\n            type: \"choice\",\n            displayName: \"Number sign\",\n            options: [\n              {\n                value: \"auto\",\n                label: \"Only for negative numbers (10, -10)\",\n              },\n              {\n                value: \"exceptZero\",\n                label: \"Positive or negative (+10, -10)\",\n              },\n            ],\n            defaultValueHint: \"auto\",\n            hidden: (ps, ctx, { item }) =>\n              !isOneOf(item.dataType, NUMBER_TYPES),\n          },\n          maximumFractionDigits: {\n            type: \"number\",\n            displayName: \"Max decimal places\",\n            defaultValueHint: 3,\n            min: 0,\n            max: 20,\n            hidden: (ps, ctx, { item }) =>\n              !isOneOf(item.dataType, NUMBER_TYPES),\n          },\n          minimumFractionDigits: {\n            type: \"number\",\n            displayName: \"Min decimal places\",\n            defaultValueHint: 0,\n            min: 0,\n            max: 20,\n            hidden: (ps, ctx, { item }) =>\n              !isOneOf(item.dataType, NUMBER_TYPES),\n          },\n          showAs: {\n            type: \"choice\",\n            options: [\n              {\n                value: \"checkbox\",\n                label: \"Checkboxes\",\n              },\n              {\n                value: \"switch\",\n                label: \"Toggle switches\",\n              },\n              {\n                value: \"text\",\n                label: \"Text\",\n              },\n            ],\n            displayName: \"Show as\",\n            defaultValueHint: \"checkbox\",\n            hidden: (ps, ctx, { item }) => item.dataType !== \"boolean\",\n          },\n          dateStyle: {\n            displayName: \"Date style\",\n            type: \"choice\",\n            options: [\n              {\n                value: \"none\",\n                label: \"None (don't display date)\",\n              },\n              {\n                value: \"short\",\n                label: \"Short (like 12/25/2023)\",\n              },\n              {\n                value: \"medium\",\n                label: \"Medium (like Dec 25, 2023)\",\n              },\n              {\n                value: \"long\",\n                label: \"Long (like December 25, 2023)\",\n              },\n              {\n                value: \"full\",\n                label: \"Full (like Monday, December 25, 2023)\",\n              },\n            ],\n            defaultValueHint: DEFAULT_DATETIME_SETTINGS.dateStyle,\n            hidden: (ps, ctx, { item }) => item.dataType !== \"datetime\",\n          },\n          timeStyle: {\n            displayName: \"Time style\",\n            type: \"choice\",\n            options: [\n              {\n                value: \"none\",\n                label: \"None (don't display time)\",\n              },\n              {\n                value: \"short\",\n                label: \"Short (like 4:00 PM)\",\n              },\n              {\n                value: \"medium\",\n                label: \"Medium (like 4:00:00 PM)\",\n              },\n              {\n                value: \"long\",\n                label: \"Long (like 4:00:00 PM PST)\",\n              },\n              {\n                value: \"full\",\n                label: \"Full (like 4:00:00 PM Pacific Standard Time)\",\n              },\n            ],\n            defaultValueHint: DEFAULT_DATETIME_SETTINGS.timeStyle,\n            hidden: (ps, ctx, { item }) => item.dataType !== \"datetime\",\n          },\n          hour12: {\n            displayName: \"Use AM/PM?\",\n            description: \"Whether to use AM/PM or 24-hour clock\",\n            type: \"boolean\",\n            defaultValueHint: DEFAULT_DATETIME_SETTINGS.hour12,\n            hidden: (ps, ctx, { item }) => item.dataType !== \"datetime\",\n          },\n          numeric: {\n            type: \"choice\",\n            displayName: \"Use numbers?\",\n            options: [\n              { value: \"always\", label: \"Always use numbers\" },\n              {\n                value: \"auto\",\n                label: \"Use words like 'Yesterday' or 'Tomorrow'\",\n              },\n            ],\n            defaultValueHint: DEFAULT_RELATIVE_DATETIME_SETTINGS.numeric,\n            hidden: (ps, ctx, { item }) =>\n              item.dataType !== \"relative-datetime\",\n          },\n          unit: {\n            type: \"choice\",\n            displayName: \"Time unit\",\n            options: [\n              {\n                value: \"second\",\n                label: \"Seconds\",\n              },\n              {\n                value: \"minute\",\n                label: \"Minutes\",\n              },\n              {\n                value: \"hour\",\n                label: \"Hours\",\n              },\n              {\n                value: \"day\",\n                label: \"Days\",\n              },\n              {\n                value: \"week\",\n                label: \"Weeks\",\n              },\n              {\n                value: \"month\",\n                label: \"Months\",\n              },\n              {\n                value: \"year\",\n                label: \"Years\",\n              },\n            ],\n            defaultValueHint: DEFAULT_RELATIVE_DATETIME_SETTINGS.unit,\n            hidden: (ps, ctx, { item }) =>\n              item.dataType !== \"relative-datetime\",\n          },\n        }\n      : {}),\n    ...opts.fieldTypes,\n  };\n}\n\nfunction getDefaultValueHint<ColumnConfig extends BaseColumnConfig>(\n  field: keyof ColumnConfig\n) {\n  return (\n    _props: any,\n    contextData: ControlContextData<ColumnConfig> | null,\n    { item }: any\n  ): any => {\n    if (item?.fieldId) {\n      const fieldSetting = contextData?.mergedFields.find(\n        (f) => f.fieldId === item.fieldId\n      );\n      return fieldSetting?.[field];\n    }\n    return undefined;\n  };\n}\n\nconst rowDataType = (displayName: string, control?: any) =>\n  ({\n    type: \"function\" as any,\n    displayName,\n    control,\n    argNames: [\"currentItem\", \"currentValue\"],\n    argValues: (_props: any, ctx: any, { item }: any) => {\n      const row = ctx?.data?.[0];\n      const cell = item.fieldId ? row?.[item.fieldId] : undefined;\n      return [row, cell];\n    },\n  } as any);\n\nexport function buildFieldsPropType<\n  ColumnConfig extends BaseColumnConfig,\n  Props extends FieldfulProps<ColumnConfig>\n>({\n  advanced,\n  displayName,\n  minimalValue = (_props, contextData) => contextData?.minimalFullLengthFields,\n  ...opts\n}: {\n  advanced?: boolean;\n  displayName?: string;\n  minimalValue?: ContextDependentConfig<Props, any>;\n} & FieldSubpropsOpts<ColumnConfig>): PropType<Props> {\n  return {\n    type: \"array\",\n    advanced,\n    displayName,\n    hidden: (ps) => !ps.data,\n    unstable__keyFunc: (x) => x.key,\n    unstable__minimalValue: minimalValue,\n    unstable__canDelete: (ps, _props, ctx, { item }) => {\n      if (opts.canChangeField) {\n        return true;\n      }\n      if (!ctx?.schema) {\n        // still loading...\n        return false;\n      }\n      if (\n        item.fieldId &&\n        ctx.schema.fields.some((f) => f.id === item.fieldId)\n      ) {\n        return false;\n      }\n      return true;\n    },\n    itemType: {\n      type: \"object\",\n      nameFunc: (_item: any) => {\n        // Prefer to show the field ID when available, since there's no other indication what field you're edtiing if you relabeled it.\n        return _item.fieldId || _item.title || \"Custom value\";\n      },\n      fields: getFieldSubprops(opts),\n    },\n  };\n}\n","import { parseDate } from \"@plasmicpkgs/luxon-parser\";\nimport { Checkbox, Switch } from \"antd\";\nimport React from \"react\";\nimport {\n  BaseColumnConfig,\n  BooleanSettings,\n  DateTimeSettings,\n  DATETIME_TYPES,\n  DEFAULT_BOOLEAN_SETTINGS,\n  DEFAULT_CURRENCY_SETTINGS,\n  DEFAULT_DATETIME_SETTINGS,\n  DEFAULT_RELATIVE_DATETIME_SETTINGS,\n  NumberSettings,\n  NUMBER_TYPES,\n  RelativeDateTimeSettings,\n} from \"./field-mappings\";\nimport { isOneOf, maybe } from \"./utils\";\n\nexport function maybeRenderValue(\n  record: any,\n  cconfig: BaseColumnConfig | undefined\n) {\n  return cconfig ? renderValue(record, cconfig) : undefined;\n}\n\nexport function multiRenderValue(\n  record: any,\n  cconfigs: BaseColumnConfig[] | undefined\n) {\n  return cconfigs\n    ?.flatMap((cc) =>\n      cc.isHidden ? [] : [` • `, <>{renderValue(record, cc)}</>]\n    )\n    .slice(1);\n}\n\nexport function maybeRenderString(\n  record: any,\n  cconfig: BaseColumnConfig | undefined\n) {\n  return cconfig && !cconfig.isHidden\n    ? maybe(getFieldValue(record, cconfig), asString)\n    : undefined;\n}\n\nfunction getFieldValue(record: any, cconfig: BaseColumnConfig) {\n  let value = cconfig.fieldId ? record[cconfig.fieldId] : undefined;\n\n  if (cconfig.expr) {\n    value = cconfig.expr(record, value);\n  }\n\n  return value;\n}\n\nexport function getFieldAggregateValue(\n  record: any,\n  cconfigs: BaseColumnConfig[] | undefined,\n  separator = \", \"\n) {\n  if (!cconfigs?.length) return undefined;\n\n  return cconfigs?.length\n    ? cconfigs.map((item) => getFieldValue(record, item)).join(separator)\n    : undefined;\n}\n\nexport function renderValue(record: any, cconfig: BaseColumnConfig) {\n  const value = getFieldValue(record, cconfig);\n\n  if (value == null) {\n    return \"\";\n  }\n\n  if (cconfig.dataType === \"auto\") {\n    return renderAuto(value);\n  } else {\n    const coerced = coerceValue(value, cconfig.dataType);\n    if (\n      isOneOf(cconfig.dataType, NUMBER_TYPES) &&\n      typeof coerced === \"number\"\n    ) {\n      return renderNumber(coerced, cconfig as NumberSettings);\n    } else if (cconfig.dataType === \"boolean\" && typeof coerced === \"boolean\") {\n      return renderBoolean(coerced, cconfig);\n    } else if (cconfig.dataType === \"datetime\" && coerced instanceof Date) {\n      return renderDate(coerced, cconfig);\n    } else if (\n      cconfig.dataType === \"relative-datetime\" &&\n      coerced instanceof Date\n    ) {\n      return renderRelativeDate(coerced, cconfig);\n    }\n    return asString(value);\n  }\n}\n\nfunction renderAuto(value: unknown): React.ReactNode {\n  if (typeof value === \"number\") {\n    return renderNumber(value, { dataType: \"number\" });\n  } else if (typeof value === \"boolean\") {\n    return renderBoolean(value, DEFAULT_BOOLEAN_SETTINGS);\n  } else if (value instanceof Date) {\n    return renderDate(value, DEFAULT_DATETIME_SETTINGS);\n  } else {\n    const coerced = tryCoerceAuto(value);\n    if (coerced === CANNOT_COERCE) {\n      return asString(value);\n    } else {\n      return renderAuto(coerced);\n    }\n  }\n}\n\nfunction tryCoerceAuto(value: unknown) {\n  for (const dataType of [\n    \"number\",\n    \"datetime\",\n  ] as BaseColumnConfig[\"dataType\"][]) {\n    const coerced = coerceValue(value, dataType);\n    if (coerced !== CANNOT_COERCE) {\n      return coerced;\n    }\n  }\n  return CANNOT_COERCE;\n}\n\nfunction renderNumber(value: number, cconfig: NumberSettings) {\n  if (cconfig.dataType === \"number\") {\n    return new Intl.NumberFormat(cconfig.locale, cconfig).format(value);\n  } else if (cconfig.dataType === \"percent\") {\n    return new Intl.NumberFormat(cconfig.locale, {\n      ...cconfig,\n      style: \"percent\",\n    }).format(value);\n  } else if (cconfig.dataType === \"currency\") {\n    return new Intl.NumberFormat(cconfig.locale, {\n      ...DEFAULT_CURRENCY_SETTINGS,\n      ...cconfig,\n      style: \"currency\",\n    }).format(value);\n  } else {\n    throw new Error(`Unexpected dataType ${(cconfig as any).dataType}`);\n  }\n}\n\nfunction renderDate(value: Date, cconfig: DateTimeSettings) {\n  const opts = {\n    ...DEFAULT_DATETIME_SETTINGS,\n    ...cconfig,\n  };\n  if (opts.dateStyle === \"none\") {\n    delete opts[\"dateStyle\"];\n  }\n  if (opts.timeStyle === \"none\") {\n    delete opts[\"timeStyle\"];\n  }\n  return new Intl.DateTimeFormat(cconfig.locale, opts as any).format(value);\n}\n\nconst SECOND_MS = 1000;\nconst MINUTE_MS = 60 * SECOND_MS;\nconst HOUR_MS = 60 * MINUTE_MS;\nconst DAY_MS = 24 * HOUR_MS;\nconst WEEK_MS = 7 * DAY_MS;\nconst UNIT_TO_MS = {\n  second: SECOND_MS,\n  minute: MINUTE_MS,\n  hour: HOUR_MS,\n  day: DAY_MS,\n  week: WEEK_MS,\n} as const;\nconst UNITS_BY_MS = Object.keys(UNIT_TO_MS) as (keyof typeof UNIT_TO_MS)[];\n\nfunction renderRelativeDate(value: Date, cconfig: RelativeDateTimeSettings) {\n  const opts = {\n    ...DEFAULT_RELATIVE_DATETIME_SETTINGS,\n    ...cconfig,\n  };\n  const unit = cconfig.unit ?? \"day\";\n  const formatter = new Intl.RelativeTimeFormat(cconfig.locale, opts);\n  if (isOneOf(unit, UNITS_BY_MS)) {\n    // for \"exact\" units, we can do it by just calcluating the difference\n    // by ms\n    const diff = value.getTime() - new Date().getTime();\n    return formatter.format(Math.round(diff / UNIT_TO_MS[unit]), unit);\n  } else {\n    // otherwise we need to calculate by the specific unit\n    if (unit === \"year\") {\n      const diff = value.getFullYear() - new Date().getFullYear();\n      return formatter.format(diff, unit);\n    } else if (unit === \"month\") {\n      const months = (d: Date) => d.getFullYear() * 12 + d.getMonth() + 1;\n      const diff = months(value) - months(new Date());\n      return formatter.format(diff, unit);\n    } else {\n      throw new Error(`Unexpected relative time unit ${unit}`);\n    }\n  }\n}\n\nfunction renderBoolean(value: boolean, cconfig: BooleanSettings) {\n  const showAs = cconfig.showAs ?? DEFAULT_BOOLEAN_SETTINGS.showAs;\n  if (showAs === \"checkbox\") {\n    return <Checkbox checked={value} />;\n  } else if (showAs === \"switch\") {\n    return <Switch checked={value} />;\n  } else {\n    return value ? \"true\" : \"false\";\n  }\n}\n\nconst CANNOT_COERCE = Symbol(\"plasmic-cannot-coerce\");\nfunction coerceValue(value: unknown, dataType: BaseColumnConfig[\"dataType\"]) {\n  if (value == null) {\n    return null;\n  }\n  try {\n    if (isOneOf(dataType, NUMBER_TYPES)) {\n      if (typeof value === \"number\") {\n        return value;\n      } else if (typeof value === \"string\") {\n        const maybeNumber = +value;\n        if (!isNaN(maybeNumber)) {\n          return maybeNumber;\n        }\n      }\n    } else if (isOneOf(dataType, DATETIME_TYPES)) {\n      if (value instanceof Date) {\n        return value;\n      } else if (typeof value === \"number\") {\n        return new Date(value);\n      } else if (typeof value === \"string\") {\n        // We don't want to simply use Date because it's too loose and varies across platforms.\n        // It'll parse even things like \"42\" and \"iPhone 8\" as dates!\n        //\n        // After a bunch of research, I couldn't find a great simple way to recognize a bunch of common date formats.\n        // Closest such resource I could find was this list of formats:\n        // https://gist.github.com/brandonjp/ac259099ba95868c4826fc0f58f9e7b4\n        // But for now it's probably better to stick to one of the \"standard\" computer formats rather than try to recognize various \"humanized\" date time formats.\n        // We could try to expand this in the future.\n        //\n        // As far as libraries go:\n        // dayjs has very buggy and long-neglected support for parsing.\n        // Temporal doesn't handle general parsing by format.\n        // Luxon is maintained and decent, though it doesn't accept a whole list of formats.\n        //\n        // Right now we also don't know anything about performance.\n        const parsed = parseDate(value);\n        return parsed ? parsed : CANNOT_COERCE;\n      }\n    } else if (dataType === \"boolean\") {\n      if (value === true || value === false) {\n        return value;\n      } else if (typeof value === \"number\") {\n        return value !== 0;\n      } else if (typeof value === \"string\") {\n        return value.toLowerCase() === \"true\";\n      }\n    } else if (dataType === \"string\") {\n      return asString(value);\n    } else if (dataType === \"auto\") {\n      return value;\n    }\n  } catch (err) {\n    // Ignore error; just fail to coerce\n  }\n\n  return CANNOT_COERCE;\n}\n\nfunction asString(value: unknown) {\n  if (value == null) {\n    return \"\";\n  } else if (typeof value === \"string\") {\n    return value;\n  } else if (typeof value === \"object\") {\n    if (\"toString\" in value && typeof value.toString === \"function\") {\n      return value.toString();\n    } else {\n      return JSON.stringify(value);\n    }\n  } else {\n    return `${value}`;\n  }\n}\n"],"names":["__spreadValues","withoutFalsey","_a","__spreadProps","isOneOf","React","maybe","Checkbox","Switch","parseDate"],"mappings":"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"}