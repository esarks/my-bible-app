import { NormalizedData, QueryResult } from "@plasmicapp/data-sources";
import type { GetRowKey, SorterResult } from "antd/es/table/interface";
import React, { Key } from "react";
import { BaseColumnConfig } from "./field-mappings";
export declare function useSortedFilteredData(data: NormalizedData | undefined, columns: BaseColumnConfig[]): {
    finalData: Record<string, unknown>[] | undefined;
    search: string;
    setSearch: React.Dispatch<React.SetStateAction<string>>;
    setSortState: React.Dispatch<React.SetStateAction<{
        sorter: SorterResult<Record<string, any>>;
    } | undefined>>;
};
interface RowActionItem {
    type: "item";
    label: string;
    onClick: (rowKey: string, row: any) => void;
}
interface RowActionMenu {
    type: "menu";
    label: string;
    children?: RowActionItem[];
}
export type RowAction = RowActionItem | RowActionMenu;
export declare function tagDataArray(xs: object[]): {
    __tag: number;
}[];
export declare function getTag(x: unknown): any;
/**
 * Don't want to simply return undefined, we prefer always having *some* row key so that users can always (say) click on things without needing to explicitly set a row key.
 */
export declare function deriveRowKey(_data: QueryResult | undefined, rowKey: string | GetRowKey<Record<any, any>> | undefined): string | GetRowKey<Record<any, any>> | ((x: unknown) => any);
export declare function deriveKeyOfRow(row: any, rowKey: string | GetRowKey<any> | undefined): any;
export declare function renderActions(rowActions: RowAction[], row: any, data: NormalizedData | undefined, rowKey: string | ((record: any, index?: number) => Key) | undefined): React.JSX.Element[];
export {};
