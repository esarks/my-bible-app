'use strict';

var formatting = require('./formatting-6dc71cdd.cjs.js');
var common = require('./common-e1d76791.cjs.js');
var utils = require('./utils-65c486f0.cjs.js');

function roleProp({
  role,
  singular = false,
  advanced = false,
  displayName
}) {
  return singular ? {
    type: "object",
    displayName: displayName || `${common.capitalize(role)} field`,
    advanced,
    hidden: (ps) => !ps.data,
    nameFunc: (item) => utils.maybe(
      item,
      (i) => i.isHidden ? "Hidden" : i.fieldId || "Custom value"
    ),
    fields: formatting.getFieldSubprops({
      canChangeField: true,
      noTitle: true
    }),
    defaultValueHint: (_props, contextData) => {
      var _a;
      return ((_a = contextData == null ? void 0 : contextData.minimalFullLengthFields) != null ? _a : []).find(
        (f) => f.role === role
      );
    }
  } : formatting.buildFieldsPropType({
    displayName: displayName || `${common.capitalize(role)} fields`,
    advanced,
    noTitle: true,
    canChangeField: true,
    minimalValue: (_props, contextData) => {
      var _a;
      return ((_a = contextData == null ? void 0 : contextData.minimalFullLengthFields) != null ? _a : []).filter(
        (f) => f.role === role
      );
    }
  });
}
function dataProp() {
  return {
    type: "dataSourceOpData",
    description: "The data to display"
  };
}
function commonProps() {
  return {
    pagination: {
      type: "boolean",
      advanced: true,
      defaultValueHint: true
    },
    pageSize: {
      type: "number",
      defaultValueHint: 10,
      advanced: true
    },
    hideSearch: {
      type: "boolean",
      description: "Hides the search toolbar",
      advanced: true
    }
  };
}
function rowActionsProp() {
  return {
    type: "array",
    displayName: "Row actions",
    advanced: true,
    itemType: {
      type: "object",
      nameFunc: (item) => item.label,
      fields: {
        type: {
          type: "choice",
          options: ["item", "menu"],
          defaultValue: "item"
        },
        label: {
          type: "string",
          displayName: "Action label"
        },
        children: {
          type: "array",
          displayName: "Menu items",
          itemType: {
            type: "object",
            fields: {
              label: {
                type: "string",
                displayName: "Action label"
              },
              onClick: {
                type: "eventHandler",
                argTypes: [
                  { name: "rowKey", type: "string" },
                  { name: "row", type: "object" }
                ]
              }
            }
          },
          hidden: (_ps, _ctx, { item }) => item.type !== "menu"
        },
        onClick: {
          type: "eventHandler",
          displayName: "Action",
          argTypes: [
            { name: "rowKey", type: "string" },
            { name: "row", type: "object" }
          ],
          hidden: (_ps, _ctx, { item }) => item.type !== "item"
        }
      }
    }
  };
}
function onRowClickProp() {
  return {
    type: "eventHandler",
    displayName: "On row clicked",
    argTypes: [
      { name: "rowKey", type: "string" },
      { name: "row", type: "object" },
      { name: "event", type: "object" }
    ]
  };
}

exports.commonProps = commonProps;
exports.dataProp = dataProp;
exports.onRowClickProp = onRowClickProp;
exports.roleProp = roleProp;
exports.rowActionsProp = rowActionsProp;
//# sourceMappingURL=common-prop-types-193ce561.cjs.js.map
